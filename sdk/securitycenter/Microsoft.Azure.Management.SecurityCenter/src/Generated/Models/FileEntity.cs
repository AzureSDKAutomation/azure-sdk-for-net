// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Represents a file that is reported as part of the security detection
    /// alert.
    /// </summary>
    [Newtonsoft.Json.JsonObject("file")]
    public partial class FileEntity : AlertEntity
    {
        /// <summary>
        /// Initializes a new instance of the FileEntity class.
        /// </summary>
        public FileEntity()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FileEntity class.
        /// </summary>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="fullPath">The file's full path, combining both
        /// directory and name.</param>
        /// <param name="directory">The full path to the file’s
        /// directory.</param>
        /// <param name="name">The file name without the path.</param>
        /// <param name="fileHashes">The file hashes associated with this
        /// file.</param>
        public FileEntity(IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), string fullPath = default(string), string directory = default(string), string name = default(string), HostEntity host = default(HostEntity), IList<FileHashEntity> fileHashes = default(IList<FileHashEntity>))
            : base(additionalProperties)
        {
            FullPath = fullPath;
            Directory = directory;
            Name = name;
            Host = host;
            FileHashes = fileHashes;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the file's full path, combining both directory and
        /// name.
        /// </summary>
        [JsonProperty(PropertyName = "fullPath")]
        public string FullPath { get; set; }

        /// <summary>
        /// Gets or sets the full path to the file’s directory.
        /// </summary>
        [JsonProperty(PropertyName = "directory")]
        public string Directory { get; set; }

        /// <summary>
        /// Gets or sets the file name without the path.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "host")]
        public HostEntity Host { get; set; }

        /// <summary>
        /// Gets or sets the file hashes associated with this file.
        /// </summary>
        [JsonProperty(PropertyName = "fileHashes")]
        public IList<FileHashEntity> FileHashes { get; set; }

    }
}
