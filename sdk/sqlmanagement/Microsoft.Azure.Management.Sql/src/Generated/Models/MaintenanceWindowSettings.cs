// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Sql.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The properties of managed instance maintenance window.
    /// </summary>
    public partial class MaintenanceWindowSettings
    {
        /// <summary>
        /// Initializes a new instance of the MaintenanceWindowSettings class.
        /// </summary>
        public MaintenanceWindowSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MaintenanceWindowSettings class.
        /// </summary>
        /// <param name="frequency">Specifies frequency of a maintenance
        /// window.
        /// None - No recurring pattern,
        /// Daily - Daily window; specified by days of week,
        /// Monthly - Monthly window; specified by dates in a month,
        /// Flexible - Flexible window; specified by week numbers and days of
        /// week. Possible values include: 'NonRecurrent', 'Weekly', 'Monthly',
        /// 'Flexible'</param>
        /// <param name="customerTimeZone">Specifies the timezone for which the
        /// window will be set. See reference for TimezoneId of
        /// ManagedInstance.</param>
        /// <param name="timeOfUpgrade">Specifies time of upgrade for
        /// maintenance window of managed instance.</param>
        /// <param name="dates">Specifies days of the month when maintenance
        /// window is to be opened.</param>
        /// <param name="scheduledDays">Specifies days in a week when
        /// maintenance window is to be opened.</param>
        /// <param name="scheduledWeeks">Specifies weeks on which the
        /// maintenance window should be opened. E.g. if '1,3' is provided and
        /// for ScheduledDays Sunday is provided,
        /// that means that window is to be opened on Sunday every first and
        /// third week.</param>
        /// <param name="oneOffStartTime">Specifies one off start time for a
        /// maintenance window. This is the time when window will be opened for
        /// the first time.</param>
        public MaintenanceWindowSettings(string frequency, string customerTimeZone, string timeOfUpgrade = default(string), IList<int?> dates = default(IList<int?>), IList<string> scheduledDays = default(IList<string>), IList<int?> scheduledWeeks = default(IList<int?>), System.DateTime? oneOffStartTime = default(System.DateTime?))
        {
            TimeOfUpgrade = timeOfUpgrade;
            Dates = dates;
            ScheduledDays = scheduledDays;
            ScheduledWeeks = scheduledWeeks;
            OneOffStartTime = oneOffStartTime;
            Frequency = frequency;
            CustomerTimeZone = customerTimeZone;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets specifies time of upgrade for maintenance window of
        /// managed instance.
        /// </summary>
        [JsonProperty(PropertyName = "timeOfUpgrade")]
        public string TimeOfUpgrade { get; set; }

        /// <summary>
        /// Gets or sets specifies days of the month when maintenance window is
        /// to be opened.
        /// </summary>
        [JsonProperty(PropertyName = "dates")]
        public IList<int?> Dates { get; set; }

        /// <summary>
        /// Gets or sets specifies days in a week when maintenance window is to
        /// be opened.
        /// </summary>
        [JsonProperty(PropertyName = "scheduledDays")]
        public IList<string> ScheduledDays { get; set; }

        /// <summary>
        /// Gets or sets specifies weeks on which the maintenance window should
        /// be opened. E.g. if '1,3' is provided and for ScheduledDays Sunday
        /// is provided,
        /// that means that window is to be opened on Sunday every first and
        /// third week.
        /// </summary>
        [JsonProperty(PropertyName = "scheduledWeeks")]
        public IList<int?> ScheduledWeeks { get; set; }

        /// <summary>
        /// Gets or sets specifies one off start time for a maintenance window.
        /// This is the time when window will be opened for the first time.
        /// </summary>
        [JsonProperty(PropertyName = "oneOffStartTime")]
        public System.DateTime? OneOffStartTime { get; set; }

        /// <summary>
        /// Gets or sets specifies frequency of a maintenance window.
        /// None - No recurring pattern,
        /// Daily - Daily window; specified by days of week,
        /// Monthly - Monthly window; specified by dates in a month,
        /// Flexible - Flexible window; specified by week numbers and days of
        /// week. Possible values include: 'NonRecurrent', 'Weekly', 'Monthly',
        /// 'Flexible'
        /// </summary>
        [JsonProperty(PropertyName = "frequency")]
        public string Frequency { get; set; }

        /// <summary>
        /// Gets or sets specifies the timezone for which the window will be
        /// set. See reference for TimezoneId of ManagedInstance.
        /// </summary>
        [JsonProperty(PropertyName = "customerTimeZone")]
        public string CustomerTimeZone { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Frequency == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Frequency");
            }
            if (CustomerTimeZone == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CustomerTimeZone");
            }
        }
    }
}
