// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WebSites
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for WorkerAppsRevisionsOperations.
    /// </summary>
    public static partial class WorkerAppsRevisionsOperationsExtensions
    {
            /// <summary>
            /// Get the Revisions for a given Worker App.
            /// </summary>
            /// <remarks>
            /// Description for Get the Revisions for a given Worker App.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='workerAppName'>
            /// Name of the Worker App for which Revisions are needed.
            /// </param>
            public static IPage<WorkerAppRevision> ListRevisions(this IWorkerAppsRevisionsOperations operations, string resourceGroupName, string workerAppName)
            {
                return operations.ListRevisionsAsync(resourceGroupName, workerAppName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the Revisions for a given Worker App.
            /// </summary>
            /// <remarks>
            /// Description for Get the Revisions for a given Worker App.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='workerAppName'>
            /// Name of the Worker App for which Revisions are needed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WorkerAppRevision>> ListRevisionsAsync(this IWorkerAppsRevisionsOperations operations, string resourceGroupName, string workerAppName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRevisionsWithHttpMessagesAsync(resourceGroupName, workerAppName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a revision of a Worker App.
            /// </summary>
            /// <remarks>
            /// Description for Get a revision of a Worker App.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='workerAppName'>
            /// Name of the Worker App.
            /// </param>
            /// <param name='name'>
            /// Name of the Worker App Revision.
            /// </param>
            public static WorkerAppRevision GetRevision(this IWorkerAppsRevisionsOperations operations, string resourceGroupName, string workerAppName, string name)
            {
                return operations.GetRevisionAsync(resourceGroupName, workerAppName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a revision of a Worker App.
            /// </summary>
            /// <remarks>
            /// Description for Get a revision of a Worker App.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='workerAppName'>
            /// Name of the Worker App.
            /// </param>
            /// <param name='name'>
            /// Name of the Worker App Revision.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkerAppRevision> GetRevisionAsync(this IWorkerAppsRevisionsOperations operations, string resourceGroupName, string workerAppName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRevisionWithHttpMessagesAsync(resourceGroupName, workerAppName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Activates a revision for a Worker App
            /// </summary>
            /// <remarks>
            /// Description for Activates a revision for a Worker App
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='workerAppName'>
            /// Name of the Worker App.
            /// </param>
            /// <param name='name'>
            /// Name of the Worker App Revision to activate
            /// </param>
            public static void ActivateRevision(this IWorkerAppsRevisionsOperations operations, string resourceGroupName, string workerAppName, string name)
            {
                operations.ActivateRevisionAsync(resourceGroupName, workerAppName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Activates a revision for a Worker App
            /// </summary>
            /// <remarks>
            /// Description for Activates a revision for a Worker App
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='workerAppName'>
            /// Name of the Worker App.
            /// </param>
            /// <param name='name'>
            /// Name of the Worker App Revision to activate
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ActivateRevisionAsync(this IWorkerAppsRevisionsOperations operations, string resourceGroupName, string workerAppName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ActivateRevisionWithHttpMessagesAsync(resourceGroupName, workerAppName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deactivates a revision for a Worker App
            /// </summary>
            /// <remarks>
            /// Description for Deactivates a revision for a Worker App
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='workerAppName'>
            /// Name of the Worker App.
            /// </param>
            /// <param name='name'>
            /// Name of the Worker App Revision to deactivate
            /// </param>
            public static void DeactivateRevision(this IWorkerAppsRevisionsOperations operations, string resourceGroupName, string workerAppName, string name)
            {
                operations.DeactivateRevisionAsync(resourceGroupName, workerAppName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deactivates a revision for a Worker App
            /// </summary>
            /// <remarks>
            /// Description for Deactivates a revision for a Worker App
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='workerAppName'>
            /// Name of the Worker App.
            /// </param>
            /// <param name='name'>
            /// Name of the Worker App Revision to deactivate
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeactivateRevisionAsync(this IWorkerAppsRevisionsOperations operations, string resourceGroupName, string workerAppName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeactivateRevisionWithHttpMessagesAsync(resourceGroupName, workerAppName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Restarts a revision for a Worker App
            /// </summary>
            /// <remarks>
            /// Description for Restarts a revision for a Worker App
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='workerAppName'>
            /// Name of the Worker App.
            /// </param>
            /// <param name='name'>
            /// Name of the Worker App Revision to restart
            /// </param>
            public static void RestartRevision(this IWorkerAppsRevisionsOperations operations, string resourceGroupName, string workerAppName, string name)
            {
                operations.RestartRevisionAsync(resourceGroupName, workerAppName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restarts a revision for a Worker App
            /// </summary>
            /// <remarks>
            /// Description for Restarts a revision for a Worker App
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='workerAppName'>
            /// Name of the Worker App.
            /// </param>
            /// <param name='name'>
            /// Name of the Worker App Revision to restart
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RestartRevisionAsync(this IWorkerAppsRevisionsOperations operations, string resourceGroupName, string workerAppName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RestartRevisionWithHttpMessagesAsync(resourceGroupName, workerAppName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get the Revisions for a given Worker App.
            /// </summary>
            /// <remarks>
            /// Description for Get the Revisions for a given Worker App.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<WorkerAppRevision> ListRevisionsNext(this IWorkerAppsRevisionsOperations operations, string nextPageLink)
            {
                return operations.ListRevisionsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the Revisions for a given Worker App.
            /// </summary>
            /// <remarks>
            /// Description for Get the Revisions for a given Worker App.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WorkerAppRevision>> ListRevisionsNextAsync(this IWorkerAppsRevisionsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRevisionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
