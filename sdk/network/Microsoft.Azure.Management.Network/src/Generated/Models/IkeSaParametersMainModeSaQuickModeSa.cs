// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A list of quick mode security associations.
    /// </summary>
    public partial class IkeSaParametersMainModeSaQuickModeSa
    {
        /// <summary>
        /// Initializes a new instance of the
        /// IkeSaParametersMainModeSaQuickModeSa class.
        /// </summary>
        public IkeSaParametersMainModeSaQuickModeSa()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// IkeSaParametersMainModeSaQuickModeSa class.
        /// </summary>
        /// <param name="localEndpoint">The local endpoint.</param>
        /// <param name="remoteEndpoint">The remote endpoint.</param>
        /// <param name="encryption">The IPSec encryption algorithm (IKE phase
        /// 2).</param>
        /// <param name="integrity">The IPSec integrity algorithm (IKE phase
        /// 2).</param>
        /// <param name="pfsGroupId">The PFS Group.</param>
        /// <param name="inboundSPI">The Inbound SPI SA.</param>
        /// <param name="outboundSPI">The Outbound SPI SA.</param>
        /// <param name="localTrafficSelectors">The local traffic
        /// selectors.</param>
        /// <param name="remoteTrafficSelectors">The remote traffic
        /// selectors.</param>
        /// <param name="lifetimeKilobytes">The QM SA Lifetime KBytes.</param>
        /// <param name="lifeTimeSeconds">The QM SA Lifetime Seconds.</param>
        /// <param name="isSaInitiator">Flag to check if SA Initiator or
        /// not.</param>
        /// <param name="elapsedTimeInseconds">The time elapsed in
        /// seconds.</param>
        public IkeSaParametersMainModeSaQuickModeSa(string localEndpoint = default(string), string remoteEndpoint = default(string), string encryption = default(string), string integrity = default(string), string pfsGroupId = default(string), int? inboundSPI = default(int?), int? outboundSPI = default(int?), IList<string> localTrafficSelectors = default(IList<string>), IList<string> remoteTrafficSelectors = default(IList<string>), long? lifetimeKilobytes = default(long?), long? lifeTimeSeconds = default(long?), bool? isSaInitiator = default(bool?), int? elapsedTimeInseconds = default(int?))
        {
            LocalEndpoint = localEndpoint;
            RemoteEndpoint = remoteEndpoint;
            Encryption = encryption;
            Integrity = integrity;
            PfsGroupId = pfsGroupId;
            InboundSPI = inboundSPI;
            OutboundSPI = outboundSPI;
            LocalTrafficSelectors = localTrafficSelectors;
            RemoteTrafficSelectors = remoteTrafficSelectors;
            LifetimeKilobytes = lifetimeKilobytes;
            LifeTimeSeconds = lifeTimeSeconds;
            IsSaInitiator = isSaInitiator;
            ElapsedTimeInseconds = elapsedTimeInseconds;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the local endpoint.
        /// </summary>
        [JsonProperty(PropertyName = "localEndpoint")]
        public string LocalEndpoint { get; set; }

        /// <summary>
        /// Gets or sets the remote endpoint.
        /// </summary>
        [JsonProperty(PropertyName = "remoteEndpoint")]
        public string RemoteEndpoint { get; set; }

        /// <summary>
        /// Gets or sets the IPSec encryption algorithm (IKE phase 2).
        /// </summary>
        [JsonProperty(PropertyName = "encryption")]
        public string Encryption { get; set; }

        /// <summary>
        /// Gets or sets the IPSec integrity algorithm (IKE phase 2).
        /// </summary>
        [JsonProperty(PropertyName = "integrity")]
        public string Integrity { get; set; }

        /// <summary>
        /// Gets or sets the PFS Group.
        /// </summary>
        [JsonProperty(PropertyName = "pfsGroupId")]
        public string PfsGroupId { get; set; }

        /// <summary>
        /// Gets or sets the Inbound SPI SA.
        /// </summary>
        [JsonProperty(PropertyName = "inboundSPI")]
        public int? InboundSPI { get; set; }

        /// <summary>
        /// Gets or sets the Outbound SPI SA.
        /// </summary>
        [JsonProperty(PropertyName = "outboundSPI")]
        public int? OutboundSPI { get; set; }

        /// <summary>
        /// Gets or sets the local traffic selectors.
        /// </summary>
        [JsonProperty(PropertyName = "localTrafficSelectors")]
        public IList<string> LocalTrafficSelectors { get; set; }

        /// <summary>
        /// Gets or sets the remote traffic selectors.
        /// </summary>
        [JsonProperty(PropertyName = "remoteTrafficSelectors")]
        public IList<string> RemoteTrafficSelectors { get; set; }

        /// <summary>
        /// Gets or sets the QM SA Lifetime KBytes.
        /// </summary>
        [JsonProperty(PropertyName = "lifetimeKilobytes")]
        public long? LifetimeKilobytes { get; set; }

        /// <summary>
        /// Gets or sets the QM SA Lifetime Seconds.
        /// </summary>
        [JsonProperty(PropertyName = "lifeTimeSeconds")]
        public long? LifeTimeSeconds { get; set; }

        /// <summary>
        /// Gets or sets flag to check if SA Initiator or not.
        /// </summary>
        [JsonProperty(PropertyName = "isSaInitiator")]
        public bool? IsSaInitiator { get; set; }

        /// <summary>
        /// Gets or sets the time elapsed in seconds.
        /// </summary>
        [JsonProperty(PropertyName = "elapsedTimeInseconds")]
        public int? ElapsedTimeInseconds { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (LifetimeKilobytes > 102400000)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "LifetimeKilobytes", 102400000);
            }
            if (LifetimeKilobytes < 1024)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "LifetimeKilobytes", 1024);
            }
            if (LifeTimeSeconds > 27000)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "LifeTimeSeconds", 27000);
            }
            if (LifeTimeSeconds < 300)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "LifeTimeSeconds", 300);
            }
        }
    }
}
