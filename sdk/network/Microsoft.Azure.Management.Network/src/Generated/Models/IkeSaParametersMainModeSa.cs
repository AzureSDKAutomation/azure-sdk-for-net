// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A list of main mode security associations.
    /// </summary>
    public partial class IkeSaParametersMainModeSa
    {
        /// <summary>
        /// Initializes a new instance of the IkeSaParametersMainModeSa class.
        /// </summary>
        public IkeSaParametersMainModeSa()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IkeSaParametersMainModeSa class.
        /// </summary>
        /// <param name="localEndpoint">The local endpoint.</param>
        /// <param name="remoteEndpoint">The remote endpoint.</param>
        /// <param name="initiatorCookie">The initiator cookie.</param>
        /// <param name="responderCookie">The responder cookie.</param>
        /// <param name="localUdpEncapsulationPort">The local UDP encapsulation
        /// port.</param>
        /// <param name="remoteUdpEncapsulationPort">The remote UDP
        /// encapsulation port.</param>
        /// <param name="encryption">The IKE encryption algorithm (IKE phase
        /// 1).</param>
        /// <param name="integrity">The IKE integrity algorithm (IKE phase
        /// 1).</param>
        /// <param name="dhGroup">The DH Group.</param>
        /// <param name="lifeTimeSeconds">The MM SA Lifetime in
        /// seconds.</param>
        /// <param name="isSaInitiator">Flag to check if SA Initiator or
        /// not.</param>
        /// <param name="elapsedTimeInseconds">The time elapsed in
        /// seconds.</param>
        /// <param name="quickModeSa">A list of quick mode security
        /// associations.</param>
        public IkeSaParametersMainModeSa(string localEndpoint = default(string), string remoteEndpoint = default(string), long? initiatorCookie = default(long?), long? responderCookie = default(long?), int? localUdpEncapsulationPort = default(int?), int? remoteUdpEncapsulationPort = default(int?), string encryption = default(string), string integrity = default(string), string dhGroup = default(string), int? lifeTimeSeconds = default(int?), bool? isSaInitiator = default(bool?), int? elapsedTimeInseconds = default(int?), IkeSaParametersMainModeSaQuickModeSa quickModeSa = default(IkeSaParametersMainModeSaQuickModeSa))
        {
            LocalEndpoint = localEndpoint;
            RemoteEndpoint = remoteEndpoint;
            InitiatorCookie = initiatorCookie;
            ResponderCookie = responderCookie;
            LocalUdpEncapsulationPort = localUdpEncapsulationPort;
            RemoteUdpEncapsulationPort = remoteUdpEncapsulationPort;
            Encryption = encryption;
            Integrity = integrity;
            DhGroup = dhGroup;
            LifeTimeSeconds = lifeTimeSeconds;
            IsSaInitiator = isSaInitiator;
            ElapsedTimeInseconds = elapsedTimeInseconds;
            QuickModeSa = quickModeSa;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the local endpoint.
        /// </summary>
        [JsonProperty(PropertyName = "localEndpoint")]
        public string LocalEndpoint { get; set; }

        /// <summary>
        /// Gets or sets the remote endpoint.
        /// </summary>
        [JsonProperty(PropertyName = "remoteEndpoint")]
        public string RemoteEndpoint { get; set; }

        /// <summary>
        /// Gets or sets the initiator cookie.
        /// </summary>
        [JsonProperty(PropertyName = "initiatorCookie")]
        public long? InitiatorCookie { get; set; }

        /// <summary>
        /// Gets or sets the responder cookie.
        /// </summary>
        [JsonProperty(PropertyName = "responderCookie")]
        public long? ResponderCookie { get; set; }

        /// <summary>
        /// Gets or sets the local UDP encapsulation port.
        /// </summary>
        [JsonProperty(PropertyName = "localUdpEncapsulationPort")]
        public int? LocalUdpEncapsulationPort { get; set; }

        /// <summary>
        /// Gets or sets the remote UDP encapsulation port.
        /// </summary>
        [JsonProperty(PropertyName = "remoteUdpEncapsulationPort")]
        public int? RemoteUdpEncapsulationPort { get; set; }

        /// <summary>
        /// Gets or sets the IKE encryption algorithm (IKE phase 1).
        /// </summary>
        [JsonProperty(PropertyName = "encryption")]
        public string Encryption { get; set; }

        /// <summary>
        /// Gets or sets the IKE integrity algorithm (IKE phase 1).
        /// </summary>
        [JsonProperty(PropertyName = "integrity")]
        public string Integrity { get; set; }

        /// <summary>
        /// Gets or sets the DH Group.
        /// </summary>
        [JsonProperty(PropertyName = "dhGroup")]
        public string DhGroup { get; set; }

        /// <summary>
        /// Gets or sets the MM SA Lifetime in seconds.
        /// </summary>
        [JsonProperty(PropertyName = "lifeTimeSeconds")]
        public int? LifeTimeSeconds { get; set; }

        /// <summary>
        /// Gets or sets flag to check if SA Initiator or not.
        /// </summary>
        [JsonProperty(PropertyName = "isSaInitiator")]
        public bool? IsSaInitiator { get; set; }

        /// <summary>
        /// Gets or sets the time elapsed in seconds.
        /// </summary>
        [JsonProperty(PropertyName = "elapsedTimeInseconds")]
        public int? ElapsedTimeInseconds { get; set; }

        /// <summary>
        /// Gets or sets a list of quick mode security associations.
        /// </summary>
        [JsonProperty(PropertyName = "quickModeSa")]
        public IkeSaParametersMainModeSaQuickModeSa QuickModeSa { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (QuickModeSa != null)
            {
                QuickModeSa.Validate();
            }
        }
    }
}
