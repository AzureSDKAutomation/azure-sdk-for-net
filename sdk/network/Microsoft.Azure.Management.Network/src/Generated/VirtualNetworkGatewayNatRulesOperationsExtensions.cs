// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for VirtualNetworkGatewayNatRulesOperations.
    /// </summary>
    public static partial class VirtualNetworkGatewayNatRulesOperationsExtensions
    {
            /// <summary>
            /// Retrieves the details of a nat ruleGet.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the Virtual Network Gateway.
            /// </param>
            /// <param name='virtualNetworkGatewayName'>
            /// The name of the gateway.
            /// </param>
            /// <param name='natRuleName'>
            /// The name of the nat rule.
            /// </param>
            public static VirtualNetworkGatewayNatRule Get(this IVirtualNetworkGatewayNatRulesOperations operations, string resourceGroupName, string virtualNetworkGatewayName, string natRuleName)
            {
                return operations.GetAsync(resourceGroupName, virtualNetworkGatewayName, natRuleName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the details of a nat ruleGet.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the Virtual Network Gateway.
            /// </param>
            /// <param name='virtualNetworkGatewayName'>
            /// The name of the gateway.
            /// </param>
            /// <param name='natRuleName'>
            /// The name of the nat rule.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VirtualNetworkGatewayNatRule> GetAsync(this IVirtualNetworkGatewayNatRulesOperations operations, string resourceGroupName, string virtualNetworkGatewayName, string natRuleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, virtualNetworkGatewayName, natRuleName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a nat rule to a scalable virtual network gateway if it doesn't
            /// exist else updates the existing nat rules.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the Virtual Network Gateway.
            /// </param>
            /// <param name='virtualNetworkGatewayName'>
            /// The name of the gateway.
            /// </param>
            /// <param name='natRuleName'>
            /// The name of the nat rule.
            /// </param>
            /// <param name='natRuleParameters'>
            /// Parameters supplied to create or Update a Nat Rule.
            /// </param>
            public static VirtualNetworkGatewayNatRule CreateOrUpdate(this IVirtualNetworkGatewayNatRulesOperations operations, string resourceGroupName, string virtualNetworkGatewayName, string natRuleName, VirtualNetworkGatewayNatRule natRuleParameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, virtualNetworkGatewayName, natRuleName, natRuleParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a nat rule to a scalable virtual network gateway if it doesn't
            /// exist else updates the existing nat rules.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the Virtual Network Gateway.
            /// </param>
            /// <param name='virtualNetworkGatewayName'>
            /// The name of the gateway.
            /// </param>
            /// <param name='natRuleName'>
            /// The name of the nat rule.
            /// </param>
            /// <param name='natRuleParameters'>
            /// Parameters supplied to create or Update a Nat Rule.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VirtualNetworkGatewayNatRule> CreateOrUpdateAsync(this IVirtualNetworkGatewayNatRulesOperations operations, string resourceGroupName, string virtualNetworkGatewayName, string natRuleName, VirtualNetworkGatewayNatRule natRuleParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, virtualNetworkGatewayName, natRuleName, natRuleParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a nat rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the Virtual Network Gateway.
            /// </param>
            /// <param name='virtualNetworkGatewayName'>
            /// The name of the gateway.
            /// </param>
            /// <param name='natRuleName'>
            /// The name of the nat rule.
            /// </param>
            public static void Delete(this IVirtualNetworkGatewayNatRulesOperations operations, string resourceGroupName, string virtualNetworkGatewayName, string natRuleName)
            {
                operations.DeleteAsync(resourceGroupName, virtualNetworkGatewayName, natRuleName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a nat rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the Virtual Network Gateway.
            /// </param>
            /// <param name='virtualNetworkGatewayName'>
            /// The name of the gateway.
            /// </param>
            /// <param name='natRuleName'>
            /// The name of the nat rule.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IVirtualNetworkGatewayNatRulesOperations operations, string resourceGroupName, string virtualNetworkGatewayName, string natRuleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, virtualNetworkGatewayName, natRuleName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates a nat rule to a scalable virtual network gateway if it doesn't
            /// exist else updates the existing nat rules.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the Virtual Network Gateway.
            /// </param>
            /// <param name='virtualNetworkGatewayName'>
            /// The name of the gateway.
            /// </param>
            /// <param name='natRuleName'>
            /// The name of the nat rule.
            /// </param>
            /// <param name='natRuleParameters'>
            /// Parameters supplied to create or Update a Nat Rule.
            /// </param>
            public static VirtualNetworkGatewayNatRule BeginCreateOrUpdate(this IVirtualNetworkGatewayNatRulesOperations operations, string resourceGroupName, string virtualNetworkGatewayName, string natRuleName, VirtualNetworkGatewayNatRule natRuleParameters)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, virtualNetworkGatewayName, natRuleName, natRuleParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a nat rule to a scalable virtual network gateway if it doesn't
            /// exist else updates the existing nat rules.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the Virtual Network Gateway.
            /// </param>
            /// <param name='virtualNetworkGatewayName'>
            /// The name of the gateway.
            /// </param>
            /// <param name='natRuleName'>
            /// The name of the nat rule.
            /// </param>
            /// <param name='natRuleParameters'>
            /// Parameters supplied to create or Update a Nat Rule.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VirtualNetworkGatewayNatRule> BeginCreateOrUpdateAsync(this IVirtualNetworkGatewayNatRulesOperations operations, string resourceGroupName, string virtualNetworkGatewayName, string natRuleName, VirtualNetworkGatewayNatRule natRuleParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, virtualNetworkGatewayName, natRuleName, natRuleParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a nat rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the Virtual Network Gateway.
            /// </param>
            /// <param name='virtualNetworkGatewayName'>
            /// The name of the gateway.
            /// </param>
            /// <param name='natRuleName'>
            /// The name of the nat rule.
            /// </param>
            public static void BeginDelete(this IVirtualNetworkGatewayNatRulesOperations operations, string resourceGroupName, string virtualNetworkGatewayName, string natRuleName)
            {
                operations.BeginDeleteAsync(resourceGroupName, virtualNetworkGatewayName, natRuleName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a nat rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the Virtual Network Gateway.
            /// </param>
            /// <param name='virtualNetworkGatewayName'>
            /// The name of the gateway.
            /// </param>
            /// <param name='natRuleName'>
            /// The name of the nat rule.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IVirtualNetworkGatewayNatRulesOperations operations, string resourceGroupName, string virtualNetworkGatewayName, string natRuleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, virtualNetworkGatewayName, natRuleName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
