// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for NetworkVirtualApplianceSitesOperations.
    /// </summary>
    public static partial class NetworkVirtualApplianceSitesOperationsExtensions
    {
            /// <summary>
            /// Deletes the specified site for Virtual Appliances.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='siteName'>
            /// The name of the site.
            /// </param>
            public static void Delete(this INetworkVirtualApplianceSitesOperations operations, string resourceGroupName, string siteName)
            {
                operations.DeleteAsync(resourceGroupName, siteName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified site for Virtual Appliances.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='siteName'>
            /// The name of the site.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this INetworkVirtualApplianceSitesOperations operations, string resourceGroupName, string siteName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, siteName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the specified Virtual Appliance Site.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='siteName'>
            /// The name of the site.
            /// </param>
            public static NetworkVirtualApplianceSite Get(this INetworkVirtualApplianceSitesOperations operations, string resourceGroupName, string siteName)
            {
                return operations.GetAsync(resourceGroupName, siteName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the specified Virtual Appliance Site.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='siteName'>
            /// The name of the site.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NetworkVirtualApplianceSite> GetAsync(this INetworkVirtualApplianceSitesOperations operations, string resourceGroupName, string siteName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, siteName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates the specified Network Virtual Appliance Site.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='siteName'>
            /// The name of the site.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update Network Virtual Appliance Site
            /// operation.
            /// </param>
            public static NetworkVirtualApplianceSite CreateOrUpdate(this INetworkVirtualApplianceSitesOperations operations, string resourceGroupName, string siteName, NetworkVirtualApplianceSite parameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, siteName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates the specified Network Virtual Appliance Site.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='siteName'>
            /// The name of the site.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update Network Virtual Appliance Site
            /// operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NetworkVirtualApplianceSite> CreateOrUpdateAsync(this INetworkVirtualApplianceSitesOperations operations, string resourceGroupName, string siteName, NetworkVirtualApplianceSite parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, siteName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all Network Virtual Appliance Sites in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            public static IPage<NetworkVirtualApplianceSite> ListByResourceGroup(this INetworkVirtualApplianceSitesOperations operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all Network Virtual Appliance Sites in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<NetworkVirtualApplianceSite>> ListByResourceGroupAsync(this INetworkVirtualApplianceSitesOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all Virtual Appliance sites in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<NetworkVirtualApplianceSite> List(this INetworkVirtualApplianceSitesOperations operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all Virtual Appliance sites in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<NetworkVirtualApplianceSite>> ListAsync(this INetworkVirtualApplianceSitesOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified site for Virtual Appliances.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='siteName'>
            /// The name of the site.
            /// </param>
            public static void BeginDelete(this INetworkVirtualApplianceSitesOperations operations, string resourceGroupName, string siteName)
            {
                operations.BeginDeleteAsync(resourceGroupName, siteName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified site for Virtual Appliances.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='siteName'>
            /// The name of the site.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this INetworkVirtualApplianceSitesOperations operations, string resourceGroupName, string siteName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, siteName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates or updates the specified Network Virtual Appliance Site.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='siteName'>
            /// The name of the site.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update Network Virtual Appliance Site
            /// operation.
            /// </param>
            public static NetworkVirtualApplianceSite BeginCreateOrUpdate(this INetworkVirtualApplianceSitesOperations operations, string resourceGroupName, string siteName, NetworkVirtualApplianceSite parameters)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, siteName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates the specified Network Virtual Appliance Site.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='siteName'>
            /// The name of the site.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update Network Virtual Appliance Site
            /// operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NetworkVirtualApplianceSite> BeginCreateOrUpdateAsync(this INetworkVirtualApplianceSitesOperations operations, string resourceGroupName, string siteName, NetworkVirtualApplianceSite parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, siteName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all Network Virtual Appliance Sites in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<NetworkVirtualApplianceSite> ListByResourceGroupNext(this INetworkVirtualApplianceSitesOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all Network Virtual Appliance Sites in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<NetworkVirtualApplianceSite>> ListByResourceGroupNextAsync(this INetworkVirtualApplianceSitesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all Virtual Appliance sites in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<NetworkVirtualApplianceSite> ListNext(this INetworkVirtualApplianceSitesOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all Virtual Appliance sites in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<NetworkVirtualApplianceSite>> ListNextAsync(this INetworkVirtualApplianceSitesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
