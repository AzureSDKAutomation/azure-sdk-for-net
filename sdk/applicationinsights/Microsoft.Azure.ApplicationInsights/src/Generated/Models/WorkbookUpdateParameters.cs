// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ApplicationInsights.Management.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The parameters that can be provided when updating workbook properties
    /// properties.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class WorkbookUpdateParameters
    {
        /// <summary>
        /// Initializes a new instance of the WorkbookUpdateParameters class.
        /// </summary>
        public WorkbookUpdateParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the WorkbookUpdateParameters class.
        /// </summary>
        /// <param name="kind">The kind of workbook. Choices are user and
        /// shared. Possible values include: 'user', 'shared'</param>
        /// <param name="tags">Resource tags</param>
        /// <param name="displayName">The user-defined name (display name) of
        /// the workbook.</param>
        /// <param name="serializedData">Configuration of this particular
        /// workbook. Configuration data is a string containing valid
        /// JSON</param>
        /// <param name="category">Workbook category, as defined by the user at
        /// creation time.</param>
        /// <param name="tags1">A list of 0 or more tags that are associated
        /// with this workbook definition</param>
        public WorkbookUpdateParameters(string kind = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string displayName = default(string), string serializedData = default(string), string category = default(string), IList<string> tags1 = default(IList<string>))
        {
            Kind = kind;
            Tags = tags;
            DisplayName = displayName;
            SerializedData = serializedData;
            Category = category;
            Tags1 = tags1;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the kind of workbook. Choices are user and shared.
        /// Possible values include: 'user', 'shared'
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

        /// <summary>
        /// Gets or sets resource tags
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Gets or sets the user-defined name (display name) of the workbook.
        /// </summary>
        [JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets configuration of this particular workbook.
        /// Configuration data is a string containing valid JSON
        /// </summary>
        [JsonProperty(PropertyName = "properties.serializedData")]
        public string SerializedData { get; set; }

        /// <summary>
        /// Gets or sets workbook category, as defined by the user at creation
        /// time.
        /// </summary>
        [JsonProperty(PropertyName = "properties.category")]
        public string Category { get; set; }

        /// <summary>
        /// Gets or sets a list of 0 or more tags that are associated with this
        /// workbook definition
        /// </summary>
        [JsonProperty(PropertyName = "properties.tags")]
        public IList<string> Tags1 { get; set; }

    }
}
