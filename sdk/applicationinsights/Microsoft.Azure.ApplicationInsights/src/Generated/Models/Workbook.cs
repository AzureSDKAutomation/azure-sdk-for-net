// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ApplicationInsights.Management.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// An Application Insights workbook definition.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Workbook : Resource
    {
        /// <summary>
        /// Initializes a new instance of the Workbook class.
        /// </summary>
        public Workbook()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Workbook class.
        /// </summary>
        /// <param name="location">Resource location</param>
        /// <param name="displayName">The user-defined name (display name) of
        /// the workbook.</param>
        /// <param name="serializedData">Configuration of this particular
        /// workbook. Configuration data is a string containing valid
        /// JSON</param>
        /// <param name="category">Workbook category, as defined by the user at
        /// creation time.</param>
        /// <param name="identity">Identity used for BYOS</param>
        /// <param name="id">Azure resource Id</param>
        /// <param name="name">Azure resource name. This is GUID value. The
        /// display name should be assigned within properties field.</param>
        /// <param name="type">Azure resource type</param>
        /// <param name="kind">The kind of workbook. Choices are user and
        /// shared. Possible values include: 'user', 'shared'</param>
        /// <param name="tags">Resource tags</param>
        /// <param name="timeModified">Date and time in UTC of the last
        /// modification that was made to this workbook definition.</param>
        /// <param name="version">Workbook version</param>
        /// <param name="workbookTags">A list of 0 or more tags that are
        /// associated with this workbook definition</param>
        /// <param name="userId">Unique user id of the specific user that owns
        /// this workbook.</param>
        /// <param name="sourceId">ResourceId for a source resource.</param>
        /// <param name="storageUri">BYOS Storage Account URI</param>
        public Workbook(string location, string displayName, string serializedData, string category, ManagedIdentity identity = default(ManagedIdentity), string id = default(string), string name = default(string), string type = default(string), string kind = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string timeModified = default(string), string version = default(string), IList<string> workbookTags = default(IList<string>), string userId = default(string), string sourceId = default(string), string storageUri = default(string))
            : base(location, identity, id, name, type, kind, tags)
        {
            DisplayName = displayName;
            SerializedData = serializedData;
            TimeModified = timeModified;
            Category = category;
            Version = version;
            WorkbookTags = workbookTags;
            UserId = userId;
            SourceId = sourceId;
            StorageUri = storageUri;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the user-defined name (display name) of the workbook.
        /// </summary>
        [JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets configuration of this particular workbook.
        /// Configuration data is a string containing valid JSON
        /// </summary>
        [JsonProperty(PropertyName = "properties.serializedData")]
        public string SerializedData { get; set; }

        /// <summary>
        /// Gets date and time in UTC of the last modification that was made to
        /// this workbook definition.
        /// </summary>
        [JsonProperty(PropertyName = "properties.timeModified")]
        public string TimeModified { get; private set; }

        /// <summary>
        /// Gets or sets workbook category, as defined by the user at creation
        /// time.
        /// </summary>
        [JsonProperty(PropertyName = "properties.category")]
        public string Category { get; set; }

        /// <summary>
        /// Gets or sets workbook version
        /// </summary>
        [JsonProperty(PropertyName = "properties.version")]
        public string Version { get; set; }

        /// <summary>
        /// Gets or sets a list of 0 or more tags that are associated with this
        /// workbook definition
        /// </summary>
        [JsonProperty(PropertyName = "properties.tags")]
        public IList<string> WorkbookTags { get; set; }

        /// <summary>
        /// Gets unique user id of the specific user that owns this workbook.
        /// </summary>
        [JsonProperty(PropertyName = "properties.userId")]
        public string UserId { get; private set; }

        /// <summary>
        /// Gets or sets resourceId for a source resource.
        /// </summary>
        [JsonProperty(PropertyName = "properties.sourceId")]
        public string SourceId { get; set; }

        /// <summary>
        /// Gets or sets BYOS Storage Account URI
        /// </summary>
        [JsonProperty(PropertyName = "properties.storageUri")]
        public string StorageUri { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (DisplayName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DisplayName");
            }
            if (SerializedData == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SerializedData");
            }
            if (Category == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Category");
            }
        }
    }
}
