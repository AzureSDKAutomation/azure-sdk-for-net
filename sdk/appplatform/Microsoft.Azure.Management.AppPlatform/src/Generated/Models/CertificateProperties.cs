// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AppPlatform.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Certificate resource payload.
    /// </summary>
    public partial class CertificateProperties
    {
        /// <summary>
        /// Initializes a new instance of the CertificateProperties class.
        /// </summary>
        public CertificateProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CertificateProperties class.
        /// </summary>
        /// <param name="keyvaultCertificateName">The certificate name of user
        /// keyvault.</param>
        /// <param name="vaultUri">The vault uri of user key vault.</param>
        /// <param name="keyvaultResourceId">The resource id of user
        /// keyvault.</param>
        public CertificateProperties(string keyvaultCertificateName, string vaultUri, string keyvaultResourceId = default(string))
        {
            KeyvaultResourceId = keyvaultResourceId;
            KeyvaultCertificateName = keyvaultCertificateName;
            VaultUri = vaultUri;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the resource id of user keyvault.
        /// </summary>
        [JsonProperty(PropertyName = "keyvaultResourceId")]
        public string KeyvaultResourceId { get; set; }

        /// <summary>
        /// Gets or sets the certificate name of user keyvault.
        /// </summary>
        [JsonProperty(PropertyName = "keyvaultCertificateName")]
        public string KeyvaultCertificateName { get; set; }

        /// <summary>
        /// Gets or sets the vault uri of user key vault.
        /// </summary>
        [JsonProperty(PropertyName = "vaultUri")]
        public string VaultUri { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (KeyvaultCertificateName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "KeyvaultCertificateName");
            }
            if (VaultUri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "VaultUri");
            }
        }
    }
}
