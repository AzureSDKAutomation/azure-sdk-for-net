// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AppPlatform.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Monitoring Setting properties payload
    /// </summary>
    public partial class MonitoringSettingProperties
    {
        /// <summary>
        /// Initializes a new instance of the MonitoringSettingProperties
        /// class.
        /// </summary>
        public MonitoringSettingProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MonitoringSettingProperties
        /// class.
        /// </summary>
        /// <param name="provisioningState">State of the Monitoring Setting.
        /// Possible values include: 'NotAvailable', 'Failed', 'Succeeded',
        /// 'Updating'</param>
        /// <param name="error">Error when apply Monitoring Setting
        /// changes.</param>
        /// <param name="applicationInsightsInstrumentationKey">Target
        /// application insight instrumentation key</param>
        /// <param name="applicationInsightsSamplingRate">Indicates the
        /// sampling rate of application insight agent, should be in range
        /// [0.0, 100.0]</param>
        /// <param name="applicationInsightsAgentVersions">Indicates the
        /// versions of application insight agent</param>
        public MonitoringSettingProperties(string provisioningState = default(string), Error error = default(Error), string applicationInsightsInstrumentationKey = default(string), double? applicationInsightsSamplingRate = default(double?), ApplicationInsightsAgentVersions applicationInsightsAgentVersions = default(ApplicationInsightsAgentVersions))
        {
            ProvisioningState = provisioningState;
            Error = error;
            ApplicationInsightsInstrumentationKey = applicationInsightsInstrumentationKey;
            ApplicationInsightsSamplingRate = applicationInsightsSamplingRate;
            ApplicationInsightsAgentVersions = applicationInsightsAgentVersions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets state of the Monitoring Setting. Possible values include:
        /// 'NotAvailable', 'Failed', 'Succeeded', 'Updating'
        /// </summary>
        [JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets error when apply Monitoring Setting changes.
        /// </summary>
        [JsonProperty(PropertyName = "error")]
        public Error Error { get; set; }

        /// <summary>
        /// Gets or sets target application insight instrumentation key
        /// </summary>
        [JsonProperty(PropertyName = "applicationInsightsInstrumentationKey")]
        public string ApplicationInsightsInstrumentationKey { get; set; }

        /// <summary>
        /// Gets or sets indicates the sampling rate of application insight
        /// agent, should be in range [0.0, 100.0]
        /// </summary>
        [JsonProperty(PropertyName = "applicationInsightsSamplingRate")]
        public double? ApplicationInsightsSamplingRate { get; set; }

        /// <summary>
        /// Gets or sets indicates the versions of application insight agent
        /// </summary>
        [JsonProperty(PropertyName = "applicationInsightsAgentVersions")]
        public ApplicationInsightsAgentVersions ApplicationInsightsAgentVersions { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ApplicationInsightsSamplingRate > 100)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "ApplicationInsightsSamplingRate", 100);
            }
            if (ApplicationInsightsSamplingRate < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "ApplicationInsightsSamplingRate", 0);
            }
        }
    }
}
