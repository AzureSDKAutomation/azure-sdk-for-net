// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WorkloadMonitor
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for MonitorHistoricalStateChangeOperations.
    /// </summary>
    public static partial class MonitorHistoricalStateChangeOperationsExtensions
    {
            /// <summary>
            /// Get the status of a monitor at a specific timestamp in history.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The subscriptionId of the resource
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resourceGroupName of the resource
            /// </param>
            /// <param name='resourceNamespace'>
            /// The resourceNamespace of the resource
            /// </param>
            /// <param name='resourceType'>
            /// The resourceType of the resource
            /// </param>
            /// <param name='resourceName'>
            /// The resourceType of the resource
            /// </param>
            /// <param name='monitorId'>
            /// The monitorId of the resource (url encoded)
            /// </param>
            /// <param name='timestampUnix'>
            /// The timestamp of the state change (Unix format)
            /// </param>
            /// <param name='expand'>
            /// ex: $expand=evidence,configuration
            /// </param>
            public static MonitorStateChange Get(this IMonitorHistoricalStateChangeOperations operations, string subscriptionId, string resourceGroupName, string resourceNamespace, string resourceType, string resourceName, string monitorId, string timestampUnix, string expand = default(string))
            {
                return operations.GetAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId, timestampUnix, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the status of a monitor at a specific timestamp in history.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The subscriptionId of the resource
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resourceGroupName of the resource
            /// </param>
            /// <param name='resourceNamespace'>
            /// The resourceNamespace of the resource
            /// </param>
            /// <param name='resourceType'>
            /// The resourceType of the resource
            /// </param>
            /// <param name='resourceName'>
            /// The resourceType of the resource
            /// </param>
            /// <param name='monitorId'>
            /// The monitorId of the resource (url encoded)
            /// </param>
            /// <param name='timestampUnix'>
            /// The timestamp of the state change (Unix format)
            /// </param>
            /// <param name='expand'>
            /// ex: $expand=evidence,configuration
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MonitorStateChange> GetAsync(this IMonitorHistoricalStateChangeOperations operations, string subscriptionId, string resourceGroupName, string resourceNamespace, string resourceType, string resourceName, string monitorId, string timestampUnix, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(subscriptionId, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorId, timestampUnix, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
