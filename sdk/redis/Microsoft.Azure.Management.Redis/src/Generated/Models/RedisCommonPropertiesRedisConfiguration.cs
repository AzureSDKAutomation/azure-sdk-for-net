// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Redis.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// All Redis Settings. Few possible keys:
    /// rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
    /// etc.
    /// </summary>
    public partial class RedisCommonPropertiesRedisConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the
        /// RedisCommonPropertiesRedisConfiguration class.
        /// </summary>
        public RedisCommonPropertiesRedisConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// RedisCommonPropertiesRedisConfiguration class.
        /// </summary>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="rdbBackupEnabled">Specifies whether the resource has
        /// RDB export enabled. Premium tier only.</param>
        /// <param name="rdbStorageConnectionString">Specifies the connection
        /// string to the Storage account for Redis data persistence. Premium
        /// tier only.</param>
        /// <param name="rdbBackupFrequency">Specifies the backup frequency for
        /// Redis data persistence. Premium tier only.</param>
        /// <param name="maxmemoryPolicy">Configures the eviction policy for
        /// the cache. All pricing tiers.</param>
        /// <param name="notifyKeyspaceEvents">Configures keyspace
        /// notifications. Standard and premium tiers.</param>
        /// <param name="hashMaxZiplistEntries">Configures memory optimization
        /// for small aggregate data types. Standard and Premium tiers.</param>
        /// <param name="hashMaxZiplistValue">Configures memory optimization
        /// for small aggregate data types. Standard and Premium tiers.</param>
        /// <param name="setMaxIntsetEntries">Configures memory optimization
        /// for small aggregate data types. Standard and Premium tiers.</param>
        /// <param name="zsetMaxZiplistEntries">Configures memory optimization
        /// for small aggregate data types. Standard and Premium tiers.</param>
        /// <param name="zsetMaxZiplistValue">Configures memory optimization
        /// for small aggregate data types. Standard and Premium tiers.</param>
        /// <param name="databases">Configures the number of databases. This
        /// property can be configured only at cache creation. Standard and
        /// Premium tiers.</param>
        public RedisCommonPropertiesRedisConfiguration(IDictionary<string, string> additionalProperties = default(IDictionary<string, string>), bool? rdbBackupEnabled = default(bool?), string rdbStorageConnectionString = default(string), int? rdbBackupFrequency = default(int?), string maxmemoryPolicy = default(string), string notifyKeyspaceEvents = default(string), int? hashMaxZiplistEntries = default(int?), int? hashMaxZiplistValue = default(int?), int? setMaxIntsetEntries = default(int?), int? zsetMaxZiplistEntries = default(int?), int? zsetMaxZiplistValue = default(int?), int? databases = default(int?))
        {
            AdditionalProperties = additionalProperties;
            RdbBackupEnabled = rdbBackupEnabled;
            RdbStorageConnectionString = rdbStorageConnectionString;
            RdbBackupFrequency = rdbBackupFrequency;
            MaxmemoryPolicy = maxmemoryPolicy;
            NotifyKeyspaceEvents = notifyKeyspaceEvents;
            HashMaxZiplistEntries = hashMaxZiplistEntries;
            HashMaxZiplistValue = hashMaxZiplistValue;
            SetMaxIntsetEntries = setMaxIntsetEntries;
            ZsetMaxZiplistEntries = zsetMaxZiplistEntries;
            ZsetMaxZiplistValue = zsetMaxZiplistValue;
            Databases = databases;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unmatched properties from the message are deserialized
        /// this collection
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, string> AdditionalProperties { get; set; }

        /// <summary>
        /// Gets or sets specifies whether the resource has RDB export enabled.
        /// Premium tier only.
        /// </summary>
        [JsonProperty(PropertyName = "rdb-backup-enabled")]
        public bool? RdbBackupEnabled { get; set; }

        /// <summary>
        /// Gets or sets specifies the connection string to the Storage account
        /// for Redis data persistence. Premium tier only.
        /// </summary>
        [JsonProperty(PropertyName = "rdb-storage-connection-string")]
        public string RdbStorageConnectionString { get; set; }

        /// <summary>
        /// Gets or sets specifies the backup frequency for Redis data
        /// persistence. Premium tier only.
        /// </summary>
        [JsonProperty(PropertyName = "rdb-backup-frequency")]
        public int? RdbBackupFrequency { get; set; }

        /// <summary>
        /// Gets or sets configures the eviction policy for the cache. All
        /// pricing tiers.
        /// </summary>
        [JsonProperty(PropertyName = "maxmemory-policy")]
        public string MaxmemoryPolicy { get; set; }

        /// <summary>
        /// Gets or sets configures keyspace notifications. Standard and
        /// premium tiers.
        /// </summary>
        [JsonProperty(PropertyName = "notify-keyspace-events")]
        public string NotifyKeyspaceEvents { get; set; }

        /// <summary>
        /// Gets or sets configures memory optimization for small aggregate
        /// data types. Standard and Premium tiers.
        /// </summary>
        [JsonProperty(PropertyName = "hash-max-ziplist-entries")]
        public int? HashMaxZiplistEntries { get; set; }

        /// <summary>
        /// Gets or sets configures memory optimization for small aggregate
        /// data types. Standard and Premium tiers.
        /// </summary>
        [JsonProperty(PropertyName = "hash-max-ziplist-value")]
        public int? HashMaxZiplistValue { get; set; }

        /// <summary>
        /// Gets or sets configures memory optimization for small aggregate
        /// data types. Standard and Premium tiers.
        /// </summary>
        [JsonProperty(PropertyName = "set-max-intset-entries")]
        public int? SetMaxIntsetEntries { get; set; }

        /// <summary>
        /// Gets or sets configures memory optimization for small aggregate
        /// data types. Standard and Premium tiers.
        /// </summary>
        [JsonProperty(PropertyName = "zset-max-ziplist-entries")]
        public int? ZsetMaxZiplistEntries { get; set; }

        /// <summary>
        /// Gets or sets configures memory optimization for small aggregate
        /// data types. Standard and Premium tiers.
        /// </summary>
        [JsonProperty(PropertyName = "zset-max-ziplist-value")]
        public int? ZsetMaxZiplistValue { get; set; }

        /// <summary>
        /// Gets or sets configures the number of databases. This property can
        /// be configured only at cache creation. Standard and Premium tiers.
        /// </summary>
        [JsonProperty(PropertyName = "databases")]
        public int? Databases { get; set; }

    }
}
