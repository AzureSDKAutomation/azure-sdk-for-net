// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Consumption.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// An event summary resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class EventSummary : Resource
    {
        /// <summary>
        /// Initializes a new instance of the EventSummary class.
        /// </summary>
        public EventSummary()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EventSummary class.
        /// </summary>
        /// <param name="id">The full qualified ARM ID of an event.</param>
        /// <param name="name">The ID that uniquely identifies an event.
        /// </param>
        /// <param name="type">Resource type.</param>
        /// <param name="etag">The etag for the resource.</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="transactionDate">The date of the event.</param>
        /// <param name="description">The description of the event.</param>
        /// <param name="newCredit">The amount of new credit or commitment for
        /// NewCredit or SettleCharges event.</param>
        /// <param name="adjustments">The amount of balance adjustment. The
        /// property is not available for ConsumptionCommitment lots.</param>
        /// <param name="creditExpired">The amount of expired credit or
        /// commitment for NewCredit or SettleCharges event.</param>
        /// <param name="charges">The amount of charges for events of type
        /// SettleCharges and PendingEligibleCharges. </param>
        /// <param name="closedBalance">The balance after the event. </param>
        /// <param name="eventType">Identifies the type of the event. Possible
        /// values include: 'SettledCharges', 'PendingCharges',
        /// 'PendingAdjustments', 'PendingNewCredit', 'PendingExpiredCredit',
        /// 'UnKnown', 'NewCredit'</param>
        /// <param name="invoiceNumber">The number which uniquely identifies
        /// the invoice on which the event was billed. This will be empty for
        /// unbilled events.</param>
        /// <param name="billingProfileId">The ID that uniquely identifies the
        /// billing profile for which the event happened. The property is only
        /// available for billing account of type MicrosoftCustomerAgreement.
        /// </param>
        /// <param name="billingProfileDisplayName">The display name of the
        /// billing profile for which the event happened. The property is only
        /// available for billing account of type
        /// MicrosoftCustomerAgreement.</param>
        /// <param name="lotId">The ID that uniquely identifies the lot for
        /// which the event happened.</param>
        /// <param name="lotSource">Identifies the source of the lot for which
        /// the event happened. </param>
        public EventSummary(string id = default(string), string name = default(string), string type = default(string), string etag = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), System.DateTime? transactionDate = default(System.DateTime?), string description = default(string), Amount newCredit = default(Amount), Amount adjustments = default(Amount), Amount creditExpired = default(Amount), Amount charges = default(Amount), Amount closedBalance = default(Amount), string eventType = default(string), string invoiceNumber = default(string), string billingProfileId = default(string), string billingProfileDisplayName = default(string), string lotId = default(string), string lotSource = default(string))
            : base(id, name, type, etag, tags)
        {
            TransactionDate = transactionDate;
            Description = description;
            NewCredit = newCredit;
            Adjustments = adjustments;
            CreditExpired = creditExpired;
            Charges = charges;
            ClosedBalance = closedBalance;
            EventType = eventType;
            InvoiceNumber = invoiceNumber;
            BillingProfileId = billingProfileId;
            BillingProfileDisplayName = billingProfileDisplayName;
            LotId = lotId;
            LotSource = lotSource;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the date of the event.
        /// </summary>
        [JsonProperty(PropertyName = "properties.transactionDate")]
        public System.DateTime? TransactionDate { get; private set; }

        /// <summary>
        /// Gets the description of the event.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; private set; }

        /// <summary>
        /// Gets the amount of new credit or commitment for NewCredit or
        /// SettleCharges event.
        /// </summary>
        [JsonProperty(PropertyName = "properties.newCredit")]
        public Amount NewCredit { get; private set; }

        /// <summary>
        /// Gets the amount of balance adjustment. The property is not
        /// available for ConsumptionCommitment lots.
        /// </summary>
        [JsonProperty(PropertyName = "properties.adjustments")]
        public Amount Adjustments { get; private set; }

        /// <summary>
        /// Gets the amount of expired credit or commitment for NewCredit or
        /// SettleCharges event.
        /// </summary>
        [JsonProperty(PropertyName = "properties.creditExpired")]
        public Amount CreditExpired { get; private set; }

        /// <summary>
        /// Gets the amount of charges for events of type SettleCharges and
        /// PendingEligibleCharges.
        /// </summary>
        [JsonProperty(PropertyName = "properties.charges")]
        public Amount Charges { get; private set; }

        /// <summary>
        /// Gets the balance after the event.
        /// </summary>
        [JsonProperty(PropertyName = "properties.closedBalance")]
        public Amount ClosedBalance { get; private set; }

        /// <summary>
        /// Gets or sets identifies the type of the event. Possible values
        /// include: 'SettledCharges', 'PendingCharges', 'PendingAdjustments',
        /// 'PendingNewCredit', 'PendingExpiredCredit', 'UnKnown', 'NewCredit'
        /// </summary>
        [JsonProperty(PropertyName = "properties.eventType")]
        public string EventType { get; set; }

        /// <summary>
        /// Gets the number which uniquely identifies the invoice on which the
        /// event was billed. This will be empty for unbilled events.
        /// </summary>
        [JsonProperty(PropertyName = "properties.invoiceNumber")]
        public string InvoiceNumber { get; private set; }

        /// <summary>
        /// Gets the ID that uniquely identifies the billing profile for which
        /// the event happened. The property is only available for billing
        /// account of type MicrosoftCustomerAgreement.
        /// </summary>
        [JsonProperty(PropertyName = "properties.billingProfileId")]
        public string BillingProfileId { get; private set; }

        /// <summary>
        /// Gets the display name of the billing profile for which the event
        /// happened. The property is only available for billing account of
        /// type MicrosoftCustomerAgreement.
        /// </summary>
        [JsonProperty(PropertyName = "properties.billingProfileDisplayName")]
        public string BillingProfileDisplayName { get; private set; }

        /// <summary>
        /// Gets the ID that uniquely identifies the lot for which the event
        /// happened.
        /// </summary>
        [JsonProperty(PropertyName = "properties.lotId")]
        public string LotId { get; private set; }

        /// <summary>
        /// Gets identifies the source of the lot for which the event happened.
        /// </summary>
        [JsonProperty(PropertyName = "properties.lotSource")]
        public string LotSource { get; private set; }

    }
}
