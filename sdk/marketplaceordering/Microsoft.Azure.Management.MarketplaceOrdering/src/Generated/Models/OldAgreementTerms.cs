// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.MarketplaceOrdering.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Terms properties for provided Publisher/Offer/Plan tuple
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class OldAgreementTerms : Resource
    {
        /// <summary>
        /// Initializes a new instance of the OldAgreementTerms class.
        /// </summary>
        public OldAgreementTerms()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OldAgreementTerms class.
        /// </summary>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="oldAgreementTermsId">A unique identifyer of the
        /// agreement.</param>
        /// <param name="publisher">Publisher identifier string of image being
        /// deployed.</param>
        /// <param name="offer">Offer identifier string of image being
        /// deployed.</param>
        /// <param name="signDate">Date and time in UTC of when the terms were
        /// accepted. This is empty if state is cancelled.</param>
        /// <param name="cancelDate">Date and time in UTC of when the terms
        /// were cancelled. This is empty if state is active.</param>
        /// <param name="state">Whether the agreement is active or
        /// cancelled</param>
        public OldAgreementTerms(string id = default(string), string name = default(string), string type = default(string), string oldAgreementTermsId = default(string), string publisher = default(string), string offer = default(string), System.DateTime? signDate = default(System.DateTime?), System.DateTime? cancelDate = default(System.DateTime?), bool? state = default(bool?))
            : base(id, name, type)
        {
            OldAgreementTermsId = oldAgreementTermsId;
            Publisher = publisher;
            Offer = offer;
            SignDate = signDate;
            CancelDate = cancelDate;
            State = state;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a unique identifyer of the agreement.
        /// </summary>
        [JsonProperty(PropertyName = "properties.id")]
        public string OldAgreementTermsId { get; set; }

        /// <summary>
        /// Gets or sets publisher identifier string of image being deployed.
        /// </summary>
        [JsonProperty(PropertyName = "properties.publisher")]
        public string Publisher { get; set; }

        /// <summary>
        /// Gets or sets offer identifier string of image being deployed.
        /// </summary>
        [JsonProperty(PropertyName = "properties.offer")]
        public string Offer { get; set; }

        /// <summary>
        /// Gets or sets date and time in UTC of when the terms were accepted.
        /// This is empty if state is cancelled.
        /// </summary>
        [JsonProperty(PropertyName = "properties.signDate")]
        public System.DateTime? SignDate { get; set; }

        /// <summary>
        /// Gets or sets date and time in UTC of when the terms were cancelled.
        /// This is empty if state is active.
        /// </summary>
        [JsonProperty(PropertyName = "properties.cancelDate")]
        public System.DateTime? CancelDate { get; set; }

        /// <summary>
        /// Gets or sets whether the agreement is active or cancelled
        /// </summary>
        [JsonProperty(PropertyName = "properties.state")]
        public bool? State { get; set; }

    }
}
