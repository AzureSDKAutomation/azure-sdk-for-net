// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.MarketplaceOrdering
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for AgreementOperations.
    /// </summary>
    public static partial class AgreementOperationsExtensions
    {
            /// <summary>
            /// Sign marketplace terms.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='publisherId'>
            /// </param>
            /// <param name='offerId'>
            /// </param>
            /// <param name='planId'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            public static object Sign(this IAgreementOperations operations, System.Guid subscriptionId, string publisherId, string offerId, string planId, string apiVersion)
            {
                return operations.SignAsync(subscriptionId, publisherId, offerId, planId, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sign marketplace terms.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='publisherId'>
            /// </param>
            /// <param name='offerId'>
            /// </param>
            /// <param name='planId'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SignAsync(this IAgreementOperations operations, System.Guid subscriptionId, string publisherId, string offerId, string planId, string apiVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SignWithHttpMessagesAsync(subscriptionId, publisherId, offerId, planId, apiVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancel marketplace terms.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='publisherId'>
            /// </param>
            /// <param name='offerId'>
            /// </param>
            /// <param name='planId'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            public static object Cancel(this IAgreementOperations operations, System.Guid subscriptionId, string publisherId, string offerId, string planId, string apiVersion)
            {
                return operations.CancelAsync(subscriptionId, publisherId, offerId, planId, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancel marketplace terms.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='publisherId'>
            /// </param>
            /// <param name='offerId'>
            /// </param>
            /// <param name='planId'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CancelAsync(this IAgreementOperations operations, System.Guid subscriptionId, string publisherId, string offerId, string planId, string apiVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CancelWithHttpMessagesAsync(subscriptionId, publisherId, offerId, planId, apiVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get marketplace agreement.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='publisherId'>
            /// </param>
            /// <param name='offerId'>
            /// </param>
            /// <param name='planId'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            public static object GetAgreement(this IAgreementOperations operations, System.Guid subscriptionId, string publisherId, string offerId, string planId, string apiVersion)
            {
                return operations.GetAgreementAsync(subscriptionId, publisherId, offerId, planId, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get marketplace agreement.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='publisherId'>
            /// </param>
            /// <param name='offerId'>
            /// </param>
            /// <param name='planId'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAgreementAsync(this IAgreementOperations operations, System.Guid subscriptionId, string publisherId, string offerId, string planId, string apiVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAgreementWithHttpMessagesAsync(subscriptionId, publisherId, offerId, planId, apiVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get marketplace agreement.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='publisherId'>
            /// </param>
            /// <param name='offerId'>
            /// </param>
            /// <param name='planId'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='market'>
            /// </param>
            public static object GetAgreementTenant(this IAgreementOperations operations, string publisherId, string offerId, string planId, string apiVersion, string market = default(string))
            {
                return operations.GetAgreementTenantAsync(publisherId, offerId, planId, apiVersion, market).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get marketplace agreement.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='publisherId'>
            /// </param>
            /// <param name='offerId'>
            /// </param>
            /// <param name='planId'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='market'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAgreementTenantAsync(this IAgreementOperations operations, string publisherId, string offerId, string planId, string apiVersion, string market = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAgreementTenantWithHttpMessagesAsync(publisherId, offerId, planId, apiVersion, market, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='publisherId'>
            /// </param>
            /// <param name='offerId'>
            /// </param>
            /// <param name='planId'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='market'>
            /// </param>
            public static object SignAgreementTenant(this IAgreementOperations operations, string publisherId, string offerId, string planId, string apiVersion, string market = default(string))
            {
                return operations.SignAgreementTenantAsync(publisherId, offerId, planId, apiVersion, market).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='publisherId'>
            /// </param>
            /// <param name='offerId'>
            /// </param>
            /// <param name='planId'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='market'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SignAgreementTenantAsync(this IAgreementOperations operations, string publisherId, string offerId, string planId, string apiVersion, string market = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SignAgreementTenantWithHttpMessagesAsync(publisherId, offerId, planId, apiVersion, market, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='publisherId'>
            /// </param>
            /// <param name='offerId'>
            /// </param>
            /// <param name='planId'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='market'>
            /// </param>
            public static object CancelAgreementTenant(this IAgreementOperations operations, string publisherId, string offerId, string planId, string apiVersion, string market = default(string))
            {
                return operations.CancelAgreementTenantAsync(publisherId, offerId, planId, apiVersion, market).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='publisherId'>
            /// </param>
            /// <param name='offerId'>
            /// </param>
            /// <param name='planId'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='market'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CancelAgreementTenantAsync(this IAgreementOperations operations, string publisherId, string offerId, string planId, string apiVersion, string market = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CancelAgreementTenantWithHttpMessagesAsync(publisherId, offerId, planId, apiVersion, market, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List marketplace agreements in the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            public static object GetAgreements(this IAgreementOperations operations, System.Guid subscriptionId, string apiVersion)
            {
                return operations.GetAgreementsAsync(subscriptionId, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List marketplace agreements in the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAgreementsAsync(this IAgreementOperations operations, System.Guid subscriptionId, string apiVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAgreementsWithHttpMessagesAsync(subscriptionId, apiVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
