// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.Maps.Service.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Stop-shape-segments of the trip pattern, which are an ordered list of
    /// the stops and the shapes connecting them.
    /// </summary>
    public partial class ItineraryPattern
    {
        /// <summary>
        /// Initializes a new instance of the ItineraryPattern class.
        /// </summary>
        public ItineraryPattern()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ItineraryPattern class.
        /// </summary>
        /// <param name="patternId">Pattern Id, for example, '3267995'.</param>
        /// <param name="lineId">Line Id.</param>
        /// <param name="stopIds">Stops the line goes through.</param>
        /// <param name="geometry">Stop sequence and shape per a line in
        /// GeoJSON format.</param>
        public ItineraryPattern(string patternId = default(string), string lineId = default(string), IList<string> stopIds = default(IList<string>), GeoJsonLineString geometry = default(GeoJsonLineString))
        {
            PatternId = patternId;
            LineId = lineId;
            StopIds = stopIds;
            Geometry = geometry;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets pattern Id, for example, '3267995'.
        /// </summary>
        [JsonProperty(PropertyName = "patternId")]
        public string PatternId { get; set; }

        /// <summary>
        /// Gets or sets line Id.
        /// </summary>
        [JsonProperty(PropertyName = "lineId")]
        public string LineId { get; set; }

        /// <summary>
        /// Gets or sets stops the line goes through.
        /// </summary>
        [JsonProperty(PropertyName = "stopIds")]
        public IList<string> StopIds { get; set; }

        /// <summary>
        /// Gets or sets stop sequence and shape per a line in GeoJSON format.
        /// </summary>
        [JsonProperty(PropertyName = "geometry")]
        public GeoJsonLineString Geometry { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Geometry != null)
            {
                Geometry.Validate();
            }
        }
    }
}
