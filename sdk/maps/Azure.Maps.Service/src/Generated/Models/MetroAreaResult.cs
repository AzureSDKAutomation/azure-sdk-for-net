// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.Maps.Service.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Details of the metro area.
    /// </summary>
    public partial class MetroAreaResult
    {
        /// <summary>
        /// Initializes a new instance of the MetroAreaResult class.
        /// </summary>
        public MetroAreaResult()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MetroAreaResult class.
        /// </summary>
        /// <param name="metroId">The metro area's Id for use with other API
        /// calls.</param>
        /// <param name="metroName">The main display name of the metro.</param>
        public MetroAreaResult(int? metroId = default(int?), string metroName = default(string), GeoJsonPolygon geometry = default(GeoJsonPolygon), ResultViewport viewport = default(ResultViewport))
        {
            MetroId = metroId;
            MetroName = metroName;
            Geometry = geometry;
            Viewport = viewport;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the metro area's Id for use with other API calls.
        /// </summary>
        [JsonProperty(PropertyName = "metroId")]
        public int? MetroId { get; set; }

        /// <summary>
        /// Gets or sets the main display name of the metro.
        /// </summary>
        [JsonProperty(PropertyName = "metroName")]
        public string MetroName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "geometry")]
        public GeoJsonPolygon Geometry { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "viewport")]
        public ResultViewport Viewport { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Geometry != null)
            {
                Geometry.Validate();
            }
        }
    }
}
