// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.Maps.Service.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Detailed fare information for the leg.
    /// </summary>
    public partial class FareDetail
    {
        /// <summary>
        /// Initializes a new instance of the FareDetail class.
        /// </summary>
        public FareDetail()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FareDetail class.
        /// </summary>
        /// <param name="price">The price of the ticket when purchased for the
        /// individual leg, not for the entire route at once.</param>
        /// <param name="usage">Supported values are:
        ///
        /// * pay – user is expected to pay for this ticket in order to consume
        /// the current leg
        /// * transfer – user can use a ticket purchased in a previous leg in
        /// order to consume the current leg. In general, when transfer is
        /// specified, the number of transfers is counted, and has a limit.
        /// * continue – user can use a ticket purchased in a previous leg in
        /// order to consume the current leg. In general, when continue is
        /// specified, the number of transfers isn’t incremented for this leg.
        /// * upgrade – user is expected to upgrade a ticket purchased in a
        /// previous leg in order to consume the current leg.</param>
        public FareDetail(FarePrice price = default(FarePrice), string usage = default(string))
        {
            Price = price;
            Usage = usage;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the price of the ticket when purchased for the
        /// individual leg, not for the entire route at once.
        /// </summary>
        [JsonProperty(PropertyName = "price")]
        public FarePrice Price { get; set; }

        /// <summary>
        /// Gets or sets supported values are:
        ///
        /// * pay – user is expected to pay for this ticket in order to consume
        /// the current leg
        /// * transfer – user can use a ticket purchased in a previous leg in
        /// order to consume the current leg. In general, when transfer is
        /// specified, the number of transfers is counted, and has a limit.
        /// * continue – user can use a ticket purchased in a previous leg in
        /// order to consume the current leg. In general, when continue is
        /// specified, the number of transfers isn’t incremented for this leg.
        /// * upgrade – user is expected to upgrade a ticket purchased in a
        /// previous leg in order to consume the current leg.
        /// </summary>
        [JsonProperty(PropertyName = "usage")]
        public string Usage { get; set; }

    }
}
