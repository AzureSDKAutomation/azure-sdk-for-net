// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.Maps.Service.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class ItineraryResult
    {
        /// <summary>
        /// Initializes a new instance of the ItineraryResult class.
        /// </summary>
        public ItineraryResult()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ItineraryResult class.
        /// </summary>
        /// <param name="itineraryId">A unique identifier of the returned
        /// itinerary.</param>
        /// <param name="departureTime">The date and time of departure from the
        /// origin point in ISO 8601 format, e.g.
        /// 1996-12-19T16:39:57-08:00.</param>
        /// <param name="arrivalTime">The date and time of arrival at the
        /// destination point in ISO 8601 format, e.g.
        /// 1996-12-19T19:39:57-08:00.</param>
        /// <param name="travelTimeInSeconds">Estimated travel time in
        /// seconds.</param>
        /// <param name="numberOfLegs">Number of legs.</param>
        /// <param name="legs">An array summarizing the legs of this
        /// itinerary.</param>
        /// <param name="itineraryFare">Itinerary level transit fare
        /// information. Returned only if fare information is available for the
        /// entire itinerary. [Get Metro Area Info
        /// API](https://aka.ms/AzureMapsMobilityMetroAreaInfo) can be
        /// requested to confirm if fare information is available in the metro
        /// area.</param>
        public ItineraryResult(string itineraryId = default(string), System.DateTime? departureTime = default(System.DateTime?), System.DateTime? arrivalTime = default(System.DateTime?), int? travelTimeInSeconds = default(int?), int? numberOfLegs = default(int?), IList<RouteItineraryLeg> legs = default(IList<RouteItineraryLeg>), ItineraryFare itineraryFare = default(ItineraryFare))
        {
            ItineraryId = itineraryId;
            DepartureTime = departureTime;
            ArrivalTime = arrivalTime;
            TravelTimeInSeconds = travelTimeInSeconds;
            NumberOfLegs = numberOfLegs;
            Legs = legs;
            ItineraryFare = itineraryFare;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a unique identifier of the returned itinerary.
        /// </summary>
        [JsonProperty(PropertyName = "itineraryId")]
        public string ItineraryId { get; set; }

        /// <summary>
        /// Gets or sets the date and time of departure from the origin point
        /// in ISO 8601 format, e.g. 1996-12-19T16:39:57-08:00.
        /// </summary>
        [JsonProperty(PropertyName = "departureTime")]
        public System.DateTime? DepartureTime { get; set; }

        /// <summary>
        /// Gets or sets the date and time of arrival at the destination point
        /// in ISO 8601 format, e.g. 1996-12-19T19:39:57-08:00.
        /// </summary>
        [JsonProperty(PropertyName = "arrivalTime")]
        public System.DateTime? ArrivalTime { get; set; }

        /// <summary>
        /// Gets or sets estimated travel time in seconds.
        /// </summary>
        [JsonProperty(PropertyName = "travelTimeInSeconds")]
        public int? TravelTimeInSeconds { get; set; }

        /// <summary>
        /// Gets or sets number of legs.
        /// </summary>
        [JsonProperty(PropertyName = "numberOfLegs")]
        public int? NumberOfLegs { get; set; }

        /// <summary>
        /// Gets or sets an array summarizing the legs of this itinerary.
        /// </summary>
        [JsonProperty(PropertyName = "legs")]
        public IList<RouteItineraryLeg> Legs { get; set; }

        /// <summary>
        /// Gets or sets itinerary level transit fare information. Returned
        /// only if fare information is available for the entire itinerary.
        /// [Get Metro Area Info
        /// API](https://aka.ms/AzureMapsMobilityMetroAreaInfo) can be
        /// requested to confirm if fare information is available in the metro
        /// area.
        /// </summary>
        [JsonProperty(PropertyName = "itineraryFare")]
        public ItineraryFare ItineraryFare { get; set; }

    }
}
