// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.Maps.Service
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;

    public partial class MapsClient : ServiceClient<MapsClient>, IMapsClient
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        internal string BaseUri {get; set;}

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// This parameter specifies where the Azure Maps Creator resource is located.
        /// Valid values are us and eu. Possible values include: 'us', 'eu'
        /// </summary>
        public string Geography { get; set; }

        /// <summary>
        /// Specifies which account is intended for usage in conjunction with the Azure
        /// AD security model.  It represents a unique ID for the Azure Maps account
        /// and can be retrieved from the Azure Maps management  plane Account API. To
        /// use Azure AD security in Azure Maps see the following
        /// [articles](https://aka.ms/amauthdetails) for guidance.
        /// </summary>
        public string XMsClientId { get; set; }

        /// <summary>
        /// Subscription credentials which uniquely identify client subscription.
        /// </summary>
        public ServiceClientCredentials Credentials { get; private set; }

        /// <summary>
        /// Gets the IAlias.
        /// </summary>
        public virtual IAlias Alias { get; private set; }

        /// <summary>
        /// Gets the IData.
        /// </summary>
        public virtual IData Data { get; private set; }

        /// <summary>
        /// Gets the IDataset.
        /// </summary>
        public virtual IDataset Dataset { get; private set; }

        /// <summary>
        /// Gets the IElevation.
        /// </summary>
        public virtual IElevation Elevation { get; private set; }

        /// <summary>
        /// Gets the IConversion.
        /// </summary>
        public virtual IConversion Conversion { get; private set; }

        /// <summary>
        /// Gets the IFeatureState.
        /// </summary>
        public virtual IFeatureState FeatureState { get; private set; }

        /// <summary>
        /// Gets the IGeolocation.
        /// </summary>
        public virtual IGeolocation Geolocation { get; private set; }

        /// <summary>
        /// Gets the IMobility.
        /// </summary>
        public virtual IMobility Mobility { get; private set; }

        /// <summary>
        /// Gets the IRender.
        /// </summary>
        public virtual IRender Render { get; private set; }

        /// <summary>
        /// Gets the IRenderV2.
        /// </summary>
        public virtual IRenderV2 RenderV2 { get; private set; }

        /// <summary>
        /// Gets the IRoute.
        /// </summary>
        public virtual IRoute Route { get; private set; }

        /// <summary>
        /// Gets the ISearch.
        /// </summary>
        public virtual ISearch Search { get; private set; }

        /// <summary>
        /// Gets the ISpatial.
        /// </summary>
        public virtual ISpatial Spatial { get; private set; }

        /// <summary>
        /// Gets the ITileset.
        /// </summary>
        public virtual ITileset Tileset { get; private set; }

        /// <summary>
        /// Gets the ITimezone.
        /// </summary>
        public virtual ITimezone Timezone { get; private set; }

        /// <summary>
        /// Gets the ITraffic.
        /// </summary>
        public virtual ITraffic Traffic { get; private set; }

        /// <summary>
        /// Gets the IWeather.
        /// </summary>
        public virtual IWeather Weather { get; private set; }

        /// <summary>
        /// Gets the IWFS.
        /// </summary>
        public virtual IWFS WFS { get; private set; }

        /// <summary>
        /// Initializes a new instance of the MapsClient class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling MapsClient.Dispose(). False: will not dispose provided httpClient</param>
        protected MapsClient(HttpClient httpClient, bool disposeHttpClient) : base(httpClient, disposeHttpClient)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the MapsClient class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected MapsClient(params DelegatingHandler[] handlers) : base(handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the MapsClient class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected MapsClient(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the MapsClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public MapsClient(ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the MapsClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling MapsClient.Dispose(). False: will not dispose provided httpClient</param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public MapsClient(ServiceClientCredentials credentials, HttpClient httpClient, bool disposeHttpClient) : this(httpClient, disposeHttpClient)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the MapsClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public MapsClient(ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        ///</summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            Alias = new Alias(this);
            Data = new Data(this);
            Dataset = new Dataset(this);
            Elevation = new Elevation(this);
            Conversion = new Conversion(this);
            FeatureState = new FeatureState(this);
            Geolocation = new Geolocation(this);
            Mobility = new Mobility(this);
            Render = new Render(this);
            RenderV2 = new RenderV2(this);
            Route = new Route(this);
            Search = new Search(this);
            Spatial = new Spatial(this);
            Tileset = new Tileset(this);
            Timezone = new Timezone(this);
            Traffic = new Traffic(this);
            Weather = new Weather(this);
            WFS = new WFS(this);
            BaseUri = "https://{geography}.atlas.microsoft.com";
            Geography = "us";
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new  List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<StyleObject>("type"));
            DeserializationSettings.Converters.Add(new  PolymorphicDeserializeJsonConverter<StyleObject>("type"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<GeoJsonObject>("type"));
            DeserializationSettings.Converters.Add(new  PolymorphicDeserializeJsonConverter<GeoJsonObject>("type"));
            CustomInitialize();
        }
    }
}
