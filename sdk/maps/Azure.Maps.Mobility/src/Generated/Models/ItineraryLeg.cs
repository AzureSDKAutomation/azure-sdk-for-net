// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.Maps.Mobility.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class ItineraryLeg
    {
        /// <summary>
        /// Initializes a new instance of the ItineraryLeg class.
        /// </summary>
        public ItineraryLeg()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ItineraryLeg class.
        /// </summary>
        /// <param name="legType">The travel mode of the leg. Possible values
        /// include: 'Walk', 'Bicycle', 'Tram', 'Subway', 'Rail', 'Bus',
        /// 'Ferry', 'Cable', 'Gondola', 'Funicular', 'PathWayWalk', 'Wait',
        /// 'WaitOnVehicle'</param>
        /// <param name="legStartTime">Start time for the leg.</param>
        /// <param name="legEndTime">End time for the leg.</param>
        /// <param name="steps">In case of walk or bike leg, the
        /// directions.</param>
        /// <param name="origin">The walk/bike leg’s origin.</param>
        /// <param name="destination">The walk/bike leg’s destination.</param>
        /// <param name="lineGroup">In case of a public transit leg, the line
        /// group serving this leg.</param>
        /// <param name="line">In case of a public transit leg, the line
        /// serving this leg.</param>
        /// <param name="stops">List of stops comprising the line’s route
        /// within the leg (e.g. the stops the leg passes through).</param>
        /// <param name="departures">Relevant for Public Transit and Wait legs
        /// only</param>
        /// <param name="legFare">Leg level public transit fare information.
        /// Returned only if fare information is available for the entire
        /// itinerary.</param>
        /// <param name="waitOnVehicle">Indicates whether it’s necessary to
        /// wait for the next leg on the same vehicle (i.e. the bus will only
        /// change its line number).</param>
        public ItineraryLeg(string legType = default(string), string legStartTime = default(string), string legEndTime = default(string), IList<ItineraryStep> steps = default(IList<ItineraryStep>), LegPoint origin = default(LegPoint), LegPoint destination = default(LegPoint), GeoJsonLineString geometry = default(GeoJsonLineString), ItineraryLineGroup lineGroup = default(ItineraryLineGroup), ItineraryLine line = default(ItineraryLine), IList<LegStop> stops = default(IList<LegStop>), IList<LineArrival> departures = default(IList<LineArrival>), LegFare legFare = default(LegFare), string waitOnVehicle = default(string))
        {
            LegType = legType;
            LegStartTime = legStartTime;
            LegEndTime = legEndTime;
            Steps = steps;
            Origin = origin;
            Destination = destination;
            Geometry = geometry;
            LineGroup = lineGroup;
            Line = line;
            Stops = stops;
            Departures = departures;
            LegFare = legFare;
            WaitOnVehicle = waitOnVehicle;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the travel mode of the leg. Possible values include:
        /// 'Walk', 'Bicycle', 'Tram', 'Subway', 'Rail', 'Bus', 'Ferry',
        /// 'Cable', 'Gondola', 'Funicular', 'PathWayWalk', 'Wait',
        /// 'WaitOnVehicle'
        /// </summary>
        [JsonProperty(PropertyName = "legType")]
        public string LegType { get; set; }

        /// <summary>
        /// Gets or sets start time for the leg.
        /// </summary>
        [JsonProperty(PropertyName = "legStartTime")]
        public string LegStartTime { get; set; }

        /// <summary>
        /// Gets or sets end time for the leg.
        /// </summary>
        [JsonProperty(PropertyName = "legEndTime")]
        public string LegEndTime { get; set; }

        /// <summary>
        /// Gets or sets in case of walk or bike leg, the directions.
        /// </summary>
        [JsonProperty(PropertyName = "steps")]
        public IList<ItineraryStep> Steps { get; set; }

        /// <summary>
        /// Gets or sets the walk/bike leg’s origin.
        /// </summary>
        [JsonProperty(PropertyName = "origin")]
        public LegPoint Origin { get; set; }

        /// <summary>
        /// Gets or sets the walk/bike leg’s destination.
        /// </summary>
        [JsonProperty(PropertyName = "destination")]
        public LegPoint Destination { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "geometry")]
        public GeoJsonLineString Geometry { get; set; }

        /// <summary>
        /// Gets or sets in case of a public transit leg, the line group
        /// serving this leg.
        /// </summary>
        [JsonProperty(PropertyName = "lineGroup")]
        public ItineraryLineGroup LineGroup { get; set; }

        /// <summary>
        /// Gets or sets in case of a public transit leg, the line serving this
        /// leg.
        /// </summary>
        [JsonProperty(PropertyName = "line")]
        public ItineraryLine Line { get; set; }

        /// <summary>
        /// Gets or sets list of stops comprising the line’s route within the
        /// leg (e.g. the stops the leg passes through).
        /// </summary>
        [JsonProperty(PropertyName = "stops")]
        public IList<LegStop> Stops { get; set; }

        /// <summary>
        /// Gets or sets relevant for Public Transit and Wait legs only
        /// </summary>
        [JsonProperty(PropertyName = "departures")]
        public IList<LineArrival> Departures { get; set; }

        /// <summary>
        /// Gets or sets leg level public transit fare information. Returned
        /// only if fare information is available for the entire itinerary.
        /// </summary>
        [JsonProperty(PropertyName = "legFare")]
        public LegFare LegFare { get; set; }

        /// <summary>
        /// Gets or sets indicates whether it’s necessary to wait for the next
        /// leg on the same vehicle (i.e. the bus will only change its line
        /// number).
        /// </summary>
        [JsonProperty(PropertyName = "waitOnVehicle")]
        public string WaitOnVehicle { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Geometry != null)
            {
                Geometry.Validate();
            }
        }
    }
}
