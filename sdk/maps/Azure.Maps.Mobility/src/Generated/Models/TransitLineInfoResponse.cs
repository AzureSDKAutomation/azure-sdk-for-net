// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.Maps.Mobility.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// This object is returned from a successful Transit Line Info call.
    /// </summary>
    public partial class TransitLineInfoResponse
    {
        /// <summary>
        /// Initializes a new instance of the TransitLineInfoResponse class.
        /// </summary>
        public TransitLineInfoResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TransitLineInfoResponse class.
        /// </summary>
        /// <param name="lineGroup">Groups together all lines that are
        /// logically part of the same group. Typically contains 2 lines having
        /// the same agency and line, one going from A to B, and the other from
        /// B to A.</param>
        /// <param name="lines">The line group’s basic info and list of the
        /// lines.</param>
        /// <param name="stops">List of stops the line group goes
        /// through.</param>
        /// <param name="patterns">List of patterns this group is comprised of.
        /// A pattern consists of a stop sequence and shape per a line in
        /// GeoJSON format.</param>
        /// <param name="schedule">Line schedule for the current 24h. May be
        /// null in case no schedule exists for the current time.</param>
        public TransitLineInfoResponse(ItineraryLineGroup lineGroup = default(ItineraryLineGroup), IList<ItineraryLine> lines = default(IList<ItineraryLine>), IList<LegStop> stops = default(IList<LegStop>), IList<ItineraryPattern> patterns = default(IList<ItineraryPattern>), LineArrival schedule = default(LineArrival))
        {
            LineGroup = lineGroup;
            Lines = lines;
            Stops = stops;
            Patterns = patterns;
            Schedule = schedule;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets groups together all lines that are logically part of
        /// the same group. Typically contains 2 lines having the same agency
        /// and line, one going from A to B, and the other from B to A.
        /// </summary>
        [JsonProperty(PropertyName = "lineGroup")]
        public ItineraryLineGroup LineGroup { get; set; }

        /// <summary>
        /// Gets or sets the line group’s basic info and list of the lines.
        /// </summary>
        [JsonProperty(PropertyName = "lines")]
        public IList<ItineraryLine> Lines { get; set; }

        /// <summary>
        /// Gets or sets list of stops the line group goes through.
        /// </summary>
        [JsonProperty(PropertyName = "stops")]
        public IList<LegStop> Stops { get; set; }

        /// <summary>
        /// Gets or sets list of patterns this group is comprised of. A pattern
        /// consists of a stop sequence and shape per a line in GeoJSON format.
        /// </summary>
        [JsonProperty(PropertyName = "patterns")]
        public IList<ItineraryPattern> Patterns { get; set; }

        /// <summary>
        /// Gets or sets line schedule for the current 24h. May be null in case
        /// no schedule exists for the current time.
        /// </summary>
        [JsonProperty(PropertyName = "schedule")]
        public LineArrival Schedule { get; set; }

    }
}
