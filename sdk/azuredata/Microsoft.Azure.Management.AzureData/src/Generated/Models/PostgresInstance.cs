// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AzureData.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A Postgres Instance.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class PostgresInstance : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the PostgresInstance class.
        /// </summary>
        public PostgresInstance()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PostgresInstance class.
        /// </summary>
        /// <param name="location">The geo-location where the resource
        /// lives</param>
        /// <param name="id">Fully qualified resource Id for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. Ex-
        /// Microsoft.Compute/virtualMachines or
        /// Microsoft.Storage/storageAccounts.</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="dataControllerId">The data controller id</param>
        /// <param name="admin">The instance admin</param>
        /// <param name="k8sRaw">The raw kubernetes information</param>
        public PostgresInstance(string location, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), SystemData systemData = default(SystemData), string dataControllerId = default(string), string admin = default(string), object k8sRaw = default(object))
            : base(location, id, name, type, tags, systemData)
        {
            DataControllerId = dataControllerId;
            Admin = admin;
            K8sRaw = k8sRaw;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the data controller id
        /// </summary>
        [JsonProperty(PropertyName = "properties.dataControllerId")]
        public string DataControllerId { get; set; }

        /// <summary>
        /// Gets or sets the instance admin
        /// </summary>
        [JsonProperty(PropertyName = "properties.admin")]
        public string Admin { get; set; }

        /// <summary>
        /// Gets or sets the raw kubernetes information
        /// </summary>
        [JsonProperty(PropertyName = "properties.k8sRaw")]
        public object K8sRaw { get; set; }

    }
}
