// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.StreamAnalytics.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The result of the sample input request.
    /// </summary>
    public partial class SampleInputResult : Error
    {
        /// <summary>
        /// Initializes a new instance of the SampleInputResult class.
        /// </summary>
        public SampleInputResult()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SampleInputResult class.
        /// </summary>
        /// <param name="errorProperty">Error definition properties.</param>
        /// <param name="status">The status of the sample input request.
        /// Possible values include: 'ReadAllEventsInRange',
        /// 'NoEventsFoundInRange', 'ErrorConnectingToInput'</param>
        /// <param name="diagnostics">Diagnostics messages. E.g. message
        /// indicating some partitions from the input have no data.</param>
        /// <param name="eventsDownloadUrl">A SAS URL to download the sampled
        /// input data.</param>
        /// <param name="lastArrivalTime">The timestamp for the last event in
        /// the data. It is in DateTime format.</param>
        public SampleInputResult(ErrorError errorProperty = default(ErrorError), string status = default(string), IList<string> diagnostics = default(IList<string>), string eventsDownloadUrl = default(string), string lastArrivalTime = default(string))
            : base(errorProperty)
        {
            Status = status;
            Diagnostics = diagnostics;
            EventsDownloadUrl = eventsDownloadUrl;
            LastArrivalTime = lastArrivalTime;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the status of the sample input request. Possible
        /// values include: 'ReadAllEventsInRange', 'NoEventsFoundInRange',
        /// 'ErrorConnectingToInput'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets diagnostics messages. E.g. message indicating some partitions
        /// from the input have no data.
        /// </summary>
        [JsonProperty(PropertyName = "diagnostics")]
        public IList<string> Diagnostics { get; private set; }

        /// <summary>
        /// Gets a SAS URL to download the sampled input data.
        /// </summary>
        [JsonProperty(PropertyName = "eventsDownloadUrl")]
        public string EventsDownloadUrl { get; private set; }

        /// <summary>
        /// Gets the timestamp for the last event in the data. It is in
        /// DateTime format.
        /// </summary>
        [JsonProperty(PropertyName = "lastArrivalTime")]
        public string LastArrivalTime { get; private set; }

    }
}
