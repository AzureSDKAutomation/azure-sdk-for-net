// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.StreamAnalytics.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Diagnostics information related to query testing.
    /// </summary>
    public partial class TestQueryDiagnostics
    {
        /// <summary>
        /// Initializes a new instance of the TestQueryDiagnostics class.
        /// </summary>
        public TestQueryDiagnostics()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TestQueryDiagnostics class.
        /// </summary>
        /// <param name="writeUri">The SAS URI to the container or
        /// directory.</param>
        /// <param name="path">The path to the subdirectory.</param>
        public TestQueryDiagnostics(string writeUri, string path = default(string))
        {
            WriteUri = writeUri;
            Path = path;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the SAS URI to the container or directory.
        /// </summary>
        [JsonProperty(PropertyName = "writeUri")]
        public string WriteUri { get; set; }

        /// <summary>
        /// Gets or sets the path to the subdirectory.
        /// </summary>
        [JsonProperty(PropertyName = "path")]
        public string Path { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (WriteUri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "WriteUri");
            }
        }
    }
}
