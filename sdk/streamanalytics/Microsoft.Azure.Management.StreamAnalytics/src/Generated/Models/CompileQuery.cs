// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.StreamAnalytics.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The query compilation object which defines the input, output, and
    /// transformation for the query compilation.
    /// </summary>
    public partial class CompileQuery
    {
        /// <summary>
        /// Initializes a new instance of the CompileQuery class.
        /// </summary>
        public CompileQuery()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CompileQuery class.
        /// </summary>
        /// <param name="query">The query to compile.</param>
        /// <param name="jobType">Describes the type of the job. Valid values
        /// are `Cloud` and 'Edge'. Possible values include: 'Cloud',
        /// 'Edge'</param>
        /// <param name="inputs">The inputs for the query compilation.</param>
        /// <param name="functions">The functions for the query
        /// compilation.</param>
        /// <param name="compatibilityLevel">The query to compile. Possible
        /// values include: '1.0'</param>
        public CompileQuery(string query, string jobType, IList<QueryInput> inputs = default(IList<QueryInput>), IList<QueryFunction> functions = default(IList<QueryFunction>), string compatibilityLevel = default(string))
        {
            Query = query;
            Inputs = inputs;
            Functions = functions;
            JobType = jobType;
            CompatibilityLevel = compatibilityLevel;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the query to compile.
        /// </summary>
        [JsonProperty(PropertyName = "query")]
        public string Query { get; set; }

        /// <summary>
        /// Gets or sets the inputs for the query compilation.
        /// </summary>
        [JsonProperty(PropertyName = "inputs")]
        public IList<QueryInput> Inputs { get; set; }

        /// <summary>
        /// Gets or sets the functions for the query compilation.
        /// </summary>
        [JsonProperty(PropertyName = "functions")]
        public IList<QueryFunction> Functions { get; set; }

        /// <summary>
        /// Gets or sets describes the type of the job. Valid values are
        /// `Cloud` and 'Edge'. Possible values include: 'Cloud', 'Edge'
        /// </summary>
        [JsonProperty(PropertyName = "jobType")]
        public string JobType { get; set; }

        /// <summary>
        /// Gets or sets the query to compile. Possible values include: '1.0'
        /// </summary>
        [JsonProperty(PropertyName = "compatibilityLevel")]
        public string CompatibilityLevel { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Query == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Query");
            }
            if (JobType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "JobType");
            }
            if (Inputs != null)
            {
                foreach (var element in Inputs)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Functions != null)
            {
                foreach (var element1 in Functions)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
