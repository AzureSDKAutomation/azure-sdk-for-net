// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Logic
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for IntegrationServiceEnvironmentOperations.
    /// </summary>
    public static partial class IntegrationServiceEnvironmentOperationsExtensions
    {
            /// <summary>
            /// Gets a list of integration service environment skus.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group.
            /// </param>
            /// <param name='integrationServiceEnvironmentName'>
            /// The integration service environment name.
            /// </param>
            public static IntegrationServiceEnvironmentSkuList Skus(this IIntegrationServiceEnvironmentOperations operations, string resourceGroup, string integrationServiceEnvironmentName)
            {
                return operations.SkusAsync(resourceGroup, integrationServiceEnvironmentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of integration service environment skus.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group.
            /// </param>
            /// <param name='integrationServiceEnvironmentName'>
            /// The integration service environment name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IntegrationServiceEnvironmentSkuList> SkusAsync(this IIntegrationServiceEnvironmentOperations operations, string resourceGroup, string integrationServiceEnvironmentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SkusWithHttpMessagesAsync(resourceGroup, integrationServiceEnvironmentName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restarts an integration service environment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group.
            /// </param>
            /// <param name='integrationServiceEnvironmentName'>
            /// The integration service environment name.
            /// </param>
            public static void Restart(this IIntegrationServiceEnvironmentOperations operations, string resourceGroup, string integrationServiceEnvironmentName)
            {
                operations.RestartAsync(resourceGroup, integrationServiceEnvironmentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restarts an integration service environment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group.
            /// </param>
            /// <param name='integrationServiceEnvironmentName'>
            /// The integration service environment name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RestartAsync(this IIntegrationServiceEnvironmentOperations operations, string resourceGroup, string integrationServiceEnvironmentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RestartWithHttpMessagesAsync(resourceGroup, integrationServiceEnvironmentName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the integration service environment network health.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group.
            /// </param>
            /// <param name='integrationServiceEnvironmentName'>
            /// The integration service environment name.
            /// </param>
            public static IDictionary<string, IntegrationServiceEnvironmentSubnetNetworkHealth> NetworkHealth(this IIntegrationServiceEnvironmentOperations operations, string resourceGroup, string integrationServiceEnvironmentName)
            {
                return operations.NetworkHealthAsync(resourceGroup, integrationServiceEnvironmentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the integration service environment network health.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group.
            /// </param>
            /// <param name='integrationServiceEnvironmentName'>
            /// The integration service environment name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, IntegrationServiceEnvironmentSubnetNetworkHealth>> NetworkHealthAsync(this IIntegrationServiceEnvironmentOperations operations, string resourceGroup, string integrationServiceEnvironmentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.NetworkHealthWithHttpMessagesAsync(resourceGroup, integrationServiceEnvironmentName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the integration service environment managed Apis.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group.
            /// </param>
            /// <param name='integrationServiceEnvironmentName'>
            /// The integration service environment name.
            /// </param>
            public static ManagedApiListResult ManagedApis(this IIntegrationServiceEnvironmentOperations operations, string resourceGroup, string integrationServiceEnvironmentName)
            {
                return operations.ManagedApisAsync(resourceGroup, integrationServiceEnvironmentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the integration service environment managed Apis.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group.
            /// </param>
            /// <param name='integrationServiceEnvironmentName'>
            /// The integration service environment name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagedApiListResult> ManagedApisAsync(this IIntegrationServiceEnvironmentOperations operations, string resourceGroup, string integrationServiceEnvironmentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ManagedApisWithHttpMessagesAsync(resourceGroup, integrationServiceEnvironmentName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the integration service environment managed Api.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group name.
            /// </param>
            /// <param name='integrationServiceEnvironmentName'>
            /// The integration service environment name.
            /// </param>
            /// <param name='apiName'>
            /// The api name.
            /// </param>
            public static ManagedApi Get(this IIntegrationServiceEnvironmentOperations operations, string resourceGroup, string integrationServiceEnvironmentName, string apiName)
            {
                return operations.GetAsync(resourceGroup, integrationServiceEnvironmentName, apiName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the integration service environment managed Api.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group name.
            /// </param>
            /// <param name='integrationServiceEnvironmentName'>
            /// The integration service environment name.
            /// </param>
            /// <param name='apiName'>
            /// The api name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagedApi> GetAsync(this IIntegrationServiceEnvironmentOperations operations, string resourceGroup, string integrationServiceEnvironmentName, string apiName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroup, integrationServiceEnvironmentName, apiName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Puts the integration service environment managed Api.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group name.
            /// </param>
            /// <param name='integrationServiceEnvironmentName'>
            /// The integration service environment name.
            /// </param>
            /// <param name='apiName'>
            /// The api name.
            /// </param>
            public static ManagedApi Put(this IIntegrationServiceEnvironmentOperations operations, string resourceGroup, string integrationServiceEnvironmentName, string apiName)
            {
                return operations.PutAsync(resourceGroup, integrationServiceEnvironmentName, apiName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Puts the integration service environment managed Api.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group name.
            /// </param>
            /// <param name='integrationServiceEnvironmentName'>
            /// The integration service environment name.
            /// </param>
            /// <param name='apiName'>
            /// The api name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagedApi> PutAsync(this IIntegrationServiceEnvironmentOperations operations, string resourceGroup, string integrationServiceEnvironmentName, string apiName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutWithHttpMessagesAsync(resourceGroup, integrationServiceEnvironmentName, apiName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the integration service environment managed Api.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group.
            /// </param>
            /// <param name='integrationServiceEnvironmentName'>
            /// The integration service environment name.
            /// </param>
            /// <param name='apiName'>
            /// The api name.
            /// </param>
            public static ManagedApi Delete(this IIntegrationServiceEnvironmentOperations operations, string resourceGroup, string integrationServiceEnvironmentName, string apiName)
            {
                return operations.DeleteAsync(resourceGroup, integrationServiceEnvironmentName, apiName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the integration service environment managed Api.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group.
            /// </param>
            /// <param name='integrationServiceEnvironmentName'>
            /// The integration service environment name.
            /// </param>
            /// <param name='apiName'>
            /// The api name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagedApi> DeleteAsync(this IIntegrationServiceEnvironmentOperations operations, string resourceGroup, string integrationServiceEnvironmentName, string apiName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroup, integrationServiceEnvironmentName, apiName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the managed Api operations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group.
            /// </param>
            /// <param name='integrationServiceEnvironmentName'>
            /// The integration service environment name.
            /// </param>
            /// <param name='apiName'>
            /// The api name.
            /// </param>
            public static ApiOperationListResult ManagedApiOperations(this IIntegrationServiceEnvironmentOperations operations, string resourceGroup, string integrationServiceEnvironmentName, string apiName)
            {
                return operations.ManagedApiOperationsAsync(resourceGroup, integrationServiceEnvironmentName, apiName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the managed Api operations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group.
            /// </param>
            /// <param name='integrationServiceEnvironmentName'>
            /// The integration service environment name.
            /// </param>
            /// <param name='apiName'>
            /// The api name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApiOperationListResult> ManagedApiOperationsAsync(this IIntegrationServiceEnvironmentOperations operations, string resourceGroup, string integrationServiceEnvironmentName, string apiName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ManagedApiOperationsWithHttpMessagesAsync(resourceGroup, integrationServiceEnvironmentName, apiName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Puts the integration service environment managed Api.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group name.
            /// </param>
            /// <param name='integrationServiceEnvironmentName'>
            /// The integration service environment name.
            /// </param>
            /// <param name='apiName'>
            /// The api name.
            /// </param>
            public static ManagedApi BeginPut(this IIntegrationServiceEnvironmentOperations operations, string resourceGroup, string integrationServiceEnvironmentName, string apiName)
            {
                return operations.BeginPutAsync(resourceGroup, integrationServiceEnvironmentName, apiName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Puts the integration service environment managed Api.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group name.
            /// </param>
            /// <param name='integrationServiceEnvironmentName'>
            /// The integration service environment name.
            /// </param>
            /// <param name='apiName'>
            /// The api name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagedApi> BeginPutAsync(this IIntegrationServiceEnvironmentOperations operations, string resourceGroup, string integrationServiceEnvironmentName, string apiName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginPutWithHttpMessagesAsync(resourceGroup, integrationServiceEnvironmentName, apiName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the integration service environment managed Api.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group.
            /// </param>
            /// <param name='integrationServiceEnvironmentName'>
            /// The integration service environment name.
            /// </param>
            /// <param name='apiName'>
            /// The api name.
            /// </param>
            public static ManagedApi BeginDelete(this IIntegrationServiceEnvironmentOperations operations, string resourceGroup, string integrationServiceEnvironmentName, string apiName)
            {
                return operations.BeginDeleteAsync(resourceGroup, integrationServiceEnvironmentName, apiName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the integration service environment managed Api.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroup'>
            /// The resource group.
            /// </param>
            /// <param name='integrationServiceEnvironmentName'>
            /// The integration service environment name.
            /// </param>
            /// <param name='apiName'>
            /// The api name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagedApi> BeginDeleteAsync(this IIntegrationServiceEnvironmentOperations operations, string resourceGroup, string integrationServiceEnvironmentName, string apiName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroup, integrationServiceEnvironmentName, apiName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
