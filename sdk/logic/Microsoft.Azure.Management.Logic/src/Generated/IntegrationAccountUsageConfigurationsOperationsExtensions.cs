// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Logic
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for IntegrationAccountUsageConfigurationsOperations.
    /// </summary>
    public static partial class IntegrationAccountUsageConfigurationsOperationsExtensions
    {
            /// <summary>
            /// Gets a list of integration account usage configurations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='integrationAccountName'>
            /// The integration account name.
            /// </param>
            /// <param name='top'>
            /// The number of items to be included in the result.
            /// </param>
            public static IPage<IntegrationAccountUsageConfiguration> List(this IIntegrationAccountUsageConfigurationsOperations operations, string resourceGroupName, string integrationAccountName, int? top = default(int?))
            {
                return operations.ListAsync(resourceGroupName, integrationAccountName, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of integration account usage configurations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='integrationAccountName'>
            /// The integration account name.
            /// </param>
            /// <param name='top'>
            /// The number of items to be included in the result.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IntegrationAccountUsageConfiguration>> ListAsync(this IIntegrationAccountUsageConfigurationsOperations operations, string resourceGroupName, string integrationAccountName, int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, integrationAccountName, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets an integration account usage configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='integrationAccountName'>
            /// The integration account name.
            /// </param>
            /// <param name='usageConfigurationName'>
            /// The integration account usage configuration name.
            /// </param>
            public static IntegrationAccountUsageConfiguration Get(this IIntegrationAccountUsageConfigurationsOperations operations, string resourceGroupName, string integrationAccountName, string usageConfigurationName)
            {
                return operations.GetAsync(resourceGroupName, integrationAccountName, usageConfigurationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an integration account usage configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='integrationAccountName'>
            /// The integration account name.
            /// </param>
            /// <param name='usageConfigurationName'>
            /// The integration account usage configuration name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IntegrationAccountUsageConfiguration> GetAsync(this IIntegrationAccountUsageConfigurationsOperations operations, string resourceGroupName, string integrationAccountName, string usageConfigurationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, integrationAccountName, usageConfigurationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates an integration account usage configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='integrationAccountName'>
            /// The integration account name.
            /// </param>
            /// <param name='usageConfigurationName'>
            /// The integration account usage configuration name.
            /// </param>
            /// <param name='usageConfiguration'>
            /// The integration account usage configuration.
            /// </param>
            public static IntegrationAccountUsageConfiguration CreateOrUpdate(this IIntegrationAccountUsageConfigurationsOperations operations, string resourceGroupName, string integrationAccountName, string usageConfigurationName, IntegrationAccountUsageConfiguration usageConfiguration)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, integrationAccountName, usageConfigurationName, usageConfiguration).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates an integration account usage configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='integrationAccountName'>
            /// The integration account name.
            /// </param>
            /// <param name='usageConfigurationName'>
            /// The integration account usage configuration name.
            /// </param>
            /// <param name='usageConfiguration'>
            /// The integration account usage configuration.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IntegrationAccountUsageConfiguration> CreateOrUpdateAsync(this IIntegrationAccountUsageConfigurationsOperations operations, string resourceGroupName, string integrationAccountName, string usageConfigurationName, IntegrationAccountUsageConfiguration usageConfiguration, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, integrationAccountName, usageConfigurationName, usageConfiguration, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an integration account usage configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='integrationAccountName'>
            /// The integration account name.
            /// </param>
            /// <param name='usageConfigurationName'>
            /// The integration account usage configuration name.
            /// </param>
            public static void Delete(this IIntegrationAccountUsageConfigurationsOperations operations, string resourceGroupName, string integrationAccountName, string usageConfigurationName)
            {
                operations.DeleteAsync(resourceGroupName, integrationAccountName, usageConfigurationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an integration account usage configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='integrationAccountName'>
            /// The integration account name.
            /// </param>
            /// <param name='usageConfigurationName'>
            /// The integration account usage configuration name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IIntegrationAccountUsageConfigurationsOperations operations, string resourceGroupName, string integrationAccountName, string usageConfigurationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, integrationAccountName, usageConfigurationName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get the callback url.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='integrationAccountName'>
            /// The integration account name.
            /// </param>
            /// <param name='usageConfigurationName'>
            /// The integration account usage configuration name.
            /// </param>
            /// <param name='listCallbackUrl'>
            /// </param>
            public static WorkflowTriggerCallbackUrl ListCallbackUrl(this IIntegrationAccountUsageConfigurationsOperations operations, string resourceGroupName, string integrationAccountName, string usageConfigurationName, GetCallbackUrlParameters listCallbackUrl)
            {
                return operations.ListCallbackUrlAsync(resourceGroupName, integrationAccountName, usageConfigurationName, listCallbackUrl).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the callback url.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='integrationAccountName'>
            /// The integration account name.
            /// </param>
            /// <param name='usageConfigurationName'>
            /// The integration account usage configuration name.
            /// </param>
            /// <param name='listCallbackUrl'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkflowTriggerCallbackUrl> ListCallbackUrlAsync(this IIntegrationAccountUsageConfigurationsOperations operations, string resourceGroupName, string integrationAccountName, string usageConfigurationName, GetCallbackUrlParameters listCallbackUrl, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCallbackUrlWithHttpMessagesAsync(resourceGroupName, integrationAccountName, usageConfigurationName, listCallbackUrl, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of integration account usage configurations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<IntegrationAccountUsageConfiguration> ListNext(this IIntegrationAccountUsageConfigurationsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of integration account usage configurations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IntegrationAccountUsageConfiguration>> ListNextAsync(this IIntegrationAccountUsageConfigurationsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
