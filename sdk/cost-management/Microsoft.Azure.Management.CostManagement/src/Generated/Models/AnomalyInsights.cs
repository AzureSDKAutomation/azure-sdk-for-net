// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CostManagement.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Anomaly Insights.
    /// </summary>
    [Newtonsoft.Json.JsonObject("anomaly")]
    [Rest.Serialization.JsonTransformation]
    public partial class AnomalyInsights : Insights
    {
        /// <summary>
        /// Initializes a new instance of the AnomalyInsights class.
        /// </summary>
        public AnomalyInsights()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AnomalyInsights class.
        /// </summary>
        /// <param name="id">Resource Id.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="eTag">eTag of the resource. To handle concurrent
        /// update scenario, this field will be used to determine whether the
        /// user is updating the latest version or not.</param>
        /// <param name="status">Status of the insight. Possible values
        /// include: 'New', 'Dismissed', 'Acknowledged', 'Resolved'</param>
        /// <param name="eventDate">The date of event resulting in this
        /// Anomaly</param>
        /// <param name="scope">The scope at which the Anomaly was
        /// detected.</param>
        /// <param name="impactTerm">The period where the impact was
        /// observed</param>
        /// <param name="impactResolution">The datetime when this impact was
        /// resolved.</param>
        /// <param name="timeDetected">The datetime when this Anomaly was
        /// detected.</param>
        /// <param name="severity">Severity of Anomaly.</param>
        /// <param name="details">Details of Anomaly.</param>
        /// <param name="justification">Justification as why the impact
        /// qualifies as Anomaly.</param>
        public AnomalyInsights(string id = default(string), string name = default(string), string type = default(string), string eTag = default(string), string status = default(string), System.DateTime? eventDate = default(System.DateTime?), string scope = default(string), string impactTerm = default(string), System.DateTime? impactResolution = default(System.DateTime?), System.DateTime? timeDetected = default(System.DateTime?), string severity = default(string), object details = default(object), object justification = default(object))
            : base(id, name, type, eTag)
        {
            Status = status;
            EventDate = eventDate;
            Scope = scope;
            ImpactTerm = impactTerm;
            ImpactResolution = impactResolution;
            TimeDetected = timeDetected;
            Severity = severity;
            Details = details;
            Justification = justification;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets status of the insight. Possible values include: 'New',
        /// 'Dismissed', 'Acknowledged', 'Resolved'
        /// </summary>
        [JsonProperty(PropertyName = "properties.status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets the date of event resulting in this Anomaly
        /// </summary>
        [JsonProperty(PropertyName = "properties.eventDate")]
        public System.DateTime? EventDate { get; private set; }

        /// <summary>
        /// Gets the scope at which the Anomaly was detected.
        /// </summary>
        [JsonProperty(PropertyName = "properties.scope")]
        public string Scope { get; private set; }

        /// <summary>
        /// Gets the period where the impact was observed
        /// </summary>
        [JsonProperty(PropertyName = "properties.impactTerm")]
        public string ImpactTerm { get; private set; }

        /// <summary>
        /// Gets the datetime when this impact was resolved.
        /// </summary>
        [JsonProperty(PropertyName = "properties.impactResolution")]
        public System.DateTime? ImpactResolution { get; private set; }

        /// <summary>
        /// Gets the datetime when this Anomaly was detected.
        /// </summary>
        [JsonProperty(PropertyName = "properties.timeDetected")]
        public System.DateTime? TimeDetected { get; private set; }

        /// <summary>
        /// Gets severity of Anomaly.
        /// </summary>
        [JsonProperty(PropertyName = "properties.severity")]
        public string Severity { get; private set; }

        /// <summary>
        /// Gets or sets details of Anomaly.
        /// </summary>
        [JsonProperty(PropertyName = "properties.details")]
        public object Details { get; set; }

        /// <summary>
        /// Gets or sets justification as why the impact qualifies as Anomaly.
        /// </summary>
        [JsonProperty(PropertyName = "properties.justification")]
        public object Justification { get; set; }

    }
}
