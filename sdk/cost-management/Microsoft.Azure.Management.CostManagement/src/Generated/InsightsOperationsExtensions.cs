// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CostManagement
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for InsightsOperations.
    /// </summary>
    public static partial class InsightsOperationsExtensions
    {
            /// <summary>
            /// Lists all insights at the given scope.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/costmanagement/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope associated with insights operations. This includes
            /// '/subscriptions/{subscriptionId}/' for subscription scope. At present, only
            /// subscription scope is supported.
            /// </param>
            public static IPage<Insights> ListByScope(this IInsightsOperations operations, string scope)
            {
                return operations.ListByScopeAsync(scope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all insights at the given scope.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/costmanagement/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope associated with insights operations. This includes
            /// '/subscriptions/{subscriptionId}/' for subscription scope. At present, only
            /// subscription scope is supported.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Insights>> ListByScopeAsync(this IInsightsOperations operations, string scope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByScopeWithHttpMessagesAsync(scope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the insight for the defined scope by insight name.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/costmanagement/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope associated with insights operations. This includes
            /// '/subscriptions/{subscriptionId}/' for subscription scope. At present, only
            /// subscription scope is supported.
            /// </param>
            /// <param name='insightName'>
            /// Insights name
            /// </param>
            public static Insights GetByScope(this IInsightsOperations operations, string scope, string insightName)
            {
                return operations.GetByScopeAsync(scope, insightName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the insight for the defined scope by insight name.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/costmanagement/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope associated with insights operations. This includes
            /// '/subscriptions/{subscriptionId}/' for subscription scope. At present, only
            /// subscription scope is supported.
            /// </param>
            /// <param name='insightName'>
            /// Insights name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Insights> GetByScopeAsync(this IInsightsOperations operations, string scope, string insightName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByScopeWithHttpMessagesAsync(scope, insightName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all insights at the given scope.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/costmanagement/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Insights> ListByScopeNext(this IInsightsOperations operations, string nextPageLink)
            {
                return operations.ListByScopeNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all insights at the given scope.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/costmanagement/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Insights>> ListByScopeNextAsync(this IInsightsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByScopeNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
