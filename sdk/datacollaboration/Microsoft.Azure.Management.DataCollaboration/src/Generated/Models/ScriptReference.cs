// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataCollaboration.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Script reference dto.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ScriptReference : ProxyDto
    {
        /// <summary>
        /// Initializes a new instance of the ScriptReference class.
        /// </summary>
        public ScriptReference()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ScriptReference class.
        /// </summary>
        /// <param name="revision">The revision number of the script being
        /// referenced</param>
        /// <param name="scriptId">The unique identifier of the referenced
        /// script</param>
        /// <param name="id">The resource id of the azure resource</param>
        /// <param name="name">Name of the azure resource</param>
        /// <param name="type">Type of the azure resource</param>
        /// <param name="content">The content of the referenced script. null if
        /// Visibility is set to HiddenContent.</param>
        /// <param name="scriptReferenceId">Unique id for identifying a script
        /// reference resource</param>
        /// <param name="sinks">The list of sink parameters in the referenced
        /// script. null if Visibility is set to HiddenContent.</param>
        /// <param name="sources">The list of source parameters in the
        /// referenced script. null if Visibility is set to
        /// HiddenContent.</param>
        /// <param name="visibility">The referenced script visibility modifier.
        /// Possible values include: 'ShowAll', 'HiddenContent'</param>
        public ScriptReference(int revision, string scriptId, string id = default(string), string name = default(string), string type = default(string), string content = default(string), string scriptReferenceId = default(string), IList<string> sinks = default(IList<string>), IList<string> sources = default(IList<string>), string visibility = default(string))
            : base(id, name, type)
        {
            Content = content;
            Revision = revision;
            ScriptId = scriptId;
            ScriptReferenceId = scriptReferenceId;
            Sinks = sinks;
            Sources = sources;
            Visibility = visibility;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the content of the referenced script. null if Visibility is
        /// set to HiddenContent.
        /// </summary>
        [JsonProperty(PropertyName = "properties.content")]
        public string Content { get; private set; }

        /// <summary>
        /// Gets or sets the revision number of the script being referenced
        /// </summary>
        [JsonProperty(PropertyName = "properties.revision")]
        public int Revision { get; set; }

        /// <summary>
        /// Gets or sets the unique identifier of the referenced script
        /// </summary>
        [JsonProperty(PropertyName = "properties.scriptId")]
        public string ScriptId { get; set; }

        /// <summary>
        /// Gets unique id for identifying a script reference resource
        /// </summary>
        [JsonProperty(PropertyName = "properties.scriptReferenceId")]
        public string ScriptReferenceId { get; private set; }

        /// <summary>
        /// Gets the list of sink parameters in the referenced script. null if
        /// Visibility is set to HiddenContent.
        /// </summary>
        [JsonProperty(PropertyName = "properties.sinks")]
        public IList<string> Sinks { get; private set; }

        /// <summary>
        /// Gets the list of source parameters in the referenced script. null
        /// if Visibility is set to HiddenContent.
        /// </summary>
        [JsonProperty(PropertyName = "properties.sources")]
        public IList<string> Sources { get; private set; }

        /// <summary>
        /// Gets the referenced script visibility modifier. Possible values
        /// include: 'ShowAll', 'HiddenContent'
        /// </summary>
        [JsonProperty(PropertyName = "properties.visibility")]
        public string Visibility { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ScriptId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ScriptId");
            }
        }
    }
}
