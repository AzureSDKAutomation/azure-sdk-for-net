// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataCollaboration.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A Synapse Spark based pipeline step.
    /// </summary>
    [Newtonsoft.Json.JsonObject("SynapseSpark")]
    [Rest.Serialization.JsonTransformation]
    public partial class SynapseSparkPipelineStep : PipelineStep
    {
        /// <summary>
        /// Initializes a new instance of the SynapseSparkPipelineStep class.
        /// </summary>
        public SynapseSparkPipelineStep()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SynapseSparkPipelineStep class.
        /// </summary>
        /// <param name="scriptId">The script Id that the pipeline step should
        /// execute</param>
        /// <param name="scriptRevision">The script's revision that the
        /// pipeline step should execute</param>
        /// <param name="scriptSinkBindings">Bindings between the script's sink
        /// keys and data assets</param>
        /// <param name="scriptSourceBindings">Bindings between the script's
        /// source keys and data assets</param>
        /// <param name="id">The resource id of the azure resource</param>
        /// <param name="name">Name of the azure resource</param>
        /// <param name="type">Type of the azure resource</param>
        /// <param name="dependencies">List of other steps names, in the same
        /// pipeline, which this step is depended on
        /// and should run only when they finish.</param>
        /// <param name="executorNodeSize">The node size to use per executor.
        /// Possible values include: 'None', 'Small', 'Medium', 'Large',
        /// 'XLarge', 'XXLarge', 'XXXLarge'</param>
        /// <param name="executorsCount">Number of executors to execute this
        /// step.</param>
        /// <param name="synapseSparkPoolId">The Synapse Spark pool that will
        /// execute this step</param>
        public SynapseSparkPipelineStep(string scriptId, int scriptRevision, IList<ScriptDataAssetBinding> scriptSinkBindings, IList<ScriptDataAssetBinding> scriptSourceBindings, string id = default(string), string name = default(string), string type = default(string), IList<string> dependencies = default(IList<string>), string executorNodeSize = default(string), int? executorsCount = default(int?), string synapseSparkPoolId = default(string))
            : base(id, name, type)
        {
            Dependencies = dependencies;
            ExecutorNodeSize = executorNodeSize;
            ExecutorsCount = executorsCount;
            ScriptId = scriptId;
            ScriptRevision = scriptRevision;
            ScriptSinkBindings = scriptSinkBindings;
            ScriptSourceBindings = scriptSourceBindings;
            SynapseSparkPoolId = synapseSparkPoolId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets list of other steps names, in the same pipeline, which
        /// this step is depended on
        /// and should run only when they finish.
        /// </summary>
        [JsonProperty(PropertyName = "properties.dependencies")]
        public IList<string> Dependencies { get; set; }

        /// <summary>
        /// Gets or sets the node size to use per executor. Possible values
        /// include: 'None', 'Small', 'Medium', 'Large', 'XLarge', 'XXLarge',
        /// 'XXXLarge'
        /// </summary>
        [JsonProperty(PropertyName = "properties.executorNodeSize")]
        public string ExecutorNodeSize { get; set; }

        /// <summary>
        /// Gets or sets number of executors to execute this step.
        /// </summary>
        [JsonProperty(PropertyName = "properties.executorsCount")]
        public int? ExecutorsCount { get; set; }

        /// <summary>
        /// Gets or sets the script Id that the pipeline step should execute
        /// </summary>
        [JsonProperty(PropertyName = "properties.scriptId")]
        public string ScriptId { get; set; }

        /// <summary>
        /// Gets or sets the script's revision that the pipeline step should
        /// execute
        /// </summary>
        [JsonProperty(PropertyName = "properties.scriptRevision")]
        public int ScriptRevision { get; set; }

        /// <summary>
        /// Gets or sets bindings between the script's sink keys and data
        /// assets
        /// </summary>
        [JsonProperty(PropertyName = "properties.scriptSinkBindings")]
        public IList<ScriptDataAssetBinding> ScriptSinkBindings { get; set; }

        /// <summary>
        /// Gets or sets bindings between the script's source keys and data
        /// assets
        /// </summary>
        [JsonProperty(PropertyName = "properties.scriptSourceBindings")]
        public IList<ScriptDataAssetBinding> ScriptSourceBindings { get; set; }

        /// <summary>
        /// Gets or sets the Synapse Spark pool that will execute this step
        /// </summary>
        [JsonProperty(PropertyName = "properties.synapseSparkPoolId")]
        public string SynapseSparkPoolId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ScriptId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ScriptId");
            }
            if (ScriptSinkBindings == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ScriptSinkBindings");
            }
            if (ScriptSourceBindings == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ScriptSourceBindings");
            }
        }
    }
}
