// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataCollaboration
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PipelineStepRunsOperations.
    /// </summary>
    public static partial class PipelineStepRunsOperationsExtensions
    {
            /// <summary>
            /// List pipeline step runs in a pipeline run.
            /// </summary>
            /// <remarks>
            /// List pipelines run of a pipeline
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='pipelineName'>
            /// The name of the pipeline.
            /// </param>
            /// <param name='pipelineRunName'>
            /// The name of the pipeline run.
            /// </param>
            /// <param name='skipToken'>
            /// Continuation token
            /// </param>
            public static IPage<PipelineStepRun> ListByPipelineRun(this IPipelineStepRunsOperations operations, string resourceGroupName, string workspaceName, string pipelineName, string pipelineRunName, string skipToken = default(string))
            {
                return operations.ListByPipelineRunAsync(resourceGroupName, workspaceName, pipelineName, pipelineRunName, skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List pipeline step runs in a pipeline run.
            /// </summary>
            /// <remarks>
            /// List pipelines run of a pipeline
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='pipelineName'>
            /// The name of the pipeline.
            /// </param>
            /// <param name='pipelineRunName'>
            /// The name of the pipeline run.
            /// </param>
            /// <param name='skipToken'>
            /// Continuation token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PipelineStepRun>> ListByPipelineRunAsync(this IPipelineStepRunsOperations operations, string resourceGroupName, string workspaceName, string pipelineName, string pipelineRunName, string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByPipelineRunWithHttpMessagesAsync(resourceGroupName, workspaceName, pipelineName, pipelineRunName, skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get pipeline step run.
            /// </summary>
            /// <remarks>
            /// Get a pipeline run in a pipeline
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='pipelineName'>
            /// The name of the pipeline.
            /// </param>
            /// <param name='pipelineRunName'>
            /// The name of the pipeline run.
            /// </param>
            /// <param name='pipelineStepRunId'>
            /// The id of the pipeline step run.
            /// </param>
            public static PipelineStepRun Get(this IPipelineStepRunsOperations operations, string resourceGroupName, string workspaceName, string pipelineName, string pipelineRunName, string pipelineStepRunId)
            {
                return operations.GetAsync(resourceGroupName, workspaceName, pipelineName, pipelineRunName, pipelineStepRunId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get pipeline step run.
            /// </summary>
            /// <remarks>
            /// Get a pipeline run in a pipeline
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='pipelineName'>
            /// The name of the pipeline.
            /// </param>
            /// <param name='pipelineRunName'>
            /// The name of the pipeline run.
            /// </param>
            /// <param name='pipelineStepRunId'>
            /// The id of the pipeline step run.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PipelineStepRun> GetAsync(this IPipelineStepRunsOperations operations, string resourceGroupName, string workspaceName, string pipelineName, string pipelineRunName, string pipelineStepRunId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, workspaceName, pipelineName, pipelineRunName, pipelineStepRunId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List pipeline step runs in a pipeline run.
            /// </summary>
            /// <remarks>
            /// List pipelines run of a pipeline
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<PipelineStepRun> ListByPipelineRunNext(this IPipelineStepRunsOperations operations, string nextPageLink)
            {
                return operations.ListByPipelineRunNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List pipeline step runs in a pipeline run.
            /// </summary>
            /// <remarks>
            /// List pipelines run of a pipeline
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PipelineStepRun>> ListByPipelineRunNextAsync(this IPipelineStepRunsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByPipelineRunNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
