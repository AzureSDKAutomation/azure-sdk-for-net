// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.SignalR
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// ServiceApiOperations operations.
    /// </summary>
    public partial interface IServiceApiOperations
    {
        /// <summary>
        /// Broadcast a message to all clients connected to target hub.
        /// </summary>
        /// <param name='hub'>
        /// Target hub name, which should start with alphabetic characters and
        /// only contain alpha-numeric characters or underscore.
        /// </param>
        /// <param name='payloadMessage'>
        /// The message body.
        /// </param>
        /// <param name='excluded'>
        /// Excluded connection Ids
        /// </param>
        /// <param name='apiVersion'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse> BroadcastWithHttpMessagesAsync(string hub, PayloadMessage payloadMessage, IList<string> excluded = default(IList<string>), string apiVersion = "2020-10-01", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Check if there are any client connections connected for the given
        /// user
        /// </summary>
        /// <param name='hub'>
        /// Target hub name, which should start with alphabetic characters and
        /// only contain alpha-numeric characters or underscore.
        /// </param>
        /// <param name='user'>
        /// The user Id.
        /// </param>
        /// <param name='apiVersion'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<bool>> CheckUserExistenceWithHttpMessagesAsync(string hub, string user, string apiVersion = "2020-10-01", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Broadcast a message to all clients belong to the target user.
        /// </summary>
        /// <param name='hub'>
        /// Target hub name, which should start with alphabetic characters and
        /// only contain alpha-numeric characters or underscore.
        /// </param>
        /// <param name='user'>
        /// The user Id.
        /// </param>
        /// <param name='payloadMessage'>
        /// The message body.
        /// </param>
        /// <param name='apiVersion'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse> SendToUserWithHttpMessagesAsync(string hub, string user, PayloadMessage payloadMessage, string apiVersion = "2020-10-01", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Check if the connection with the given connectionId exists
        /// </summary>
        /// <param name='hub'>
        /// Target hub name, which should start with alphabetic characters and
        /// only contain alpha-numeric characters or underscore.
        /// </param>
        /// <param name='connectionId'>
        /// The connection Id.
        /// </param>
        /// <param name='apiVersion'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<bool>> CheckConnectionExistenceWithHttpMessagesAsync(string hub, string connectionId, string apiVersion = "2020-10-01", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Close the client connection
        /// </summary>
        /// <param name='hub'>
        /// Target hub name, which should start with alphabetic characters and
        /// only contain alpha-numeric characters or underscore.
        /// </param>
        /// <param name='connectionId'>
        /// The connection Id.
        /// </param>
        /// <param name='reason'>
        /// The reason of the connection close.
        /// </param>
        /// <param name='apiVersion'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse> CloseClientConnectionWithHttpMessagesAsync(string hub, string connectionId, string reason = default(string), string apiVersion = "2020-10-01", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send message to the specific connection.
        /// </summary>
        /// <param name='hub'>
        /// Target hub name, which should start with alphabetic characters and
        /// only contain alpha-numeric characters or underscore.
        /// </param>
        /// <param name='connectionId'>
        /// The connection Id.
        /// </param>
        /// <param name='payloadMessage'>
        /// The message body.
        /// </param>
        /// <param name='apiVersion'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse> SendToConnectionWithHttpMessagesAsync(string hub, string connectionId, PayloadMessage payloadMessage, string apiVersion = "2020-10-01", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Check if there are any client connections inside the given group
        /// </summary>
        /// <param name='hub'>
        /// Target hub name, which should start with alphabetic characters and
        /// only contain alpha-numeric characters or underscore.
        /// </param>
        /// <param name='group'>
        /// Target group name, which length should be greater than 0 and less
        /// than 1025.
        /// </param>
        /// <param name='apiVersion'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<bool>> CheckGroupExistenceWithHttpMessagesAsync(string hub, string group, string apiVersion = "2020-10-01", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Broadcast a message to all clients within the target group.
        /// </summary>
        /// <param name='hub'>
        /// Target hub name, which should start with alphabetic characters and
        /// only contain alpha-numeric characters or underscore.
        /// </param>
        /// <param name='group'>
        /// Target group name, which length should be greater than 0 and less
        /// than 1025.
        /// </param>
        /// <param name='payloadMessage'>
        /// The message body.
        /// </param>
        /// <param name='excluded'>
        /// Excluded connection Ids
        /// </param>
        /// <param name='apiVersion'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse> GroupBroadcastWithHttpMessagesAsync(string hub, string group, PayloadMessage payloadMessage, IList<string> excluded = default(IList<string>), string apiVersion = "2020-10-01", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Add a connection to the target group.
        /// </summary>
        /// <param name='hub'>
        /// Target hub name, which should start with alphabetic characters and
        /// only contain alpha-numeric characters or underscore.
        /// </param>
        /// <param name='group'>
        /// Target group name, which length should be greater than 0 and less
        /// than 1025.
        /// </param>
        /// <param name='connectionId'>
        /// Target connection Id
        /// </param>
        /// <param name='apiVersion'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse> AddConnectionToGroupWithHttpMessagesAsync(string hub, string group, string connectionId, string apiVersion = "2020-10-01", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Remove a connection from the target group.
        /// </summary>
        /// <param name='hub'>
        /// Target hub name, which should start with alphabetic characters and
        /// only contain alpha-numeric characters or underscore.
        /// </param>
        /// <param name='group'>
        /// Target group name, which length should be greater than 0 and less
        /// than 1025.
        /// </param>
        /// <param name='connectionId'>
        /// Target connection Id
        /// </param>
        /// <param name='apiVersion'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse> RemoveConnectionFromGroupWithHttpMessagesAsync(string hub, string group, string connectionId, string apiVersion = "2020-10-01", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Check whether a user exists in the target group.
        /// </summary>
        /// <param name='hub'>
        /// Target hub name, which should start with alphabetic characters and
        /// only contain alpha-numeric characters or underscore.
        /// </param>
        /// <param name='group'>
        /// Target group name, which length should be greater than 0 and less
        /// than 1025.
        /// </param>
        /// <param name='user'>
        /// Target user Id
        /// </param>
        /// <param name='apiVersion'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<bool>> CheckUserExistenceInGroupWithHttpMessagesAsync(string hub, string group, string user, string apiVersion = "2020-10-01", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Add a user to the target group.
        /// </summary>
        /// <param name='hub'>
        /// Target hub name, which should start with alphabetic characters and
        /// only contain alpha-numeric characters or underscore.
        /// </param>
        /// <param name='group'>
        /// Target group name, which length should be greater than 0 and less
        /// than 1025.
        /// </param>
        /// <param name='user'>
        /// Target user Id
        /// </param>
        /// <param name='ttl'>
        /// Specifies the seconds that the user exists in the group. If not
        /// set, the user lives in the group forever.
        /// </param>
        /// <param name='apiVersion'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse> AddUserToGroupWithHttpMessagesAsync(string hub, string group, string user, int? ttl = default(int?), string apiVersion = "2020-10-01", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Remove a user from the target group.
        /// </summary>
        /// <param name='hub'>
        /// Target hub name, which should start with alphabetic characters and
        /// only contain alpha-numeric characters or underscore.
        /// </param>
        /// <param name='group'>
        /// Target group name, which length should be greater than 0 and less
        /// than 1025.
        /// </param>
        /// <param name='user'>
        /// Target user Id
        /// </param>
        /// <param name='apiVersion'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse> RemoveUserFromGroupWithHttpMessagesAsync(string hub, string group, string user, string apiVersion = "2020-10-01", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Remove a user from all groups.
        /// </summary>
        /// <param name='hub'>
        /// Target hub name, which should start with alphabetic characters and
        /// only contain alpha-numeric characters or underscore.
        /// </param>
        /// <param name='user'>
        /// Target user Id
        /// </param>
        /// <param name='apiVersion'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse> RemoveUserFromAllGroupsWithHttpMessagesAsync(string hub, string user, string apiVersion = "2020-10-01", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
