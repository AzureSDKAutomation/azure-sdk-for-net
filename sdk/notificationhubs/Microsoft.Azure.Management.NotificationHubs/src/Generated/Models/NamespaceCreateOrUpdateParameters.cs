// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.NotificationHubs.Models
{
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Parameters supplied to the CreateOrUpdate Namespace operation.
    /// </summary>
    public partial class NamespaceCreateOrUpdateParameters : NamespaceResource
    {
        /// <summary>
        /// Initializes a new instance of the NamespaceCreateOrUpdateParameters
        /// class.
        /// </summary>
        public NamespaceCreateOrUpdateParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NamespaceCreateOrUpdateParameters
        /// class.
        /// </summary>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource name</param>
        /// <param name="type">Resource type</param>
        /// <param name="location">Resource location</param>
        /// <param name="tags">Resource tags</param>
        /// <param name="namespaceResourceName">The name of the
        /// namespace.</param>
        /// <param name="provisioningState">Provisioning state of the
        /// Namespace.</param>
        /// <param name="region">Specifies the targeted region in which the
        /// namespace should be created. It can be any of the following values:
        /// Australia East, Australia Southeast, Central US, East US, East US
        /// 2, West US, North Central US, South Central US, East Asia,
        /// Southeast Asia, Brazil South, Japan East, Japan West, North Europe,
        /// West Europe</param>
        /// <param name="metricId">Identifier for Azure Insights
        /// metrics</param>
        /// <param name="status">Status of the namespace. It can be any of
        /// these values:1 = Created/Active2 = Creating3 = Suspended4 =
        /// Deleting</param>
        /// <param name="createdAt">The time the namespace was created.</param>
        /// <param name="updatedAt">The time the namespace was updated.</param>
        /// <param name="serviceBusEndpoint">Endpoint you can use to perform
        /// NotificationHub operations.</param>
        /// <param name="subscriptionId">The Id of the Azure subscription
        /// associated with the namespace.</param>
        /// <param name="scaleUnit">ScaleUnit where the namespace gets
        /// created</param>
        /// <param name="enabled">Whether or not the namespace is currently
        /// enabled.</param>
        /// <param name="critical">Whether or not the namespace is set as
        /// Critical.</param>
        /// <param name="dataCenter">Data center for the namespace</param>
        /// <param name="namespaceType">The namespace type. Possible values
        /// include: 'Messaging', 'NotificationHub'</param>
        /// <param name="sku">The sku of the created namespace</param>
        public NamespaceCreateOrUpdateParameters(string id = default(string), string name = default(string), string type = default(string), string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string namespaceResourceName = default(string), string provisioningState = default(string), string region = default(string), string metricId = default(string), string status = default(string), System.DateTime? createdAt = default(System.DateTime?), System.DateTime? updatedAt = default(System.DateTime?), string serviceBusEndpoint = default(string), string subscriptionId = default(string), string scaleUnit = default(string), bool? enabled = default(bool?), bool? critical = default(bool?), string dataCenter = default(string), NamespaceType? namespaceType = default(NamespaceType?), Sku sku = default(Sku))
            : base(id, name, type, location, tags, namespaceResourceName, provisioningState, region, metricId, status, createdAt, updatedAt, serviceBusEndpoint, subscriptionId, scaleUnit, enabled, critical, dataCenter, namespaceType, sku)
        {
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
