// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ManagedServices.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A principal Id and user-friendly display name representing an eligible
    /// authorization approver.
    /// </summary>
    public partial class EligibleApprover
    {
        /// <summary>
        /// Initializes a new instance of the EligibleApprover class.
        /// </summary>
        public EligibleApprover()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EligibleApprover class.
        /// </summary>
        /// <param name="principalId">Principal Id of the user or security
        /// group that will approve JIT activation requests for the eligible
        /// authorization.</param>
        /// <param name="principalIdDisplayName">Display name of the principal
        /// Id.</param>
        public EligibleApprover(string principalId, string principalIdDisplayName = default(string))
        {
            PrincipalId = principalId;
            PrincipalIdDisplayName = principalIdDisplayName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets principal Id of the user or security group that will
        /// approve JIT activation requests for the eligible authorization.
        /// </summary>
        [JsonProperty(PropertyName = "principalId")]
        public string PrincipalId { get; set; }

        /// <summary>
        /// Gets or sets display name of the principal Id.
        /// </summary>
        [JsonProperty(PropertyName = "principalIdDisplayName")]
        public string PrincipalIdDisplayName { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (PrincipalId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PrincipalId");
            }
        }
    }
}
