// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Authorization
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Azure.OData;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for RoleAssignmentsOperations.
    /// </summary>
    public static partial class RoleAssignmentsOperationsExtensions
    {
            /// <summary>
            /// List all role assignments that apply to a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            public static IPage<RoleAssignment> ListForSubscription(this IRoleAssignmentsOperations operations, ODataQuery<RoleAssignmentFilter> odataQuery = default(ODataQuery<RoleAssignmentFilter>))
            {
                return operations.ListForSubscriptionAsync(odataQuery).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all role assignments that apply to a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RoleAssignment>> ListForSubscriptionAsync(this IRoleAssignmentsOperations operations, ODataQuery<RoleAssignmentFilter> odataQuery = default(ODataQuery<RoleAssignmentFilter>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForSubscriptionWithHttpMessagesAsync(odataQuery, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all role assignments that apply to a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            public static IPage<RoleAssignment> ListForResourceGroup(this IRoleAssignmentsOperations operations, string resourceGroupName, ODataQuery<RoleAssignmentFilter> odataQuery = default(ODataQuery<RoleAssignmentFilter>))
            {
                return operations.ListForResourceGroupAsync(resourceGroupName, odataQuery).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all role assignments that apply to a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RoleAssignment>> ListForResourceGroupAsync(this IRoleAssignmentsOperations operations, string resourceGroupName, ODataQuery<RoleAssignmentFilter> odataQuery = default(ODataQuery<RoleAssignmentFilter>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForResourceGroupWithHttpMessagesAsync(resourceGroupName, odataQuery, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all role assignments that apply to a resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='resourceProviderNamespace'>
            /// The namespace of the resource provider.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type name. For example the type name of a web app is 'sites'
            /// (from Microsoft.Web/sites).
            /// </param>
            /// <param name='resourceName'>
            /// The resource name.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            public static IPage<RoleAssignment> ListForResource(this IRoleAssignmentsOperations operations, string resourceGroupName, string resourceProviderNamespace, string resourceType, string resourceName, ODataQuery<RoleAssignmentFilter> odataQuery = default(ODataQuery<RoleAssignmentFilter>))
            {
                return operations.ListForResourceAsync(resourceGroupName, resourceProviderNamespace, resourceType, resourceName, odataQuery).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all role assignments that apply to a resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='resourceProviderNamespace'>
            /// The namespace of the resource provider.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type name. For example the type name of a web app is 'sites'
            /// (from Microsoft.Web/sites).
            /// </param>
            /// <param name='resourceName'>
            /// The resource name.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RoleAssignment>> ListForResourceAsync(this IRoleAssignmentsOperations operations, string resourceGroupName, string resourceProviderNamespace, string resourceType, string resourceName, ODataQuery<RoleAssignmentFilter> odataQuery = default(ODataQuery<RoleAssignmentFilter>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForResourceWithHttpMessagesAsync(resourceGroupName, resourceProviderNamespace, resourceType, resourceName, odataQuery, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a role assignment by scope and name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the operation or resource. Valid scopes are: subscription
            /// (format: '/subscriptions/{subscriptionId}'), resource group (format:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
            /// resource (format:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
            /// </param>
            /// <param name='roleAssignmentName'>
            /// The name of the role assignment. It can be any valid GUID.
            /// </param>
            public static RoleAssignment Get(this IRoleAssignmentsOperations operations, string scope, string roleAssignmentName)
            {
                return operations.GetAsync(scope, roleAssignmentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a role assignment by scope and name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the operation or resource. Valid scopes are: subscription
            /// (format: '/subscriptions/{subscriptionId}'), resource group (format:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
            /// resource (format:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
            /// </param>
            /// <param name='roleAssignmentName'>
            /// The name of the role assignment. It can be any valid GUID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RoleAssignment> GetAsync(this IRoleAssignmentsOperations operations, string scope, string roleAssignmentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(scope, roleAssignmentName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a role assignment by scope and name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the operation or resource. Valid scopes are: subscription
            /// (format: '/subscriptions/{subscriptionId}'), resource group (format:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
            /// resource (format:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
            /// </param>
            /// <param name='roleAssignmentName'>
            /// The name of the role assignment. It can be any valid GUID.
            /// </param>
            /// <param name='parameters'>
            /// Parameters for the role assignment.
            /// </param>
            public static RoleAssignment Create(this IRoleAssignmentsOperations operations, string scope, string roleAssignmentName, RoleAssignmentCreateParameters parameters)
            {
                return operations.CreateAsync(scope, roleAssignmentName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a role assignment by scope and name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the operation or resource. Valid scopes are: subscription
            /// (format: '/subscriptions/{subscriptionId}'), resource group (format:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
            /// resource (format:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
            /// </param>
            /// <param name='roleAssignmentName'>
            /// The name of the role assignment. It can be any valid GUID.
            /// </param>
            /// <param name='parameters'>
            /// Parameters for the role assignment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RoleAssignment> CreateAsync(this IRoleAssignmentsOperations operations, string scope, string roleAssignmentName, RoleAssignmentCreateParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(scope, roleAssignmentName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a role assignment by scope and name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the operation or resource. Valid scopes are: subscription
            /// (format: '/subscriptions/{subscriptionId}'), resource group (format:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
            /// resource (format:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
            /// </param>
            /// <param name='roleAssignmentName'>
            /// The name of the role assignment. It can be any valid GUID.
            /// </param>
            public static RoleAssignment Delete(this IRoleAssignmentsOperations operations, string scope, string roleAssignmentName)
            {
                return operations.DeleteAsync(scope, roleAssignmentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a role assignment by scope and name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the operation or resource. Valid scopes are: subscription
            /// (format: '/subscriptions/{subscriptionId}'), resource group (format:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
            /// resource (format:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
            /// </param>
            /// <param name='roleAssignmentName'>
            /// The name of the role assignment. It can be any valid GUID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RoleAssignment> DeleteAsync(this IRoleAssignmentsOperations operations, string scope, string roleAssignmentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(scope, roleAssignmentName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Validate a role assignment create or update operation by scope and name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the operation or resource. Valid scopes are: subscription
            /// (format: '/subscriptions/{subscriptionId}'), resource group (format:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
            /// resource (format:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
            /// </param>
            /// <param name='roleAssignmentName'>
            /// The name of the role assignment. It can be any valid GUID.
            /// </param>
            /// <param name='parameters'>
            /// Parameters for the role assignment.
            /// </param>
            public static ValidationResponse Validate(this IRoleAssignmentsOperations operations, string scope, string roleAssignmentName, RoleAssignmentCreateParameters parameters)
            {
                return operations.ValidateAsync(scope, roleAssignmentName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Validate a role assignment create or update operation by scope and name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the operation or resource. Valid scopes are: subscription
            /// (format: '/subscriptions/{subscriptionId}'), resource group (format:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
            /// resource (format:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
            /// </param>
            /// <param name='roleAssignmentName'>
            /// The name of the role assignment. It can be any valid GUID.
            /// </param>
            /// <param name='parameters'>
            /// Parameters for the role assignment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ValidationResponse> ValidateAsync(this IRoleAssignmentsOperations operations, string scope, string roleAssignmentName, RoleAssignmentCreateParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ValidateWithHttpMessagesAsync(scope, roleAssignmentName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all role assignments that apply to a scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the operation or resource. Valid scopes are: subscription
            /// (format: '/subscriptions/{subscriptionId}'), resource group (format:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
            /// resource (format:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='skipToken'>
            /// The skipToken to apply on the operation. Use $skipToken={skiptoken} to
            /// return paged role assignments following the skipToken passed. Only
            /// supported on provider level calls.
            /// </param>
            public static IPage<RoleAssignment> ListForScope(this IRoleAssignmentsOperations operations, string scope, ODataQuery<RoleAssignmentFilter> odataQuery = default(ODataQuery<RoleAssignmentFilter>), string skipToken = default(string))
            {
                return operations.ListForScopeAsync(scope, odataQuery, skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all role assignments that apply to a scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the operation or resource. Valid scopes are: subscription
            /// (format: '/subscriptions/{subscriptionId}'), resource group (format:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
            /// resource (format:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='skipToken'>
            /// The skipToken to apply on the operation. Use $skipToken={skiptoken} to
            /// return paged role assignments following the skipToken passed. Only
            /// supported on provider level calls.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RoleAssignment>> ListForScopeAsync(this IRoleAssignmentsOperations operations, string scope, ODataQuery<RoleAssignmentFilter> odataQuery = default(ODataQuery<RoleAssignmentFilter>), string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForScopeWithHttpMessagesAsync(scope, odataQuery, skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a role assignment by ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleAssignmentId'>
            /// The fully qualified ID of the role assignment including scope, resource
            /// name, and resource type. Format:
            /// /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}.
            /// Example:
            /// /subscriptions/&lt;SUB_ID&gt;/resourcegroups/&lt;RESOURCE_GROUP&gt;/providers/Microsoft.Authorization/roleAssignments/&lt;ROLE_ASSIGNMENT_NAME&gt;
            /// </param>
            public static RoleAssignment GetById(this IRoleAssignmentsOperations operations, string roleAssignmentId)
            {
                return operations.GetByIdAsync(roleAssignmentId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a role assignment by ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleAssignmentId'>
            /// The fully qualified ID of the role assignment including scope, resource
            /// name, and resource type. Format:
            /// /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}.
            /// Example:
            /// /subscriptions/&lt;SUB_ID&gt;/resourcegroups/&lt;RESOURCE_GROUP&gt;/providers/Microsoft.Authorization/roleAssignments/&lt;ROLE_ASSIGNMENT_NAME&gt;
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RoleAssignment> GetByIdAsync(this IRoleAssignmentsOperations operations, string roleAssignmentId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByIdWithHttpMessagesAsync(roleAssignmentId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a role assignment by ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleAssignmentId'>
            /// The fully qualified ID of the role assignment including scope, resource
            /// name, and resource type. Format:
            /// /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}.
            /// Example:
            /// /subscriptions/&lt;SUB_ID&gt;/resourcegroups/&lt;RESOURCE_GROUP&gt;/providers/Microsoft.Authorization/roleAssignments/&lt;ROLE_ASSIGNMENT_NAME&gt;
            /// </param>
            /// <param name='parameters'>
            /// Parameters for the role assignment.
            /// </param>
            public static RoleAssignment CreateById(this IRoleAssignmentsOperations operations, string roleAssignmentId, RoleAssignmentCreateParameters parameters)
            {
                return operations.CreateByIdAsync(roleAssignmentId, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a role assignment by ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleAssignmentId'>
            /// The fully qualified ID of the role assignment including scope, resource
            /// name, and resource type. Format:
            /// /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}.
            /// Example:
            /// /subscriptions/&lt;SUB_ID&gt;/resourcegroups/&lt;RESOURCE_GROUP&gt;/providers/Microsoft.Authorization/roleAssignments/&lt;ROLE_ASSIGNMENT_NAME&gt;
            /// </param>
            /// <param name='parameters'>
            /// Parameters for the role assignment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RoleAssignment> CreateByIdAsync(this IRoleAssignmentsOperations operations, string roleAssignmentId, RoleAssignmentCreateParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateByIdWithHttpMessagesAsync(roleAssignmentId, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a role assignment by ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleAssignmentId'>
            /// The fully qualified ID of the role assignment including scope, resource
            /// name, and resource type. Format:
            /// /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}.
            /// Example:
            /// /subscriptions/&lt;SUB_ID&gt;/resourcegroups/&lt;RESOURCE_GROUP&gt;/providers/Microsoft.Authorization/roleAssignments/&lt;ROLE_ASSIGNMENT_NAME&gt;
            /// </param>
            public static RoleAssignment DeleteById(this IRoleAssignmentsOperations operations, string roleAssignmentId)
            {
                return operations.DeleteByIdAsync(roleAssignmentId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a role assignment by ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleAssignmentId'>
            /// The fully qualified ID of the role assignment including scope, resource
            /// name, and resource type. Format:
            /// /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}.
            /// Example:
            /// /subscriptions/&lt;SUB_ID&gt;/resourcegroups/&lt;RESOURCE_GROUP&gt;/providers/Microsoft.Authorization/roleAssignments/&lt;ROLE_ASSIGNMENT_NAME&gt;
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RoleAssignment> DeleteByIdAsync(this IRoleAssignmentsOperations operations, string roleAssignmentId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteByIdWithHttpMessagesAsync(roleAssignmentId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Validate a role assignment create or update operation by ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleAssignmentId'>
            /// The fully qualified ID of the role assignment including scope, resource
            /// name, and resource type. Format:
            /// /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}.
            /// Example:
            /// /subscriptions/&lt;SUB_ID&gt;/resourcegroups/&lt;RESOURCE_GROUP&gt;/providers/Microsoft.Authorization/roleAssignments/&lt;ROLE_ASSIGNMENT_NAME&gt;
            /// </param>
            /// <param name='parameters'>
            /// Parameters for the role assignment.
            /// </param>
            public static ValidationResponse ValidateById(this IRoleAssignmentsOperations operations, string roleAssignmentId, RoleAssignmentCreateParameters parameters)
            {
                return operations.ValidateByIdAsync(roleAssignmentId, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Validate a role assignment create or update operation by ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleAssignmentId'>
            /// The fully qualified ID of the role assignment including scope, resource
            /// name, and resource type. Format:
            /// /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}.
            /// Example:
            /// /subscriptions/&lt;SUB_ID&gt;/resourcegroups/&lt;RESOURCE_GROUP&gt;/providers/Microsoft.Authorization/roleAssignments/&lt;ROLE_ASSIGNMENT_NAME&gt;
            /// </param>
            /// <param name='parameters'>
            /// Parameters for the role assignment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ValidationResponse> ValidateByIdAsync(this IRoleAssignmentsOperations operations, string roleAssignmentId, RoleAssignmentCreateParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ValidateByIdWithHttpMessagesAsync(roleAssignmentId, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all role assignments that apply to a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<RoleAssignment> ListForSubscriptionNext(this IRoleAssignmentsOperations operations, string nextPageLink)
            {
                return operations.ListForSubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all role assignments that apply to a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RoleAssignment>> ListForSubscriptionNextAsync(this IRoleAssignmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForSubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all role assignments that apply to a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<RoleAssignment> ListForResourceGroupNext(this IRoleAssignmentsOperations operations, string nextPageLink)
            {
                return operations.ListForResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all role assignments that apply to a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RoleAssignment>> ListForResourceGroupNextAsync(this IRoleAssignmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all role assignments that apply to a resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<RoleAssignment> ListForResourceNext(this IRoleAssignmentsOperations operations, string nextPageLink)
            {
                return operations.ListForResourceNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all role assignments that apply to a resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RoleAssignment>> ListForResourceNextAsync(this IRoleAssignmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForResourceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all role assignments that apply to a scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<RoleAssignment> ListForScopeNext(this IRoleAssignmentsOperations operations, string nextPageLink)
            {
                return operations.ListForScopeNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all role assignments that apply to a scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RoleAssignment>> ListForScopeNextAsync(this IRoleAssignmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForScopeNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
