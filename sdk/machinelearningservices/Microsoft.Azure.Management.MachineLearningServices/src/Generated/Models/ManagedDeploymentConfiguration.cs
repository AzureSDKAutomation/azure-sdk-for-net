// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.MachineLearningServices.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    [Newtonsoft.Json.JsonObject("Managed")]
    public partial class ManagedDeploymentConfiguration : DeploymentConfigurationBase
    {
        /// <summary>
        /// Initializes a new instance of the ManagedDeploymentConfiguration
        /// class.
        /// </summary>
        public ManagedDeploymentConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ManagedDeploymentConfiguration
        /// class.
        /// </summary>
        /// <param name="osType">Possible values include: 'Linux',
        /// 'Windows'</param>
        public ManagedDeploymentConfiguration(bool? appInsightsEnabled = default(bool?), int? maxConcurrentRequestsPerInstance = default(int?), int? maxQueueWaitMs = default(int?), int? scoringTimeoutMs = default(int?), LivenessProbeRequirements livenessProbeRequirements = default(LivenessProbeRequirements), string instanceType = default(string), string osType = default(string), LivenessProbeRequirements readinessProbeRequirements = default(LivenessProbeRequirements))
            : base(appInsightsEnabled, maxConcurrentRequestsPerInstance, maxQueueWaitMs, scoringTimeoutMs, livenessProbeRequirements)
        {
            InstanceType = instanceType;
            OsType = osType;
            ReadinessProbeRequirements = readinessProbeRequirements;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "instanceType")]
        public string InstanceType { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Linux', 'Windows'
        /// </summary>
        [JsonProperty(PropertyName = "osType")]
        public string OsType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "readinessProbeRequirements")]
        public LivenessProbeRequirements ReadinessProbeRequirements { get; set; }

    }
}
