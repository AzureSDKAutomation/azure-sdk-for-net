// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.MachineLearningServices.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class DatastoreCredentials
    {
        /// <summary>
        /// Initializes a new instance of the DatastoreCredentials class.
        /// </summary>
        public DatastoreCredentials()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DatastoreCredentials class.
        /// </summary>
        /// <param name="datastoreCredentialsType">Credential type used to
        /// authentication with storage. Possible values include: 'AccountKey',
        /// 'Certificate', 'None', 'Sas', 'ServicePrincipal',
        /// 'SqlAdmin'</param>
        /// <param name="accountKey">Storage account key
        /// authentication.</param>
        /// <param name="certificate">Service principal certificate
        /// authentication.</param>
        /// <param name="sas">Storage container SAS token
        /// authentication.</param>
        /// <param name="servicePrincipal">Service principal password
        /// authentication.</param>
        /// <param name="sqlAdmin">SQL user/password authentication.</param>
        public DatastoreCredentials(string datastoreCredentialsType, AccountKeySection accountKey = default(AccountKeySection), CertificateSection certificate = default(CertificateSection), SasSection sas = default(SasSection), ServicePrincipalSection servicePrincipal = default(ServicePrincipalSection), SqlAdminSection sqlAdmin = default(SqlAdminSection))
        {
            DatastoreCredentialsType = datastoreCredentialsType;
            AccountKey = accountKey;
            Certificate = certificate;
            Sas = sas;
            ServicePrincipal = servicePrincipal;
            SqlAdmin = sqlAdmin;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets credential type used to authentication with storage.
        /// Possible values include: 'AccountKey', 'Certificate', 'None',
        /// 'Sas', 'ServicePrincipal', 'SqlAdmin'
        /// </summary>
        [JsonProperty(PropertyName = "datastoreCredentialsType")]
        public string DatastoreCredentialsType { get; set; }

        /// <summary>
        /// Gets or sets storage account key authentication.
        /// </summary>
        [JsonProperty(PropertyName = "accountKey")]
        public AccountKeySection AccountKey { get; set; }

        /// <summary>
        /// Gets or sets service principal certificate authentication.
        /// </summary>
        [JsonProperty(PropertyName = "certificate")]
        public CertificateSection Certificate { get; set; }

        /// <summary>
        /// Gets or sets storage container SAS token authentication.
        /// </summary>
        [JsonProperty(PropertyName = "sas")]
        public SasSection Sas { get; set; }

        /// <summary>
        /// Gets or sets service principal password authentication.
        /// </summary>
        [JsonProperty(PropertyName = "servicePrincipal")]
        public ServicePrincipalSection ServicePrincipal { get; set; }

        /// <summary>
        /// Gets or sets SQL user/password authentication.
        /// </summary>
        [JsonProperty(PropertyName = "sqlAdmin")]
        public SqlAdminSection SqlAdmin { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (DatastoreCredentialsType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DatastoreCredentialsType");
            }
            if (Certificate != null)
            {
                Certificate.Validate();
            }
            if (ServicePrincipal != null)
            {
                ServicePrincipal.Validate();
            }
            if (SqlAdmin != null)
            {
                SqlAdmin.Validate();
            }
        }
    }
}
