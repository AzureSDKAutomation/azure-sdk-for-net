// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.MachineLearningServices.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Forecasting specific parameters.
    /// </summary>
    public partial class ForecastingSettings
    {
        /// <summary>
        /// Initializes a new instance of the ForecastingSettings class.
        /// </summary>
        public ForecastingSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ForecastingSettings class.
        /// </summary>
        /// <param name="forecastingCountryOrRegion">Country or region for
        /// holidays for forecasting tasks.
        /// These should be ISO 3166 two-letter country/region codes, for
        /// example 'US' or 'GB'.</param>
        /// <param name="timeColumnName">Time column name</param>
        /// <param name="targetLags">Target Lags.</param>
        /// <param name="targetRollingWindowSize">Forecasting Window
        /// Size</param>
        /// <param name="forecastHorizon">Forecasting Horizon.</param>
        /// <param name="timeSeriesIdColumnNames">Time series column
        /// names</param>
        /// <param name="enableDnnTraining">Enable recommendation of DNN
        /// models.</param>
        public ForecastingSettings(string forecastingCountryOrRegion = default(string), string timeColumnName = default(string), IList<int?> targetLags = default(IList<int?>), int? targetRollingWindowSize = default(int?), int? forecastHorizon = default(int?), IList<string> timeSeriesIdColumnNames = default(IList<string>), bool? enableDnnTraining = default(bool?))
        {
            ForecastingCountryOrRegion = forecastingCountryOrRegion;
            TimeColumnName = timeColumnName;
            TargetLags = targetLags;
            TargetRollingWindowSize = targetRollingWindowSize;
            ForecastHorizon = forecastHorizon;
            TimeSeriesIdColumnNames = timeSeriesIdColumnNames;
            EnableDnnTraining = enableDnnTraining;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets country or region for holidays for forecasting tasks.
        /// These should be ISO 3166 two-letter country/region codes, for
        /// example 'US' or 'GB'.
        /// </summary>
        [JsonProperty(PropertyName = "forecastingCountryOrRegion")]
        public string ForecastingCountryOrRegion { get; set; }

        /// <summary>
        /// Gets or sets time column name
        /// </summary>
        [JsonProperty(PropertyName = "timeColumnName")]
        public string TimeColumnName { get; set; }

        /// <summary>
        /// Gets or sets target Lags.
        /// </summary>
        [JsonProperty(PropertyName = "targetLags")]
        public IList<int?> TargetLags { get; set; }

        /// <summary>
        /// Gets or sets forecasting Window Size
        /// </summary>
        [JsonProperty(PropertyName = "targetRollingWindowSize")]
        public int? TargetRollingWindowSize { get; set; }

        /// <summary>
        /// Gets or sets forecasting Horizon.
        /// </summary>
        [JsonProperty(PropertyName = "forecastHorizon")]
        public int? ForecastHorizon { get; set; }

        /// <summary>
        /// Gets or sets time series column names
        /// </summary>
        [JsonProperty(PropertyName = "timeSeriesIdColumnNames")]
        public IList<string> TimeSeriesIdColumnNames { get; set; }

        /// <summary>
        /// Gets or sets enable recommendation of DNN models.
        /// </summary>
        [JsonProperty(PropertyName = "enableDnnTraining")]
        public bool? EnableDnnTraining { get; set; }

    }
}
