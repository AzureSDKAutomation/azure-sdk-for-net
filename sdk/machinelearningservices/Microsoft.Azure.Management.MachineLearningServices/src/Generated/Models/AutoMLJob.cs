// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.MachineLearningServices.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// AutoML Job definition
    /// </summary>
    [Newtonsoft.Json.JsonObject("AutoML")]
    public partial class AutoMLJob : ComputeJobBase
    {
        /// <summary>
        /// Initializes a new instance of the AutoMLJob class.
        /// </summary>
        public AutoMLJob()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AutoMLJob class.
        /// </summary>
        /// <param name="computeBinding">Compute binding for the job.</param>
        /// <param name="provisioningState">Possible values include:
        /// 'Succeeded', 'Failed', 'Canceled', 'InProgress'</param>
        /// <param name="interactionEndpoints">Dictionary of endpoint URIs,
        /// keyed by enumerated job endpoints.
        /// For local jobs, a job endpoint will have a value of
        /// FileStreamObject.</param>
        /// <param name="description">The asset description text.</param>
        /// <param name="tags">Tag dictionary. Tags can be added, removed, and
        /// updated.</param>
        /// <param name="properties">The asset property dictionary.</param>
        /// <param name="experimentName">The name of the experiment the job
        /// belongs to. If not set, the job is placed in the "Default"
        /// experiment.</param>
        /// <param name="output">Location of the job output logs and
        /// artifacts.</param>
        /// <param name="priority">Job priority for scheduling policy. Only
        /// applies to AMLCompute.
        /// Private preview  is only for whitelisted customers</param>
        /// <param name="status">Status of the job. Possible values include:
        /// 'NotStarted', 'Starting', 'Provisioning', 'Preparing', 'Queued',
        /// 'Running', 'Finalizing', 'CancelRequested', 'Completed', 'Failed',
        /// 'Canceled', 'NotResponding', 'Paused'</param>
        /// <param name="generalSettings">General Settings</param>
        /// <param name="limitSettings">Limit Settings</param>
        /// <param name="dataSettings">Collection of registered Tabular Dataset
        /// Ids required for training.</param>
        /// <param name="featurizationSettings">Featurization related
        /// configuration.</param>
        /// <param name="forecastingSettings">Forecasting experiment specific
        /// configuration.</param>
        /// <param name="trainingSettings">Advanced configuration settings for
        /// an AutoML Job.</param>
        public AutoMLJob(ComputeBinding computeBinding, string provisioningState = default(string), JobBaseInteractionEndpoints interactionEndpoints = default(JobBaseInteractionEndpoints), string description = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), IDictionary<string, string> properties = default(IDictionary<string, string>), string experimentName = default(string), JobOutput output = default(JobOutput), int? priority = default(int?), string status = default(string), GeneralSettings generalSettings = default(GeneralSettings), ExperimentLimits limitSettings = default(ExperimentLimits), DataSettings dataSettings = default(DataSettings), FeaturizationSettings featurizationSettings = default(FeaturizationSettings), ForecastingSettings forecastingSettings = default(ForecastingSettings), TrainingSettings trainingSettings = default(TrainingSettings))
            : base(computeBinding, provisioningState, interactionEndpoints, description, tags, properties, experimentName, output, priority)
        {
            Status = status;
            GeneralSettings = generalSettings;
            LimitSettings = limitSettings;
            DataSettings = dataSettings;
            FeaturizationSettings = featurizationSettings;
            ForecastingSettings = forecastingSettings;
            TrainingSettings = trainingSettings;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets status of the job. Possible values include: 'NotStarted',
        /// 'Starting', 'Provisioning', 'Preparing', 'Queued', 'Running',
        /// 'Finalizing', 'CancelRequested', 'Completed', 'Failed', 'Canceled',
        /// 'NotResponding', 'Paused'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; private set; }

        /// <summary>
        /// Gets or sets general Settings
        /// </summary>
        [JsonProperty(PropertyName = "generalSettings")]
        public GeneralSettings GeneralSettings { get; set; }

        /// <summary>
        /// Gets or sets limit Settings
        /// </summary>
        [JsonProperty(PropertyName = "limitSettings")]
        public ExperimentLimits LimitSettings { get; set; }

        /// <summary>
        /// Gets or sets collection of registered Tabular Dataset Ids required
        /// for training.
        /// </summary>
        [JsonProperty(PropertyName = "dataSettings")]
        public DataSettings DataSettings { get; set; }

        /// <summary>
        /// Gets or sets featurization related configuration.
        /// </summary>
        [JsonProperty(PropertyName = "featurizationSettings")]
        public FeaturizationSettings FeaturizationSettings { get; set; }

        /// <summary>
        /// Gets or sets forecasting experiment specific configuration.
        /// </summary>
        [JsonProperty(PropertyName = "forecastingSettings")]
        public ForecastingSettings ForecastingSettings { get; set; }

        /// <summary>
        /// Gets or sets advanced configuration settings for an AutoML Job.
        /// </summary>
        [JsonProperty(PropertyName = "trainingSettings")]
        public TrainingSettings TrainingSettings { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
