// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.MachineLearningServices.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class CertificateSection
    {
        /// <summary>
        /// Initializes a new instance of the CertificateSection class.
        /// </summary>
        public CertificateSection()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CertificateSection class.
        /// </summary>
        /// <param name="tenantId">ID of the tenant to which the service
        /// principal belongs.</param>
        /// <param name="clientId">Service principal client ID.</param>
        /// <param name="thumbprint">Thumbprint of the certificate used for
        /// authentication.</param>
        /// <param name="authorityUrl">Authority URL used for
        /// authentication.</param>
        /// <param name="resourceUri">Resource the service principal has access
        /// to.</param>
        /// <param name="certificate">Service principal certificate.</param>
        public CertificateSection(System.Guid tenantId, System.Guid clientId, string thumbprint, string authorityUrl = default(string), string resourceUri = default(string), string certificate = default(string))
        {
            AuthorityUrl = authorityUrl;
            ResourceUri = resourceUri;
            TenantId = tenantId;
            ClientId = clientId;
            Certificate = certificate;
            Thumbprint = thumbprint;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets authority URL used for authentication.
        /// </summary>
        [JsonProperty(PropertyName = "authorityUrl")]
        public string AuthorityUrl { get; set; }

        /// <summary>
        /// Gets or sets resource the service principal has access to.
        /// </summary>
        [JsonProperty(PropertyName = "resourceUri")]
        public string ResourceUri { get; set; }

        /// <summary>
        /// Gets or sets ID of the tenant to which the service principal
        /// belongs.
        /// </summary>
        [JsonProperty(PropertyName = "tenantId")]
        public System.Guid TenantId { get; set; }

        /// <summary>
        /// Gets or sets service principal client ID.
        /// </summary>
        [JsonProperty(PropertyName = "clientId")]
        public System.Guid ClientId { get; set; }

        /// <summary>
        /// Gets or sets service principal certificate.
        /// </summary>
        [JsonProperty(PropertyName = "certificate")]
        public string Certificate { get; set; }

        /// <summary>
        /// Gets or sets thumbprint of the certificate used for authentication.
        /// </summary>
        [JsonProperty(PropertyName = "thumbprint")]
        public string Thumbprint { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Thumbprint == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Thumbprint");
            }
            if (Thumbprint != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(Thumbprint, "[a-zA-Z0-9_]"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "Thumbprint", "[a-zA-Z0-9_]");
                }
            }
        }
    }
}
