// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.MachineLearningServices
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for LinkedWorkspacesOperations.
    /// </summary>
    public static partial class LinkedWorkspacesOperationsExtensions
    {
            /// <summary>
            /// List linked workspaces under a workspace per some query criteria.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// Name of Azure Machine Learning workspace.
            /// </param>
            /// <param name='linkSubscriptionId'>
            /// The subscriptionid of the linked workspace.
            /// </param>
            /// <param name='linkResourceGroup'>
            /// The resource group name of the linked workspace.
            /// </param>
            /// <param name='linkResourceName'>
            /// The resource name of the linked workspace.
            /// </param>
            /// <param name='linkResourceId'>
            /// The resourceId of the linked workspace.
            /// </param>
            /// <param name='linkType'>
            /// The type of the linked workspace. Possible values include: 'Synapse'
            /// </param>
            /// <param name='uaiResourceId'>
            /// The resourceId of the user assigned identity for the linked workspace.
            /// </param>
            public static IList<LinkedWorkspace> List(this ILinkedWorkspacesOperations operations, string resourceGroupName, string workspaceName, string linkSubscriptionId = default(string), string linkResourceGroup = default(string), string linkResourceName = default(string), string linkResourceId = default(string), string linkType = default(string), string uaiResourceId = default(string))
            {
                return operations.ListAsync(resourceGroupName, workspaceName, linkSubscriptionId, linkResourceGroup, linkResourceName, linkResourceId, linkType, uaiResourceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List linked workspaces under a workspace per some query criteria.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// Name of Azure Machine Learning workspace.
            /// </param>
            /// <param name='linkSubscriptionId'>
            /// The subscriptionid of the linked workspace.
            /// </param>
            /// <param name='linkResourceGroup'>
            /// The resource group name of the linked workspace.
            /// </param>
            /// <param name='linkResourceName'>
            /// The resource name of the linked workspace.
            /// </param>
            /// <param name='linkResourceId'>
            /// The resourceId of the linked workspace.
            /// </param>
            /// <param name='linkType'>
            /// The type of the linked workspace. Possible values include: 'Synapse'
            /// </param>
            /// <param name='uaiResourceId'>
            /// The resourceId of the user assigned identity for the linked workspace.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LinkedWorkspace>> ListAsync(this ILinkedWorkspacesOperations operations, string resourceGroupName, string workspaceName, string linkSubscriptionId = default(string), string linkResourceGroup = default(string), string linkResourceName = default(string), string linkResourceId = default(string), string linkType = default(string), string uaiResourceId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, workspaceName, linkSubscriptionId, linkResourceGroup, linkResourceName, linkResourceId, linkType, uaiResourceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a new linked workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// Name of Azure Machine Learning workspace.
            /// </param>
            /// <param name='parameters'>
            /// The object for adding a new linked workspace
            /// </param>
            public static LinkedWorkspace Create(this ILinkedWorkspacesOperations operations, string resourceGroupName, string workspaceName, LinkedWorkspaceCreateDto parameters)
            {
                return operations.CreateAsync(resourceGroupName, workspaceName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a new linked workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// Name of Azure Machine Learning workspace.
            /// </param>
            /// <param name='parameters'>
            /// The object for adding a new linked workspace
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LinkedWorkspace> CreateAsync(this ILinkedWorkspacesOperations operations, string resourceGroupName, string workspaceName, LinkedWorkspaceCreateDto parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, workspaceName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the detail of a linked workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// Name of Azure Machine Learning workspace.
            /// </param>
            /// <param name='linkName'>
            /// Friendly name of the linked workspace
            /// </param>
            public static LinkedWorkspace Get(this ILinkedWorkspacesOperations operations, string resourceGroupName, string workspaceName, string linkName)
            {
                return operations.GetAsync(resourceGroupName, workspaceName, linkName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the detail of a linked workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// Name of Azure Machine Learning workspace.
            /// </param>
            /// <param name='linkName'>
            /// Friendly name of the linked workspace
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LinkedWorkspace> GetAsync(this ILinkedWorkspacesOperations operations, string resourceGroupName, string workspaceName, string linkName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, workspaceName, linkName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the detail of a linked workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// Name of Azure Machine Learning workspace.
            /// </param>
            /// <param name='linkName'>
            /// Friendly name of the linked workspace
            /// </param>
            /// <param name='parameters'>
            /// The object for updating an existing linked workspace
            /// </param>
            public static LinkedWorkspace Update(this ILinkedWorkspacesOperations operations, string resourceGroupName, string workspaceName, string linkName, LinkedWorkspaceUpdateDto parameters)
            {
                return operations.UpdateAsync(resourceGroupName, workspaceName, linkName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the detail of a linked workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// Name of Azure Machine Learning workspace.
            /// </param>
            /// <param name='linkName'>
            /// Friendly name of the linked workspace
            /// </param>
            /// <param name='parameters'>
            /// The object for updating an existing linked workspace
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LinkedWorkspace> UpdateAsync(this ILinkedWorkspacesOperations operations, string resourceGroupName, string workspaceName, string linkName, LinkedWorkspaceUpdateDto parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, workspaceName, linkName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a linked workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// Name of Azure Machine Learning workspace.
            /// </param>
            /// <param name='linkName'>
            /// Friendly name of the linked workspace
            /// </param>
            public static void Delete(this ILinkedWorkspacesOperations operations, string resourceGroupName, string workspaceName, string linkName)
            {
                operations.DeleteAsync(resourceGroupName, workspaceName, linkName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a linked workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// Name of Azure Machine Learning workspace.
            /// </param>
            /// <param name='linkName'>
            /// Friendly name of the linked workspace
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ILinkedWorkspacesOperations operations, string resourceGroupName, string workspaceName, string linkName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, linkName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
