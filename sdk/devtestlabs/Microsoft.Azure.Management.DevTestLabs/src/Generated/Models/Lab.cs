// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DevTestLabs.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A lab.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Lab : Resource
    {
        /// <summary>
        /// Initializes a new instance of the Lab class.
        /// </summary>
        public Lab()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Lab class.
        /// </summary>
        /// <param name="id">The identifier of the resource.</param>
        /// <param name="name">The name of the resource.</param>
        /// <param name="type">The type of the resource.</param>
        /// <param name="location">The location of the resource.</param>
        /// <param name="tags">The tags of the resource.</param>
        /// <param name="defaultStorageAccount">The lab's default storage
        /// account.</param>
        /// <param name="defaultPremiumStorageAccount">The lab's default
        /// premium storage account.</param>
        /// <param name="artifactsStorageAccount">The lab's artifact storage
        /// account.</param>
        /// <param name="premiumDataDiskStorageAccount">The lab's premium data
        /// disk storage account.</param>
        /// <param name="vaultName">The lab's Key vault.</param>
        /// <param name="labStorageType">Type of storage used by the lab. It
        /// can be either Premium or Standard. Default is Premium. Possible
        /// values include: 'Standard', 'Premium', 'StandardSSD'</param>
        /// <param name="mandatoryArtifactsResourceIdsLinux">The ordered list
        /// of artifact resource IDs that should be applied on all Linux VM
        /// creations by default, prior to the artifacts specified by the
        /// user.</param>
        /// <param name="mandatoryArtifactsResourceIdsWindows">The ordered list
        /// of artifact resource IDs that should be applied on all Windows VM
        /// creations by default, prior to the artifacts specified by the
        /// user.</param>
        /// <param name="createdDate">The creation date of the lab.</param>
        /// <param name="premiumDataDisks">The setting to enable usage of
        /// premium data disks.
        /// When its value is 'Enabled', creation of standard or premium data
        /// disks is allowed.
        /// When its value is 'Disabled', only creation of standard data disks
        /// is allowed. Possible values include: 'Disabled', 'Enabled'</param>
        /// <param name="environmentPermission">The access rights to be granted
        /// to the user when provisioning an environment. Possible values
        /// include: 'Reader', 'Contributor'</param>
        /// <param name="announcement">The properties of any lab announcement
        /// associated with this lab</param>
        /// <param name="support">The properties of any lab support message
        /// associated with this lab</param>
        /// <param name="vmCreationResourceGroupId">The resource group ID in
        /// which all new lab virtual machines will be created. Ex:
        /// /subscriptions/subId/resourceGroups/rgName To let DevTest Labs
        /// manage resource group creation, set this value to null.</param>
        /// <param name="publicIpId">The public IP address for the lab's load
        /// balancer.</param>
        /// <param name="loadBalancerId">The load balancer used to for lab VMs
        /// that use shared IP address.</param>
        /// <param name="networkSecurityGroupId">The Network Security Group
        /// attached to the lab VMs Network interfaces to restrict open
        /// ports.</param>
        /// <param name="extendedProperties">Extended properties of the lab
        /// used for experimental features</param>
        /// <param name="browserConnect">Is browser connect enabled for the
        /// lab. Possible values include: 'Enabled', 'Disabled'</param>
        /// <param name="disableAutoUpgradeCseMinorVersion">Is auto upgrade of
        /// CSE disabled for the lab?</param>
        /// <param name="managementIdentities">List of identities which can be
        /// used for management of resources.</param>
        /// <param name="isolateLabResources">Indicates whether to create Lab
        /// resources (e.g. Storage accounts and Key Vaults) in network
        /// isolation. Possible values include: 'Enabled', 'Disabled'</param>
        /// <param name="encryption">Mechanism used for encryption of resources
        /// in a lab (such as virtual machines).</param>
        /// <param name="provisioningState">The provisioning status of the
        /// resource.</param>
        /// <param name="uniqueIdentifier">The unique immutable identifier of a
        /// resource (Guid).</param>
        /// <param name="identity">The identity of the resource.</param>
        public Lab(string id = default(string), string name = default(string), string type = default(string), string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string defaultStorageAccount = default(string), string defaultPremiumStorageAccount = default(string), string artifactsStorageAccount = default(string), string premiumDataDiskStorageAccount = default(string), string vaultName = default(string), string labStorageType = default(string), IList<string> mandatoryArtifactsResourceIdsLinux = default(IList<string>), IList<string> mandatoryArtifactsResourceIdsWindows = default(IList<string>), System.DateTime? createdDate = default(System.DateTime?), string premiumDataDisks = default(string), string environmentPermission = default(string), LabAnnouncementProperties announcement = default(LabAnnouncementProperties), LabSupportProperties support = default(LabSupportProperties), string vmCreationResourceGroupId = default(string), string publicIpId = default(string), string loadBalancerId = default(string), string networkSecurityGroupId = default(string), IDictionary<string, string> extendedProperties = default(IDictionary<string, string>), string browserConnect = default(string), bool? disableAutoUpgradeCseMinorVersion = default(bool?), IDictionary<string, object> managementIdentities = default(IDictionary<string, object>), string isolateLabResources = default(string), Encryption encryption = default(Encryption), string provisioningState = default(string), string uniqueIdentifier = default(string), IdentityProperties identity = default(IdentityProperties))
            : base(id, name, type, location, tags)
        {
            DefaultStorageAccount = defaultStorageAccount;
            DefaultPremiumStorageAccount = defaultPremiumStorageAccount;
            ArtifactsStorageAccount = artifactsStorageAccount;
            PremiumDataDiskStorageAccount = premiumDataDiskStorageAccount;
            VaultName = vaultName;
            LabStorageType = labStorageType;
            MandatoryArtifactsResourceIdsLinux = mandatoryArtifactsResourceIdsLinux;
            MandatoryArtifactsResourceIdsWindows = mandatoryArtifactsResourceIdsWindows;
            CreatedDate = createdDate;
            PremiumDataDisks = premiumDataDisks;
            EnvironmentPermission = environmentPermission;
            Announcement = announcement;
            Support = support;
            VmCreationResourceGroupId = vmCreationResourceGroupId;
            PublicIpId = publicIpId;
            LoadBalancerId = loadBalancerId;
            NetworkSecurityGroupId = networkSecurityGroupId;
            ExtendedProperties = extendedProperties;
            BrowserConnect = browserConnect;
            DisableAutoUpgradeCseMinorVersion = disableAutoUpgradeCseMinorVersion;
            ManagementIdentities = managementIdentities;
            IsolateLabResources = isolateLabResources;
            Encryption = encryption;
            ProvisioningState = provisioningState;
            UniqueIdentifier = uniqueIdentifier;
            Identity = identity;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the lab's default storage account.
        /// </summary>
        [JsonProperty(PropertyName = "properties.defaultStorageAccount")]
        public string DefaultStorageAccount { get; private set; }

        /// <summary>
        /// Gets the lab's default premium storage account.
        /// </summary>
        [JsonProperty(PropertyName = "properties.defaultPremiumStorageAccount")]
        public string DefaultPremiumStorageAccount { get; private set; }

        /// <summary>
        /// Gets or sets the lab's artifact storage account.
        /// </summary>
        [JsonProperty(PropertyName = "properties.artifactsStorageAccount")]
        public string ArtifactsStorageAccount { get; set; }

        /// <summary>
        /// Gets the lab's premium data disk storage account.
        /// </summary>
        [JsonProperty(PropertyName = "properties.premiumDataDiskStorageAccount")]
        public string PremiumDataDiskStorageAccount { get; private set; }

        /// <summary>
        /// Gets the lab's Key vault.
        /// </summary>
        [JsonProperty(PropertyName = "properties.vaultName")]
        public string VaultName { get; private set; }

        /// <summary>
        /// Gets or sets type of storage used by the lab. It can be either
        /// Premium or Standard. Default is Premium. Possible values include:
        /// 'Standard', 'Premium', 'StandardSSD'
        /// </summary>
        [JsonProperty(PropertyName = "properties.labStorageType")]
        public string LabStorageType { get; set; }

        /// <summary>
        /// Gets or sets the ordered list of artifact resource IDs that should
        /// be applied on all Linux VM creations by default, prior to the
        /// artifacts specified by the user.
        /// </summary>
        [JsonProperty(PropertyName = "properties.mandatoryArtifactsResourceIdsLinux")]
        public IList<string> MandatoryArtifactsResourceIdsLinux { get; set; }

        /// <summary>
        /// Gets or sets the ordered list of artifact resource IDs that should
        /// be applied on all Windows VM creations by default, prior to the
        /// artifacts specified by the user.
        /// </summary>
        [JsonProperty(PropertyName = "properties.mandatoryArtifactsResourceIdsWindows")]
        public IList<string> MandatoryArtifactsResourceIdsWindows { get; set; }

        /// <summary>
        /// Gets the creation date of the lab.
        /// </summary>
        [JsonProperty(PropertyName = "properties.createdDate")]
        public System.DateTime? CreatedDate { get; private set; }

        /// <summary>
        /// Gets or sets the setting to enable usage of premium data disks.
        /// When its value is 'Enabled', creation of standard or premium data
        /// disks is allowed.
        /// When its value is 'Disabled', only creation of standard data disks
        /// is allowed. Possible values include: 'Disabled', 'Enabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.premiumDataDisks")]
        public string PremiumDataDisks { get; set; }

        /// <summary>
        /// Gets or sets the access rights to be granted to the user when
        /// provisioning an environment. Possible values include: 'Reader',
        /// 'Contributor'
        /// </summary>
        [JsonProperty(PropertyName = "properties.environmentPermission")]
        public string EnvironmentPermission { get; set; }

        /// <summary>
        /// Gets or sets the properties of any lab announcement associated with
        /// this lab
        /// </summary>
        [JsonProperty(PropertyName = "properties.announcement")]
        public LabAnnouncementProperties Announcement { get; set; }

        /// <summary>
        /// Gets or sets the properties of any lab support message associated
        /// with this lab
        /// </summary>
        [JsonProperty(PropertyName = "properties.support")]
        public LabSupportProperties Support { get; set; }

        /// <summary>
        /// Gets or sets the resource group ID in which all new lab virtual
        /// machines will be created. Ex:
        /// /subscriptions/subId/resourceGroups/rgName To let DevTest Labs
        /// manage resource group creation, set this value to null.
        /// </summary>
        [JsonProperty(PropertyName = "properties.vmCreationResourceGroupId")]
        public string VmCreationResourceGroupId { get; set; }

        /// <summary>
        /// Gets the public IP address for the lab's load balancer.
        /// </summary>
        [JsonProperty(PropertyName = "properties.publicIpId")]
        public string PublicIpId { get; private set; }

        /// <summary>
        /// Gets the load balancer used to for lab VMs that use shared IP
        /// address.
        /// </summary>
        [JsonProperty(PropertyName = "properties.loadBalancerId")]
        public string LoadBalancerId { get; private set; }

        /// <summary>
        /// Gets the Network Security Group attached to the lab VMs Network
        /// interfaces to restrict open ports.
        /// </summary>
        [JsonProperty(PropertyName = "properties.networkSecurityGroupId")]
        public string NetworkSecurityGroupId { get; private set; }

        /// <summary>
        /// Gets or sets extended properties of the lab used for experimental
        /// features
        /// </summary>
        [JsonProperty(PropertyName = "properties.extendedProperties")]
        public IDictionary<string, string> ExtendedProperties { get; set; }

        /// <summary>
        /// Gets or sets is browser connect enabled for the lab. Possible
        /// values include: 'Enabled', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.browserConnect")]
        public string BrowserConnect { get; set; }

        /// <summary>
        /// Gets or sets is auto upgrade of CSE disabled for the lab?
        /// </summary>
        [JsonProperty(PropertyName = "properties.disableAutoUpgradeCseMinorVersion")]
        public bool? DisableAutoUpgradeCseMinorVersion { get; set; }

        /// <summary>
        /// Gets or sets list of identities which can be used for management of
        /// resources.
        /// </summary>
        [JsonProperty(PropertyName = "properties.managementIdentities")]
        public IDictionary<string, object> ManagementIdentities { get; set; }

        /// <summary>
        /// Gets or sets indicates whether to create Lab resources (e.g.
        /// Storage accounts and Key Vaults) in network isolation. Possible
        /// values include: 'Enabled', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.isolateLabResources")]
        public string IsolateLabResources { get; set; }

        /// <summary>
        /// Gets or sets mechanism used for encryption of resources in a lab
        /// (such as virtual machines).
        /// </summary>
        [JsonProperty(PropertyName = "properties.encryption")]
        public Encryption Encryption { get; set; }

        /// <summary>
        /// Gets the provisioning status of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets the unique immutable identifier of a resource (Guid).
        /// </summary>
        [JsonProperty(PropertyName = "properties.uniqueIdentifier")]
        public string UniqueIdentifier { get; private set; }

        /// <summary>
        /// Gets or sets the identity of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "identity")]
        public IdentityProperties Identity { get; set; }

    }
}
