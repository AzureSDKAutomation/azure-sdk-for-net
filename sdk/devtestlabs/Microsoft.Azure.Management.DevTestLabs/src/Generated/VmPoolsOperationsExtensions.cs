// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DevTestLabs
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Azure.OData;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for VmPoolsOperations.
    /// </summary>
    public static partial class VmPoolsOperationsExtensions
    {
            /// <summary>
            /// List virtual machine pools in a given lab.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            public static IPage<VmPool> List(this IVmPoolsOperations operations, string resourceGroupName, string labName, ODataQuery<VmPool> odataQuery = default(ODataQuery<VmPool>))
            {
                return operations.ListAsync(resourceGroupName, labName, odataQuery).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List virtual machine pools in a given lab.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<VmPool>> ListAsync(this IVmPoolsOperations operations, string resourceGroupName, string labName, ODataQuery<VmPool> odataQuery = default(ODataQuery<VmPool>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, labName, odataQuery, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get virtual machine pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='name'>
            /// The name of the virtual machine pool.
            /// </param>
            /// <param name='expand'>
            /// Specify the $expand query. Example:
            /// 'properties($select=vmScalesetComputeId)'
            /// </param>
            public static VmPool Get(this IVmPoolsOperations operations, string resourceGroupName, string labName, string name, string expand = default(string))
            {
                return operations.GetAsync(resourceGroupName, labName, name, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get virtual machine pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='name'>
            /// The name of the virtual machine pool.
            /// </param>
            /// <param name='expand'>
            /// Specify the $expand query. Example:
            /// 'properties($select=vmScalesetComputeId)'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VmPool> GetAsync(this IVmPoolsOperations operations, string resourceGroupName, string labName, string name, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, labName, name, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or replace an existing virtual machine pool. This operation can take
            /// a while to complete.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='name'>
            /// The name of the virtual machine pool.
            /// </param>
            /// <param name='vmPool'>
            /// Represents a VM Pool.
            /// </param>
            public static VmPool CreateOrUpdate(this IVmPoolsOperations operations, string resourceGroupName, string labName, string name, VmPool vmPool)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, labName, name, vmPool).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or replace an existing virtual machine pool. This operation can take
            /// a while to complete.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='name'>
            /// The name of the virtual machine pool.
            /// </param>
            /// <param name='vmPool'>
            /// Represents a VM Pool.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VmPool> CreateOrUpdateAsync(this IVmPoolsOperations operations, string resourceGroupName, string labName, string name, VmPool vmPool, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, labName, name, vmPool, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete virtual machine pool. This operation can take a while to complete.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='name'>
            /// The name of the virtual machine pool.
            /// </param>
            public static void Delete(this IVmPoolsOperations operations, string resourceGroupName, string labName, string name)
            {
                operations.DeleteAsync(resourceGroupName, labName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete virtual machine pool. This operation can take a while to complete.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='name'>
            /// The name of the virtual machine pool.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IVmPoolsOperations operations, string resourceGroupName, string labName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, labName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Allows modifying tags of virtual machine pools. All other properties will
            /// be ignored.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='name'>
            /// The name of the virtual machine pool.
            /// </param>
            /// <param name='vmPool'>
            /// Represents a VM Pool.
            /// </param>
            public static VmPool Update(this IVmPoolsOperations operations, string resourceGroupName, string labName, string name, VmPoolFragment vmPool)
            {
                return operations.UpdateAsync(resourceGroupName, labName, name, vmPool).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Allows modifying tags of virtual machine pools. All other properties will
            /// be ignored.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='name'>
            /// The name of the virtual machine pool.
            /// </param>
            /// <param name='vmPool'>
            /// Represents a VM Pool.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VmPool> UpdateAsync(this IVmPoolsOperations operations, string resourceGroupName, string labName, string name, VmPoolFragment vmPool, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, labName, name, vmPool, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or replace an existing virtual machine pool. This operation can take
            /// a while to complete.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='name'>
            /// The name of the virtual machine pool.
            /// </param>
            /// <param name='vmPool'>
            /// Represents a VM Pool.
            /// </param>
            public static VmPool BeginCreateOrUpdate(this IVmPoolsOperations operations, string resourceGroupName, string labName, string name, VmPool vmPool)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, labName, name, vmPool).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or replace an existing virtual machine pool. This operation can take
            /// a while to complete.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='name'>
            /// The name of the virtual machine pool.
            /// </param>
            /// <param name='vmPool'>
            /// Represents a VM Pool.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VmPool> BeginCreateOrUpdateAsync(this IVmPoolsOperations operations, string resourceGroupName, string labName, string name, VmPool vmPool, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, labName, name, vmPool, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete virtual machine pool. This operation can take a while to complete.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='name'>
            /// The name of the virtual machine pool.
            /// </param>
            public static void BeginDelete(this IVmPoolsOperations operations, string resourceGroupName, string labName, string name)
            {
                operations.BeginDeleteAsync(resourceGroupName, labName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete virtual machine pool. This operation can take a while to complete.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='labName'>
            /// The name of the lab.
            /// </param>
            /// <param name='name'>
            /// The name of the virtual machine pool.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IVmPoolsOperations operations, string resourceGroupName, string labName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, labName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List virtual machine pools in a given lab.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<VmPool> ListNext(this IVmPoolsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List virtual machine pools in a given lab.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<VmPool>> ListNextAsync(this IVmPoolsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
