// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerService
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ExtensionAddonsOperations.
    /// </summary>
    public static partial class ExtensionAddonsOperationsExtensions
    {
            /// <summary>
            /// Gets a list of extension add-ons in the specified managed cluster.
            /// </summary>
            /// <remarks>
            /// Gets a list of extension add-ons in the specified managed cluster. The
            /// operation returns properties of each extension add-on.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the managed cluster resource.
            /// </param>
            public static IEnumerable<ExtensionAddon> ListByManagedCluster(this IExtensionAddonsOperations operations, string resourceGroupName, string resourceName)
            {
                return operations.ListByManagedClusterAsync(resourceGroupName, resourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of extension add-ons in the specified managed cluster.
            /// </summary>
            /// <remarks>
            /// Gets a list of extension add-ons in the specified managed cluster. The
            /// operation returns properties of each extension add-on.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the managed cluster resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<ExtensionAddon>> ListByManagedClusterAsync(this IExtensionAddonsOperations operations, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByManagedClusterWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the extension add-on.
            /// </summary>
            /// <remarks>
            /// Gets the details of the extension add-on in the specified managed cluster.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the managed cluster resource.
            /// </param>
            /// <param name='extensionAddonName'>
            /// The name of the extension add-on.
            /// </param>
            public static ExtensionAddon Get(this IExtensionAddonsOperations operations, string resourceGroupName, string resourceName, string extensionAddonName)
            {
                return operations.GetAsync(resourceGroupName, resourceName, extensionAddonName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the extension add-on.
            /// </summary>
            /// <remarks>
            /// Gets the details of the extension add-on in the specified managed cluster.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the managed cluster resource.
            /// </param>
            /// <param name='extensionAddonName'>
            /// The name of the extension add-on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExtensionAddon> GetAsync(this IExtensionAddonsOperations operations, string resourceGroupName, string resourceName, string extensionAddonName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, resourceName, extensionAddonName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates an extension add-on.
            /// </summary>
            /// <remarks>
            /// Creates or updates an extension add-on in the specified managed cluster.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the managed cluster resource.
            /// </param>
            /// <param name='extensionAddonName'>
            /// The name of the extension add-on.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the Create or Update an extension add-on.
            /// </param>
            public static ExtensionAddon CreateOrUpdate(this IExtensionAddonsOperations operations, string resourceGroupName, string resourceName, string extensionAddonName, ExtensionAddon parameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, resourceName, extensionAddonName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates an extension add-on.
            /// </summary>
            /// <remarks>
            /// Creates or updates an extension add-on in the specified managed cluster.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the managed cluster resource.
            /// </param>
            /// <param name='extensionAddonName'>
            /// The name of the extension add-on.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the Create or Update an extension add-on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExtensionAddon> CreateOrUpdateAsync(this IExtensionAddonsOperations operations, string resourceGroupName, string resourceName, string extensionAddonName, ExtensionAddon parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, resourceName, extensionAddonName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the extension add-on.
            /// </summary>
            /// <remarks>
            /// Deletes the extension add-on in the specified managed cluster.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the managed cluster resource.
            /// </param>
            /// <param name='extensionAddonName'>
            /// The name of the extension add-on.
            /// </param>
            public static void Delete(this IExtensionAddonsOperations operations, string resourceGroupName, string resourceName, string extensionAddonName)
            {
                operations.DeleteAsync(resourceGroupName, resourceName, extensionAddonName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the extension add-on.
            /// </summary>
            /// <remarks>
            /// Deletes the extension add-on in the specified managed cluster.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the managed cluster resource.
            /// </param>
            /// <param name='extensionAddonName'>
            /// The name of the extension add-on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IExtensionAddonsOperations operations, string resourceGroupName, string resourceName, string extensionAddonName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, resourceName, extensionAddonName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates or updates an extension add-on.
            /// </summary>
            /// <remarks>
            /// Creates or updates an extension add-on in the specified managed cluster.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the managed cluster resource.
            /// </param>
            /// <param name='extensionAddonName'>
            /// The name of the extension add-on.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the Create or Update an extension add-on.
            /// </param>
            public static ExtensionAddon BeginCreateOrUpdate(this IExtensionAddonsOperations operations, string resourceGroupName, string resourceName, string extensionAddonName, ExtensionAddon parameters)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, resourceName, extensionAddonName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates an extension add-on.
            /// </summary>
            /// <remarks>
            /// Creates or updates an extension add-on in the specified managed cluster.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the managed cluster resource.
            /// </param>
            /// <param name='extensionAddonName'>
            /// The name of the extension add-on.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the Create or Update an extension add-on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExtensionAddon> BeginCreateOrUpdateAsync(this IExtensionAddonsOperations operations, string resourceGroupName, string resourceName, string extensionAddonName, ExtensionAddon parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, resourceName, extensionAddonName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the extension add-on.
            /// </summary>
            /// <remarks>
            /// Deletes the extension add-on in the specified managed cluster.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the managed cluster resource.
            /// </param>
            /// <param name='extensionAddonName'>
            /// The name of the extension add-on.
            /// </param>
            public static void BeginDelete(this IExtensionAddonsOperations operations, string resourceGroupName, string resourceName, string extensionAddonName)
            {
                operations.BeginDeleteAsync(resourceGroupName, resourceName, extensionAddonName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the extension add-on.
            /// </summary>
            /// <remarks>
            /// Deletes the extension add-on in the specified managed cluster.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the managed cluster resource.
            /// </param>
            /// <param name='extensionAddonName'>
            /// The name of the extension add-on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IExtensionAddonsOperations operations, string resourceGroupName, string resourceName, string extensionAddonName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, resourceName, extensionAddonName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
