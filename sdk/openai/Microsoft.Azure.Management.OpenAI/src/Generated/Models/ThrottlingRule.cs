// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.OpenAI.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The quota limit rules.
    /// </summary>
    public partial class ThrottlingRule
    {
        /// <summary>
        /// Initializes a new instance of the ThrottlingRule class.
        /// </summary>
        public ThrottlingRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ThrottlingRule class.
        /// </summary>
        /// <param name="key">The rule key that uniquely identify the
        /// throttling rule.</param>
        /// <param name="renewalPeriod">The renewal period in seconds of call
        /// rate limit or quota limit.</param>
        /// <param name="count">The count value of call rate limit or quota
        /// limit.</param>
        /// <param name="minCount">The minimal count value of call rate limit
        /// or quota limit.</param>
        /// <param name="dynamicThrottlingEnabled">A flag indicates if
        /// dynamical throttling is enabled.</param>
        /// <param name="matchPatterns">The patterns for matching the requests
        /// that need to apply this rule.</param>
        public ThrottlingRule(string key = default(string), double? renewalPeriod = default(double?), double? count = default(double?), double? minCount = default(double?), bool? dynamicThrottlingEnabled = default(bool?), IList<RequestMatchPattern> matchPatterns = default(IList<RequestMatchPattern>))
        {
            Key = key;
            RenewalPeriod = renewalPeriod;
            Count = count;
            MinCount = minCount;
            DynamicThrottlingEnabled = dynamicThrottlingEnabled;
            MatchPatterns = matchPatterns;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the rule key that uniquely identify the throttling
        /// rule.
        /// </summary>
        [JsonProperty(PropertyName = "key")]
        public string Key { get; set; }

        /// <summary>
        /// Gets or sets the renewal period in seconds of call rate limit or
        /// quota limit.
        /// </summary>
        [JsonProperty(PropertyName = "renewalPeriod")]
        public double? RenewalPeriod { get; set; }

        /// <summary>
        /// Gets or sets the count value of call rate limit or quota limit.
        /// </summary>
        [JsonProperty(PropertyName = "count")]
        public double? Count { get; set; }

        /// <summary>
        /// Gets or sets the minimal count value of call rate limit or quota
        /// limit.
        /// </summary>
        [JsonProperty(PropertyName = "minCount")]
        public double? MinCount { get; set; }

        /// <summary>
        /// Gets or sets a flag indicates if dynamical throttling is enabled.
        /// </summary>
        [JsonProperty(PropertyName = "dynamicThrottlingEnabled")]
        public bool? DynamicThrottlingEnabled { get; set; }

        /// <summary>
        /// Gets or sets the patterns for matching the requests that need to
        /// apply this rule.
        /// </summary>
        [JsonProperty(PropertyName = "matchPatterns")]
        public IList<RequestMatchPattern> MatchPatterns { get; set; }

    }
}
