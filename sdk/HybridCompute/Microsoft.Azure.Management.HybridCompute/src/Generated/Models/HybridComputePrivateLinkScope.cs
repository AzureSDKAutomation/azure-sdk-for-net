// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.HybridCompute.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// An Azure Arc PrivateLinkScope definition.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class HybridComputePrivateLinkScope : PrivateLinkScopesResource
    {
        /// <summary>
        /// Initializes a new instance of the HybridComputePrivateLinkScope
        /// class.
        /// </summary>
        public HybridComputePrivateLinkScope()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the HybridComputePrivateLinkScope
        /// class.
        /// </summary>
        /// <param name="location">Resource location</param>
        /// <param name="id">Azure resource Id</param>
        /// <param name="name">Azure resource name</param>
        /// <param name="type">Azure resource type</param>
        /// <param name="tags">Resource tags</param>
        /// <param name="publicNetworkAccess">Indicates whether machines
        /// associated with the private link scope can also use public Azure
        /// Arc service endpoints. Possible values include: 'Enabled',
        /// 'Disabled'</param>
        /// <param name="provisioningState">Current state of this
        /// PrivateLinkScope: whether or not is has been provisioned within the
        /// resource group it is defined. Users cannot change this value but
        /// are able to read from it. Values will include Provisioning
        /// ,Succeeded, Canceled and Failed.</param>
        /// <param name="privateLinkScopeId">The Guid id of the private link
        /// scope.</param>
        public HybridComputePrivateLinkScope(string location, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string publicNetworkAccess = default(string), string provisioningState = default(string), string privateLinkScopeId = default(string))
            : base(location, id, name, type, tags)
        {
            PublicNetworkAccess = publicNetworkAccess;
            ProvisioningState = provisioningState;
            PrivateLinkScopeId = privateLinkScopeId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets indicates whether machines associated with the private
        /// link scope can also use public Azure Arc service endpoints.
        /// Possible values include: 'Enabled', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.publicNetworkAccess")]
        public string PublicNetworkAccess { get; set; }

        /// <summary>
        /// Gets current state of this PrivateLinkScope: whether or not is has
        /// been provisioned within the resource group it is defined. Users
        /// cannot change this value but are able to read from it. Values will
        /// include Provisioning ,Succeeded, Canceled and Failed.
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets the Guid id of the private link scope.
        /// </summary>
        [JsonProperty(PropertyName = "properties.privateLinkScopeId")]
        public string PrivateLinkScopeId { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
