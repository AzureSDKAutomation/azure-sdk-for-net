// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataProtection
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ResourceOperationGatekeepersOperations.
    /// </summary>
    public static partial class ResourceOperationGatekeepersOperationsExtensions
    {
            /// <summary>
            /// Returns ResourceOperationGateKeepers collection belonging to a
            /// subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<ResourceOperationGateKeeperResource> GetResourcesInSubscription(this IResourceOperationGatekeepersOperations operations)
            {
                return operations.GetResourcesInSubscriptionAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns ResourceOperationGateKeepers collection belonging to a
            /// subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceOperationGateKeeperResource>> GetResourcesInSubscriptionAsync(this IResourceOperationGatekeepersOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetResourcesInSubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns ResourceOperationGateKeepers collection belonging to a
            /// ResourceGroup
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            public static IPage<ResourceOperationGateKeeperResource> GetResourcesInResourceGroup(this IResourceOperationGatekeepersOperations operations, string resourceGroupName)
            {
                return operations.GetResourcesInResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns ResourceOperationGateKeepers collection belonging to a
            /// ResourceGroup
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceOperationGateKeeperResource>> GetResourcesInResourceGroupAsync(this IResourceOperationGatekeepersOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetResourcesInResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a ResourceOperationGateKeeper belonging to a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='resourceOperationGateKeepersName'>
            /// The name of the ResourceOperationGateKeeper
            /// </param>
            public static ResourceOperationGateKeeperResource Get(this IResourceOperationGatekeepersOperations operations, string resourceGroupName, string resourceOperationGateKeepersName)
            {
                return operations.GetAsync(resourceGroupName, resourceOperationGateKeepersName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a ResourceOperationGateKeeper belonging to a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='resourceOperationGateKeepersName'>
            /// The name of the ResourceOperationGateKeeper
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceOperationGateKeeperResource> GetAsync(this IResourceOperationGatekeepersOperations operations, string resourceGroupName, string resourceOperationGateKeepersName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, resourceOperationGateKeepersName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a ResourceOperationGatekeeper resource belonging to a
            /// resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='resourceOperationGateKeepersName'>
            /// The name of ResourceOperationGatekeeper
            /// </param>
            /// <param name='parameters'>
            /// Request body for operation
            /// </param>
            public static ResourceOperationGateKeeperResource Put(this IResourceOperationGatekeepersOperations operations, string resourceGroupName, string resourceOperationGateKeepersName, ResourceOperationGateKeeperResource parameters)
            {
                return operations.PutAsync(resourceGroupName, resourceOperationGateKeepersName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a ResourceOperationGatekeeper resource belonging to a
            /// resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='resourceOperationGateKeepersName'>
            /// The name of ResourceOperationGatekeeper
            /// </param>
            /// <param name='parameters'>
            /// Request body for operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceOperationGateKeeperResource> PutAsync(this IResourceOperationGatekeepersOperations operations, string resourceGroupName, string resourceOperationGateKeepersName, ResourceOperationGateKeeperResource parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutWithHttpMessagesAsync(resourceGroupName, resourceOperationGateKeepersName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a ResourceOperationGateKeeper resource from the resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='resourceOperationGateKeepersName'>
            /// The name of ResourceOperationGatekeeper
            /// </param>
            public static void Delete(this IResourceOperationGatekeepersOperations operations, string resourceGroupName, string resourceOperationGateKeepersName)
            {
                operations.DeleteAsync(resourceGroupName, resourceOperationGateKeepersName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a ResourceOperationGateKeeper resource from the resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='resourceOperationGateKeepersName'>
            /// The name of ResourceOperationGatekeeper
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IResourceOperationGatekeepersOperations operations, string resourceGroupName, string resourceOperationGateKeepersName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, resourceOperationGateKeepersName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates a ResourceOperationGatekeeper resource belonging to a resource
            /// group. For example, updating tags for a resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='resourceOperationGateKeepersName'>
            /// The name of ResourceOperationGatekeeper
            /// </param>
            /// <param name='parameters'>
            /// Request body for operation
            /// </param>
            public static ResourceOperationGateKeeperResource Patch(this IResourceOperationGatekeepersOperations operations, string resourceGroupName, string resourceOperationGateKeepersName, PatchResourceRequestInput parameters)
            {
                return operations.PatchAsync(resourceGroupName, resourceOperationGateKeepersName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a ResourceOperationGatekeeper resource belonging to a resource
            /// group. For example, updating tags for a resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='resourceOperationGateKeepersName'>
            /// The name of ResourceOperationGatekeeper
            /// </param>
            /// <param name='parameters'>
            /// Request body for operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceOperationGateKeeperResource> PatchAsync(this IResourceOperationGatekeepersOperations operations, string resourceGroupName, string resourceOperationGateKeepersName, PatchResourceRequestInput parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchWithHttpMessagesAsync(resourceGroupName, resourceOperationGateKeepersName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns ResourceOperationGateKeepers collection belonging to a
            /// subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ResourceOperationGateKeeperResource> GetResourcesInSubscriptionNext(this IResourceOperationGatekeepersOperations operations, string nextPageLink)
            {
                return operations.GetResourcesInSubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns ResourceOperationGateKeepers collection belonging to a
            /// subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceOperationGateKeeperResource>> GetResourcesInSubscriptionNextAsync(this IResourceOperationGatekeepersOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetResourcesInSubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns ResourceOperationGateKeepers collection belonging to a
            /// ResourceGroup
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ResourceOperationGateKeeperResource> GetResourcesInResourceGroupNext(this IResourceOperationGatekeepersOperations operations, string nextPageLink)
            {
                return operations.GetResourcesInResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns ResourceOperationGateKeepers collection belonging to a
            /// ResourceGroup
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceOperationGateKeeperResource>> GetResourcesInResourceGroupNextAsync(this IResourceOperationGatekeepersOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetResourcesInResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
