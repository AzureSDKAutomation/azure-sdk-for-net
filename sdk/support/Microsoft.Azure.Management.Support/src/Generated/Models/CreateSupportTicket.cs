// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Support.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Describes the payload for creating a support ticket. Customers can
    /// create tickets for issues relating to Billing, Subscription Management,
    /// Service and subscription limits(quotas) and Technical as determined by
    /// service id in the request payload.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class CreateSupportTicket
    {
        /// <summary>
        /// Initializes a new instance of the CreateSupportTicket class.
        /// </summary>
        public CreateSupportTicket()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CreateSupportTicket class.
        /// </summary>
        /// <param name="serviceId">Azure service for which the support ticket
        /// will be created.</param>
        /// <param name="title">Title of the support ticket.</param>
        /// <param name="description">Description of the support
        /// ticket.</param>
        /// <param name="problemClassificationId">Problem classification id
        /// associated with the support ticket. This indicates the problem or
        /// the issue that the ticket is being opened for.</param>
        /// <param name="severity">The severity associated with the support
        /// ticket. Possible values include: 'minimal', 'moderate',
        /// 'critical'</param>
        /// <param name="contactDetails">User contact details associated with
        /// the support ticket.</param>
        /// <param name="id">Id of the resource</param>
        /// <param name="name">Name of the resource</param>
        /// <param name="type">Type of the resource
        /// 'Microsoft.Support/supportTickets</param>
        /// <param name="problemStartTime">Time in UTC (ISO 8601 format) when
        /// the problem started.</param>
        /// <param name="require24X7Response">Indicates if a 24x7 response is
        /// requested by the support ticket creator.</param>
        /// <param name="technicalTicketDetails">Additional ticket details
        /// associated with a technical support ticket request. </param>
        /// <param name="quotaTicketDetails">Additional ticket details
        /// associated with a quota support ticket request. </param>
        public CreateSupportTicket(string serviceId, string title, string description, string problemClassificationId, string severity, ContactProfile contactDetails, string id = default(string), string name = default(string), string type = default(string), System.DateTime? problemStartTime = default(System.DateTime?), bool? require24X7Response = default(bool?), TechnicalTicketDetails technicalTicketDetails = default(TechnicalTicketDetails), QuotaTicketDetails quotaTicketDetails = default(QuotaTicketDetails))
        {
            Id = id;
            Name = name;
            Type = type;
            ServiceId = serviceId;
            Title = title;
            Description = description;
            ProblemStartTime = problemStartTime;
            ProblemClassificationId = problemClassificationId;
            Severity = severity;
            Require24X7Response = require24X7Response;
            ContactDetails = contactDetails;
            TechnicalTicketDetails = technicalTicketDetails;
            QuotaTicketDetails = quotaTicketDetails;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets id of the resource
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; private set; }

        /// <summary>
        /// Gets name of the resource
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets type of the resource 'Microsoft.Support/supportTickets
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; private set; }

        /// <summary>
        /// Gets or sets azure service for which the support ticket will be
        /// created.
        /// </summary>
        [JsonProperty(PropertyName = "properties.serviceId")]
        public string ServiceId { get; set; }

        /// <summary>
        /// Gets or sets title of the support ticket.
        /// </summary>
        [JsonProperty(PropertyName = "properties.title")]
        public string Title { get; set; }

        /// <summary>
        /// Gets or sets description of the support ticket.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets time in UTC (ISO 8601 format) when the problem
        /// started.
        /// </summary>
        [JsonProperty(PropertyName = "properties.problemStartTime")]
        public System.DateTime? ProblemStartTime { get; set; }

        /// <summary>
        /// Gets or sets problem classification id associated with the support
        /// ticket. This indicates the problem or the issue that the ticket is
        /// being opened for.
        /// </summary>
        [JsonProperty(PropertyName = "properties.problemClassificationId")]
        public string ProblemClassificationId { get; set; }

        /// <summary>
        /// Gets or sets the severity associated with the support ticket.
        /// Possible values include: 'minimal', 'moderate', 'critical'
        /// </summary>
        [JsonProperty(PropertyName = "properties.severity")]
        public string Severity { get; set; }

        /// <summary>
        /// Gets or sets indicates if a 24x7 response is requested by the
        /// support ticket creator.
        /// </summary>
        [JsonProperty(PropertyName = "properties.require24X7Response")]
        public bool? Require24X7Response { get; set; }

        /// <summary>
        /// Gets or sets user contact details associated with the support
        /// ticket.
        /// </summary>
        [JsonProperty(PropertyName = "properties.contactDetails")]
        public ContactProfile ContactDetails { get; set; }

        /// <summary>
        /// Gets or sets additional ticket details associated with a technical
        /// support ticket request.
        /// </summary>
        [JsonProperty(PropertyName = "properties.technicalTicketDetails")]
        public TechnicalTicketDetails TechnicalTicketDetails { get; set; }

        /// <summary>
        /// Gets or sets additional ticket details associated with a quota
        /// support ticket request.
        /// </summary>
        [JsonProperty(PropertyName = "properties.quotaTicketDetails")]
        public QuotaTicketDetails QuotaTicketDetails { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ServiceId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ServiceId");
            }
            if (Title == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Title");
            }
            if (Description == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Description");
            }
            if (ProblemClassificationId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ProblemClassificationId");
            }
            if (Severity == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Severity");
            }
            if (ContactDetails == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ContactDetails");
            }
            if (ContactDetails != null)
            {
                ContactDetails.Validate();
            }
        }
    }
}
