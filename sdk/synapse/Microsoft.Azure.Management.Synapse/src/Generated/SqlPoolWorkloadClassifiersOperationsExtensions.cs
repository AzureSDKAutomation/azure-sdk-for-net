// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Synapse
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SqlPoolWorkloadClassifiersOperations.
    /// </summary>
    public static partial class SqlPoolWorkloadClassifiersOperationsExtensions
    {
            /// <summary>
            /// Gets a workload classifier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='sqlPoolName'>
            /// SQL pool name
            /// </param>
            /// <param name='workloadGroupName'>
            /// The name of the workload group from which to receive the classifier from.
            /// </param>
            /// <param name='workloadClassifierName'>
            /// The name of the workload classifier.
            /// </param>
            public static WorkloadClassifier Get(this ISqlPoolWorkloadClassifiersOperations operations, string resourceGroupName, string workspaceName, string sqlPoolName, string workloadGroupName, string workloadClassifierName)
            {
                return operations.GetAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName, workloadClassifierName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a workload classifier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='sqlPoolName'>
            /// SQL pool name
            /// </param>
            /// <param name='workloadGroupName'>
            /// The name of the workload group from which to receive the classifier from.
            /// </param>
            /// <param name='workloadClassifierName'>
            /// The name of the workload classifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkloadClassifier> GetAsync(this ISqlPoolWorkloadClassifiersOperations operations, string resourceGroupName, string workspaceName, string sqlPoolName, string workloadGroupName, string workloadClassifierName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName, workloadClassifierName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a workload classifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='sqlPoolName'>
            /// SQL pool name
            /// </param>
            /// <param name='workloadGroupName'>
            /// The name of the workload group from which to receive the classifier from.
            /// </param>
            /// <param name='workloadClassifierName'>
            /// The name of the workload classifier to create/update.
            /// </param>
            /// <param name='parameters'>
            /// The properties of the workload classifier.
            /// </param>
            public static WorkloadClassifier CreateOrUpdate(this ISqlPoolWorkloadClassifiersOperations operations, string resourceGroupName, string workspaceName, string sqlPoolName, string workloadGroupName, string workloadClassifierName, WorkloadClassifier parameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName, workloadClassifierName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a workload classifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='sqlPoolName'>
            /// SQL pool name
            /// </param>
            /// <param name='workloadGroupName'>
            /// The name of the workload group from which to receive the classifier from.
            /// </param>
            /// <param name='workloadClassifierName'>
            /// The name of the workload classifier to create/update.
            /// </param>
            /// <param name='parameters'>
            /// The properties of the workload classifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkloadClassifier> CreateOrUpdateAsync(this ISqlPoolWorkloadClassifiersOperations operations, string resourceGroupName, string workspaceName, string sqlPoolName, string workloadGroupName, string workloadClassifierName, WorkloadClassifier parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName, workloadClassifierName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a workload classifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='sqlPoolName'>
            /// SQL pool name
            /// </param>
            /// <param name='workloadGroupName'>
            /// The name of the workload group from which to receive the classifier from.
            /// </param>
            /// <param name='workloadClassifierName'>
            /// The name of the workload classifier to delete.
            /// </param>
            public static void Delete(this ISqlPoolWorkloadClassifiersOperations operations, string resourceGroupName, string workspaceName, string sqlPoolName, string workloadGroupName, string workloadClassifierName)
            {
                operations.DeleteAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName, workloadClassifierName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a workload classifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='sqlPoolName'>
            /// SQL pool name
            /// </param>
            /// <param name='workloadGroupName'>
            /// The name of the workload group from which to receive the classifier from.
            /// </param>
            /// <param name='workloadClassifierName'>
            /// The name of the workload classifier to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ISqlPoolWorkloadClassifiersOperations operations, string resourceGroupName, string workspaceName, string sqlPoolName, string workloadGroupName, string workloadClassifierName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName, workloadClassifierName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the list of workload classifiers for a workload group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='sqlPoolName'>
            /// SQL pool name
            /// </param>
            /// <param name='workloadGroupName'>
            /// The name of the workload group from which to receive the classifiers from.
            /// </param>
            public static IPage<WorkloadClassifier> ListByWorkloadGroup(this ISqlPoolWorkloadClassifiersOperations operations, string resourceGroupName, string workspaceName, string sqlPoolName, string workloadGroupName)
            {
                return operations.ListByWorkloadGroupAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of workload classifiers for a workload group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='sqlPoolName'>
            /// SQL pool name
            /// </param>
            /// <param name='workloadGroupName'>
            /// The name of the workload group from which to receive the classifiers from.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WorkloadClassifier>> ListByWorkloadGroupAsync(this ISqlPoolWorkloadClassifiersOperations operations, string resourceGroupName, string workspaceName, string sqlPoolName, string workloadGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByWorkloadGroupWithHttpMessagesAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a workload classifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='sqlPoolName'>
            /// SQL pool name
            /// </param>
            /// <param name='workloadGroupName'>
            /// The name of the workload group from which to receive the classifier from.
            /// </param>
            /// <param name='workloadClassifierName'>
            /// The name of the workload classifier to create/update.
            /// </param>
            /// <param name='parameters'>
            /// The properties of the workload classifier.
            /// </param>
            public static WorkloadClassifier BeginCreateOrUpdate(this ISqlPoolWorkloadClassifiersOperations operations, string resourceGroupName, string workspaceName, string sqlPoolName, string workloadGroupName, string workloadClassifierName, WorkloadClassifier parameters)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName, workloadClassifierName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a workload classifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='sqlPoolName'>
            /// SQL pool name
            /// </param>
            /// <param name='workloadGroupName'>
            /// The name of the workload group from which to receive the classifier from.
            /// </param>
            /// <param name='workloadClassifierName'>
            /// The name of the workload classifier to create/update.
            /// </param>
            /// <param name='parameters'>
            /// The properties of the workload classifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkloadClassifier> BeginCreateOrUpdateAsync(this ISqlPoolWorkloadClassifiersOperations operations, string resourceGroupName, string workspaceName, string sqlPoolName, string workloadGroupName, string workloadClassifierName, WorkloadClassifier parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName, workloadClassifierName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a workload classifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='sqlPoolName'>
            /// SQL pool name
            /// </param>
            /// <param name='workloadGroupName'>
            /// The name of the workload group from which to receive the classifier from.
            /// </param>
            /// <param name='workloadClassifierName'>
            /// The name of the workload classifier to delete.
            /// </param>
            public static void BeginDelete(this ISqlPoolWorkloadClassifiersOperations operations, string resourceGroupName, string workspaceName, string sqlPoolName, string workloadGroupName, string workloadClassifierName)
            {
                operations.BeginDeleteAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName, workloadClassifierName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a workload classifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='sqlPoolName'>
            /// SQL pool name
            /// </param>
            /// <param name='workloadGroupName'>
            /// The name of the workload group from which to receive the classifier from.
            /// </param>
            /// <param name='workloadClassifierName'>
            /// The name of the workload classifier to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this ISqlPoolWorkloadClassifiersOperations operations, string resourceGroupName, string workspaceName, string sqlPoolName, string workloadGroupName, string workloadClassifierName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName, workloadClassifierName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the list of workload classifiers for a workload group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<WorkloadClassifier> ListByWorkloadGroupNext(this ISqlPoolWorkloadClassifiersOperations operations, string nextPageLink)
            {
                return operations.ListByWorkloadGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of workload classifiers for a workload group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WorkloadClassifier>> ListByWorkloadGroupNextAsync(this ISqlPoolWorkloadClassifiersOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByWorkloadGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
