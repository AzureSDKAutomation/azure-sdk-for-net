// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Synapse
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ManagedPrivateEndpointsOperations.
    /// </summary>
    public static partial class ManagedPrivateEndpointsOperationsExtensions
    {
            /// <summary>
            /// Get Managed Private Endpoints
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='managedVirtualNetworkName'>
            /// Managed virtual network name
            /// </param>
            /// <param name='managedPrivateEndpointName'>
            /// Managed private endpoint name
            /// </param>
            public static ManagedPrivateEndpoint Get(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string workspaceName, string managedVirtualNetworkName, string managedPrivateEndpointName)
            {
                return operations.GetAsync(resourceGroupName, workspaceName, managedVirtualNetworkName, managedPrivateEndpointName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Managed Private Endpoints
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='managedVirtualNetworkName'>
            /// Managed virtual network name
            /// </param>
            /// <param name='managedPrivateEndpointName'>
            /// Managed private endpoint name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagedPrivateEndpoint> GetAsync(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string workspaceName, string managedVirtualNetworkName, string managedPrivateEndpointName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, workspaceName, managedVirtualNetworkName, managedPrivateEndpointName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create Managed Private Endpoints
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='managedVirtualNetworkName'>
            /// Managed virtual network name
            /// </param>
            /// <param name='managedPrivateEndpointName'>
            /// Managed private endpoint name
            /// </param>
            /// <param name='managedPrivateEndpoint'>
            /// Managed private endpoint properties.
            /// </param>
            public static ManagedPrivateEndpoint Create(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string workspaceName, string managedVirtualNetworkName, string managedPrivateEndpointName, ManagedPrivateEndpoint managedPrivateEndpoint)
            {
                return operations.CreateAsync(resourceGroupName, workspaceName, managedVirtualNetworkName, managedPrivateEndpointName, managedPrivateEndpoint).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create Managed Private Endpoints
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='managedVirtualNetworkName'>
            /// Managed virtual network name
            /// </param>
            /// <param name='managedPrivateEndpointName'>
            /// Managed private endpoint name
            /// </param>
            /// <param name='managedPrivateEndpoint'>
            /// Managed private endpoint properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagedPrivateEndpoint> CreateAsync(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string workspaceName, string managedVirtualNetworkName, string managedPrivateEndpointName, ManagedPrivateEndpoint managedPrivateEndpoint, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, workspaceName, managedVirtualNetworkName, managedPrivateEndpointName, managedPrivateEndpoint, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Managed Private Endpoints
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='managedVirtualNetworkName'>
            /// Managed virtual network name
            /// </param>
            /// <param name='managedPrivateEndpointName'>
            /// Managed private endpoint name
            /// </param>
            public static void Delete(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string workspaceName, string managedVirtualNetworkName, string managedPrivateEndpointName)
            {
                operations.DeleteAsync(resourceGroupName, workspaceName, managedVirtualNetworkName, managedPrivateEndpointName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Managed Private Endpoints
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='managedVirtualNetworkName'>
            /// Managed virtual network name
            /// </param>
            /// <param name='managedPrivateEndpointName'>
            /// Managed private endpoint name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string workspaceName, string managedVirtualNetworkName, string managedPrivateEndpointName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, managedVirtualNetworkName, managedPrivateEndpointName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List Managed Private Endpoints
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='managedVirtualNetworkName'>
            /// Managed virtual network name
            /// </param>
            public static IPage<ManagedPrivateEndpoint> ListByWorkspace(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string workspaceName, string managedVirtualNetworkName)
            {
                return operations.ListByWorkspaceAsync(resourceGroupName, workspaceName, managedVirtualNetworkName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Managed Private Endpoints
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='managedVirtualNetworkName'>
            /// Managed virtual network name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ManagedPrivateEndpoint>> ListByWorkspaceAsync(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string workspaceName, string managedVirtualNetworkName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByWorkspaceWithHttpMessagesAsync(resourceGroupName, workspaceName, managedVirtualNetworkName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Managed Private Endpoints
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='managedVirtualNetworkName'>
            /// Managed virtual network name
            /// </param>
            /// <param name='managedPrivateEndpointName'>
            /// Managed private endpoint name
            /// </param>
            public static void BeginDelete(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string workspaceName, string managedVirtualNetworkName, string managedPrivateEndpointName)
            {
                operations.BeginDeleteAsync(resourceGroupName, workspaceName, managedVirtualNetworkName, managedPrivateEndpointName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Managed Private Endpoints
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='managedVirtualNetworkName'>
            /// Managed virtual network name
            /// </param>
            /// <param name='managedPrivateEndpointName'>
            /// Managed private endpoint name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string workspaceName, string managedVirtualNetworkName, string managedPrivateEndpointName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, managedVirtualNetworkName, managedPrivateEndpointName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List Managed Private Endpoints
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ManagedPrivateEndpoint> ListByWorkspaceNext(this IManagedPrivateEndpointsOperations operations, string nextPageLink)
            {
                return operations.ListByWorkspaceNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Managed Private Endpoints
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ManagedPrivateEndpoint>> ListByWorkspaceNextAsync(this IManagedPrivateEndpointsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByWorkspaceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
