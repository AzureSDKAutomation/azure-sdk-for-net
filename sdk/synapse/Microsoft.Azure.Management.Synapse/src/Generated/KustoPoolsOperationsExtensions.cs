// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Synapse
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for KustoPoolsOperations.
    /// </summary>
    public static partial class KustoPoolsOperationsExtensions
    {
            /// <summary>
            /// List Kusto pools
            /// </summary>
            /// <remarks>
            /// List all Kusto pools
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace pool.
            /// </param>
            public static KustoPoolListResult ListByWorkspace(this IKustoPoolsOperations operations, string resourceGroupName, string workspaceName)
            {
                return operations.ListByWorkspaceAsync(resourceGroupName, workspaceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Kusto pools
            /// </summary>
            /// <remarks>
            /// List all Kusto pools
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace pool.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KustoPoolListResult> ListByWorkspaceAsync(this IKustoPoolsOperations operations, string resourceGroupName, string workspaceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByWorkspaceWithHttpMessagesAsync(resourceGroupName, workspaceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a Kusto pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace pool.
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            public static KustoPool Get(this IKustoPoolsOperations operations, string workspaceName, string kustoPoolName, string resourceGroupName)
            {
                return operations.GetAsync(workspaceName, kustoPoolName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a Kusto pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace pool.
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KustoPool> GetAsync(this IKustoPoolsOperations operations, string workspaceName, string kustoPoolName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(workspaceName, kustoPoolName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a Kusto pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace pool.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            /// <param name='parameters'>
            /// The Kusto pool parameters supplied to the CreateOrUpdate operation.
            /// </param>
            /// <param name='ifMatch'>
            /// The ETag of the Kusto Pool. Omit this value to always overwrite the current
            /// Kusto Pool. Specify the last-seen ETag value to prevent accidentally
            /// overwriting concurrent changes.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Set to '*' to allow a new Kusto Pool to be created, but to prevent updating
            /// an existing Kusto Pool. Other values will result in a 412 Pre-condition
            /// Failed response.
            /// </param>
            public static KustoPool CreateOrUpdate(this IKustoPoolsOperations operations, string workspaceName, string resourceGroupName, string kustoPoolName, KustoPool parameters, string ifMatch = default(string), string ifNoneMatch = default(string))
            {
                return operations.CreateOrUpdateAsync(workspaceName, resourceGroupName, kustoPoolName, parameters, ifMatch, ifNoneMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a Kusto pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace pool.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            /// <param name='parameters'>
            /// The Kusto pool parameters supplied to the CreateOrUpdate operation.
            /// </param>
            /// <param name='ifMatch'>
            /// The ETag of the Kusto Pool. Omit this value to always overwrite the current
            /// Kusto Pool. Specify the last-seen ETag value to prevent accidentally
            /// overwriting concurrent changes.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Set to '*' to allow a new Kusto Pool to be created, but to prevent updating
            /// an existing Kusto Pool. Other values will result in a 412 Pre-condition
            /// Failed response.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KustoPool> CreateOrUpdateAsync(this IKustoPoolsOperations operations, string workspaceName, string resourceGroupName, string kustoPoolName, KustoPool parameters, string ifMatch = default(string), string ifNoneMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(workspaceName, resourceGroupName, kustoPoolName, parameters, ifMatch, ifNoneMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a Kusto Kusto Pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace pool.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            /// <param name='parameters'>
            /// The Kusto pool parameters supplied to the Update operation.
            /// </param>
            /// <param name='ifMatch'>
            /// The ETag of the Kusto Pool. Omit this value to always overwrite the current
            /// Kusto Pool. Specify the last-seen ETag value to prevent accidentally
            /// overwriting concurrent changes.
            /// </param>
            public static KustoPool Update(this IKustoPoolsOperations operations, string workspaceName, string resourceGroupName, string kustoPoolName, KustoPoolUpdate parameters, string ifMatch = default(string))
            {
                return operations.UpdateAsync(workspaceName, resourceGroupName, kustoPoolName, parameters, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a Kusto Kusto Pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace pool.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            /// <param name='parameters'>
            /// The Kusto pool parameters supplied to the Update operation.
            /// </param>
            /// <param name='ifMatch'>
            /// The ETag of the Kusto Pool. Omit this value to always overwrite the current
            /// Kusto Pool. Specify the last-seen ETag value to prevent accidentally
            /// overwriting concurrent changes.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KustoPool> UpdateAsync(this IKustoPoolsOperations operations, string workspaceName, string resourceGroupName, string kustoPoolName, KustoPoolUpdate parameters, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(workspaceName, resourceGroupName, kustoPoolName, parameters, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a Kusto pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace pool.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            public static void Delete(this IKustoPoolsOperations operations, string workspaceName, string resourceGroupName, string kustoPoolName)
            {
                operations.DeleteAsync(workspaceName, resourceGroupName, kustoPoolName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a Kusto pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace pool.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IKustoPoolsOperations operations, string workspaceName, string resourceGroupName, string kustoPoolName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(workspaceName, resourceGroupName, kustoPoolName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create or update a Kusto pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace pool.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            /// <param name='parameters'>
            /// The Kusto pool parameters supplied to the CreateOrUpdate operation.
            /// </param>
            /// <param name='ifMatch'>
            /// The ETag of the Kusto Pool. Omit this value to always overwrite the current
            /// Kusto Pool. Specify the last-seen ETag value to prevent accidentally
            /// overwriting concurrent changes.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Set to '*' to allow a new Kusto Pool to be created, but to prevent updating
            /// an existing Kusto Pool. Other values will result in a 412 Pre-condition
            /// Failed response.
            /// </param>
            public static KustoPool BeginCreateOrUpdate(this IKustoPoolsOperations operations, string workspaceName, string resourceGroupName, string kustoPoolName, KustoPool parameters, string ifMatch = default(string), string ifNoneMatch = default(string))
            {
                return operations.BeginCreateOrUpdateAsync(workspaceName, resourceGroupName, kustoPoolName, parameters, ifMatch, ifNoneMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a Kusto pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace pool.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            /// <param name='parameters'>
            /// The Kusto pool parameters supplied to the CreateOrUpdate operation.
            /// </param>
            /// <param name='ifMatch'>
            /// The ETag of the Kusto Pool. Omit this value to always overwrite the current
            /// Kusto Pool. Specify the last-seen ETag value to prevent accidentally
            /// overwriting concurrent changes.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Set to '*' to allow a new Kusto Pool to be created, but to prevent updating
            /// an existing Kusto Pool. Other values will result in a 412 Pre-condition
            /// Failed response.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KustoPool> BeginCreateOrUpdateAsync(this IKustoPoolsOperations operations, string workspaceName, string resourceGroupName, string kustoPoolName, KustoPool parameters, string ifMatch = default(string), string ifNoneMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(workspaceName, resourceGroupName, kustoPoolName, parameters, ifMatch, ifNoneMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a Kusto Kusto Pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace pool.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            /// <param name='parameters'>
            /// The Kusto pool parameters supplied to the Update operation.
            /// </param>
            /// <param name='ifMatch'>
            /// The ETag of the Kusto Pool. Omit this value to always overwrite the current
            /// Kusto Pool. Specify the last-seen ETag value to prevent accidentally
            /// overwriting concurrent changes.
            /// </param>
            public static KustoPool BeginUpdate(this IKustoPoolsOperations operations, string workspaceName, string resourceGroupName, string kustoPoolName, KustoPoolUpdate parameters, string ifMatch = default(string))
            {
                return operations.BeginUpdateAsync(workspaceName, resourceGroupName, kustoPoolName, parameters, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a Kusto Kusto Pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace pool.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            /// <param name='parameters'>
            /// The Kusto pool parameters supplied to the Update operation.
            /// </param>
            /// <param name='ifMatch'>
            /// The ETag of the Kusto Pool. Omit this value to always overwrite the current
            /// Kusto Pool. Specify the last-seen ETag value to prevent accidentally
            /// overwriting concurrent changes.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KustoPool> BeginUpdateAsync(this IKustoPoolsOperations operations, string workspaceName, string resourceGroupName, string kustoPoolName, KustoPoolUpdate parameters, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(workspaceName, resourceGroupName, kustoPoolName, parameters, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a Kusto pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace pool.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            public static void BeginDelete(this IKustoPoolsOperations operations, string workspaceName, string resourceGroupName, string kustoPoolName)
            {
                operations.BeginDeleteAsync(workspaceName, resourceGroupName, kustoPoolName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a Kusto pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace pool.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IKustoPoolsOperations operations, string workspaceName, string resourceGroupName, string kustoPoolName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(workspaceName, resourceGroupName, kustoPoolName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
