// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Synapse
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DataConnectionsOperations.
    /// </summary>
    public static partial class DataConnectionsOperationsExtensions
    {
            /// <summary>
            /// Returns the list of data connections of the given Kusto pool database.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database in the Kusto pool.
            /// </param>
            public static IEnumerable<DataConnection> ListByDatabase(this IDataConnectionsOperations operations, string resourceGroupName, string workspaceName, string kustoPoolName, string databaseName)
            {
                return operations.ListByDatabaseAsync(resourceGroupName, workspaceName, kustoPoolName, databaseName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the list of data connections of the given Kusto pool database.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database in the Kusto pool.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<DataConnection>> ListByDatabaseAsync(this IDataConnectionsOperations operations, string resourceGroupName, string workspaceName, string kustoPoolName, string databaseName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByDatabaseWithHttpMessagesAsync(resourceGroupName, workspaceName, kustoPoolName, databaseName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a data connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database in the Kusto pool.
            /// </param>
            /// <param name='dataConnectionName'>
            /// The name of the data connection.
            /// </param>
            public static DataConnection Get(this IDataConnectionsOperations operations, string resourceGroupName, string workspaceName, string kustoPoolName, string databaseName, string dataConnectionName)
            {
                return operations.GetAsync(resourceGroupName, workspaceName, kustoPoolName, databaseName, dataConnectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a data connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database in the Kusto pool.
            /// </param>
            /// <param name='dataConnectionName'>
            /// The name of the data connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataConnection> GetAsync(this IDataConnectionsOperations operations, string resourceGroupName, string workspaceName, string kustoPoolName, string databaseName, string dataConnectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, workspaceName, kustoPoolName, databaseName, dataConnectionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a data connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database in the Kusto pool.
            /// </param>
            /// <param name='dataConnectionName'>
            /// The name of the data connection.
            /// </param>
            /// <param name='parameters'>
            /// The data connection parameters supplied to the CreateOrUpdate operation.
            /// </param>
            public static DataConnection CreateOrUpdate(this IDataConnectionsOperations operations, string resourceGroupName, string workspaceName, string kustoPoolName, string databaseName, string dataConnectionName, DataConnection parameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, workspaceName, kustoPoolName, databaseName, dataConnectionName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a data connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database in the Kusto pool.
            /// </param>
            /// <param name='dataConnectionName'>
            /// The name of the data connection.
            /// </param>
            /// <param name='parameters'>
            /// The data connection parameters supplied to the CreateOrUpdate operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataConnection> CreateOrUpdateAsync(this IDataConnectionsOperations operations, string resourceGroupName, string workspaceName, string kustoPoolName, string databaseName, string dataConnectionName, DataConnection parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, workspaceName, kustoPoolName, databaseName, dataConnectionName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a data connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database in the Kusto pool.
            /// </param>
            /// <param name='dataConnectionName'>
            /// The name of the data connection.
            /// </param>
            /// <param name='parameters'>
            /// The data connection parameters supplied to the Update operation.
            /// </param>
            public static DataConnection Update(this IDataConnectionsOperations operations, string resourceGroupName, string workspaceName, string kustoPoolName, string databaseName, string dataConnectionName, DataConnection parameters)
            {
                return operations.UpdateAsync(resourceGroupName, workspaceName, kustoPoolName, databaseName, dataConnectionName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a data connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database in the Kusto pool.
            /// </param>
            /// <param name='dataConnectionName'>
            /// The name of the data connection.
            /// </param>
            /// <param name='parameters'>
            /// The data connection parameters supplied to the Update operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataConnection> UpdateAsync(this IDataConnectionsOperations operations, string resourceGroupName, string workspaceName, string kustoPoolName, string databaseName, string dataConnectionName, DataConnection parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, workspaceName, kustoPoolName, databaseName, dataConnectionName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the data connection with the given name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database in the Kusto pool.
            /// </param>
            /// <param name='dataConnectionName'>
            /// The name of the data connection.
            /// </param>
            public static void Delete(this IDataConnectionsOperations operations, string resourceGroupName, string workspaceName, string kustoPoolName, string databaseName, string dataConnectionName)
            {
                operations.DeleteAsync(resourceGroupName, workspaceName, kustoPoolName, databaseName, dataConnectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the data connection with the given name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database in the Kusto pool.
            /// </param>
            /// <param name='dataConnectionName'>
            /// The name of the data connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IDataConnectionsOperations operations, string resourceGroupName, string workspaceName, string kustoPoolName, string databaseName, string dataConnectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, kustoPoolName, databaseName, dataConnectionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates or updates a data connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database in the Kusto pool.
            /// </param>
            /// <param name='dataConnectionName'>
            /// The name of the data connection.
            /// </param>
            /// <param name='parameters'>
            /// The data connection parameters supplied to the CreateOrUpdate operation.
            /// </param>
            public static DataConnection BeginCreateOrUpdate(this IDataConnectionsOperations operations, string resourceGroupName, string workspaceName, string kustoPoolName, string databaseName, string dataConnectionName, DataConnection parameters)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, workspaceName, kustoPoolName, databaseName, dataConnectionName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a data connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database in the Kusto pool.
            /// </param>
            /// <param name='dataConnectionName'>
            /// The name of the data connection.
            /// </param>
            /// <param name='parameters'>
            /// The data connection parameters supplied to the CreateOrUpdate operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataConnection> BeginCreateOrUpdateAsync(this IDataConnectionsOperations operations, string resourceGroupName, string workspaceName, string kustoPoolName, string databaseName, string dataConnectionName, DataConnection parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, workspaceName, kustoPoolName, databaseName, dataConnectionName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a data connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database in the Kusto pool.
            /// </param>
            /// <param name='dataConnectionName'>
            /// The name of the data connection.
            /// </param>
            /// <param name='parameters'>
            /// The data connection parameters supplied to the Update operation.
            /// </param>
            public static DataConnection BeginUpdate(this IDataConnectionsOperations operations, string resourceGroupName, string workspaceName, string kustoPoolName, string databaseName, string dataConnectionName, DataConnection parameters)
            {
                return operations.BeginUpdateAsync(resourceGroupName, workspaceName, kustoPoolName, databaseName, dataConnectionName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a data connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database in the Kusto pool.
            /// </param>
            /// <param name='dataConnectionName'>
            /// The name of the data connection.
            /// </param>
            /// <param name='parameters'>
            /// The data connection parameters supplied to the Update operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataConnection> BeginUpdateAsync(this IDataConnectionsOperations operations, string resourceGroupName, string workspaceName, string kustoPoolName, string databaseName, string dataConnectionName, DataConnection parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, workspaceName, kustoPoolName, databaseName, dataConnectionName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the data connection with the given name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database in the Kusto pool.
            /// </param>
            /// <param name='dataConnectionName'>
            /// The name of the data connection.
            /// </param>
            public static void BeginDelete(this IDataConnectionsOperations operations, string resourceGroupName, string workspaceName, string kustoPoolName, string databaseName, string dataConnectionName)
            {
                operations.BeginDeleteAsync(resourceGroupName, workspaceName, kustoPoolName, databaseName, dataConnectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the data connection with the given name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the database in the Kusto pool.
            /// </param>
            /// <param name='dataConnectionName'>
            /// The name of the data connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IDataConnectionsOperations operations, string resourceGroupName, string workspaceName, string kustoPoolName, string databaseName, string dataConnectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, kustoPoolName, databaseName, dataConnectionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
