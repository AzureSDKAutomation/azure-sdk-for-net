// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ResourceManager.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Parameters of copy resources.
    /// </summary>
    public partial class ResourceCopyInfo
    {
        /// <summary>
        /// Initializes a new instance of the ResourceCopyInfo class.
        /// </summary>
        public ResourceCopyInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ResourceCopyInfo class.
        /// </summary>
        /// <param name="targetLocation">Target location for the move.</param>
        /// <param name="resources">Array of resources to be moved.</param>
        public ResourceCopyInfo(string targetLocation, IList<ResourceCopyResourceList> resources)
        {
            TargetLocation = targetLocation;
            Resources = resources;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets target location for the move.
        /// </summary>
        [JsonProperty(PropertyName = "targetLocation")]
        public string TargetLocation { get; set; }

        /// <summary>
        /// Gets or sets array of resources to be moved.
        /// </summary>
        [JsonProperty(PropertyName = "resources")]
        public IList<ResourceCopyResourceList> Resources { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (TargetLocation == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TargetLocation");
            }
            if (Resources == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Resources");
            }
            if (Resources != null)
            {
                foreach (var element in Resources)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
