// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Attestation
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// AttestationOperations operations.
    /// </summary>
    public partial interface IAttestationOperations
    {
        /// <summary>
        /// Attest to an SGX enclave.
        /// </summary>
        /// <remarks>
        /// Processes an OpenEnclave report , producing an artifact. The type
        /// of artifact produced is dependent upon attestation policy.
        /// </remarks>
        /// <param name='instanceUrl'>
        /// The attestation instance base URI, for example
        /// https://mytenant.attest.azure.net.
        /// </param>
        /// <param name='request'>
        /// Request object containing the quote
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<AttestationResponse>> AttestOpenEnclaveWithHttpMessagesAsync(string instanceUrl, AttestOpenEnclaveRequest request, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Attest to an SGX enclave.
        /// </summary>
        /// <remarks>
        /// Processes an SGX enclave quote, producing an artifact. The type of
        /// artifact produced is dependent upon attestation policy.
        /// </remarks>
        /// <param name='instanceUrl'>
        /// The attestation instance base URI, for example
        /// https://mytenant.attest.azure.net.
        /// </param>
        /// <param name='request'>
        /// Request object containing the quote
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<AttestationResponse>> AttestSgxEnclaveWithHttpMessagesAsync(string instanceUrl, AttestSgxEnclaveRequest request, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Attest a Virtualization-based Security (VBS) enclave.
        /// </summary>
        /// <remarks>
        /// Processes attestation evidence from a VBS enclave, producing an
        /// attestation result. The attestation result produced is dependent
        /// upon the attestation policy.
        /// </remarks>
        /// <param name='instanceUrl'>
        /// The attestation instance base URI, for example
        /// https://mytenant.attest.azure.net.
        /// </param>
        /// <param name='request'>
        /// Request object
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<TpmAttestationResponse>> AttestTpmWithHttpMessagesAsync(string instanceUrl, TpmAttestationRequest request, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
