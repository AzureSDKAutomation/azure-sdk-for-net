// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Attestation.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Attestation request for Intel SGX enclaves
    /// </summary>
    public partial class AttestOpenEnclaveRequest
    {
        /// <summary>
        /// Initializes a new instance of the AttestOpenEnclaveRequest class.
        /// </summary>
        public AttestOpenEnclaveRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AttestOpenEnclaveRequest class.
        /// </summary>
        /// <param name="report">OpenEnclave report from the enclave to be
        /// attested</param>
        /// <param name="runtimeData">Runtime data provided by the enclave at
        /// the time of report generation. The MAA will verify that the first
        /// 32 bytes of the report_data field of the quote contains the SHA256
        /// hash of the decoded "data" field of the runtime data.</param>
        /// <param name="initTimeData">Base64Url encoded "InitTime data". The
        /// MAA will verify that the init data was known to the enclave. Note
        /// that InitTimeData is invalid for CoffeeLake processors.</param>
        /// <param name="draftPolicyForAttestation">Attest against the provided
        /// draft policy. Note that the resulting token cannot be
        /// validated.</param>
        public AttestOpenEnclaveRequest(byte[] report = default(byte[]), RuntimeData runtimeData = default(RuntimeData), InitTimeData initTimeData = default(InitTimeData), string draftPolicyForAttestation = default(string))
        {
            Report = report;
            RuntimeData = runtimeData;
            InitTimeData = initTimeData;
            DraftPolicyForAttestation = draftPolicyForAttestation;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets openEnclave report from the enclave to be attested
        /// </summary>
        [JsonConverter(typeof(Base64UrlJsonConverter))]
        [JsonProperty(PropertyName = "report")]
        public byte[] Report { get; set; }

        /// <summary>
        /// Gets or sets runtime data provided by the enclave at the time of
        /// report generation. The MAA will verify that the first 32 bytes of
        /// the report_data field of the quote contains the SHA256 hash of the
        /// decoded "data" field of the runtime data.
        /// </summary>
        [JsonProperty(PropertyName = "runtimeData")]
        public RuntimeData RuntimeData { get; set; }

        /// <summary>
        /// Gets or sets base64Url encoded "InitTime data". The MAA will verify
        /// that the init data was known to the enclave. Note that InitTimeData
        /// is invalid for CoffeeLake processors.
        /// </summary>
        [JsonProperty(PropertyName = "initTimeData")]
        public InitTimeData InitTimeData { get; set; }

        /// <summary>
        /// Gets or sets attest against the provided draft policy. Note that
        /// the resulting token cannot be validated.
        /// </summary>
        [JsonProperty(PropertyName = "draftPolicyForAttestation")]
        public string DraftPolicyForAttestation { get; set; }

    }
}
