// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Attestation.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A Microsoft Azure Attestation response token body - the body of a
    /// response token issued by MAA
    /// </summary>
    public partial class AttestationResult
    {
        /// <summary>
        /// Initializes a new instance of the AttestationResult class.
        /// </summary>
        public AttestationResult()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AttestationResult class.
        /// </summary>
        /// <param name="jti">Unique Identifier for the token</param>
        /// <param name="iss">The Principal who issued the token</param>
        /// <param name="iat">The time at which the token was issued, in the
        /// number of seconds since 1970-01-0T00:00:00Z UTC</param>
        /// <param name="exp">The expiration time after which the token is no
        /// longer valid, in the number of seconds since 1970-01-0T00:00:00Z
        /// UTC</param>
        /// <param name="nbf">The not before time before which the token cannot
        /// be considered valid, in the number of seconds since
        /// 1970-01-0T00:00:00Z UTC</param>
        /// <param name="cnf">An RFC 7800 Proof of Possession Key</param>
        /// <param name="nonce">The Nonce input to the attestation request, if
        /// provided.</param>
        /// <param name="version">The Schema version of this structure. Current
        /// Value: 1.0</param>
        /// <param name="runtimeClaims">Runtime Claims</param>
        /// <param name="inittimeClaims">Inittime Claims</param>
        /// <param name="policyClaims">Policy Generated Claims</param>
        /// <param name="verifierType">The Attestation type being
        /// attested.</param>
        /// <param name="policySigner">The certificate used to sign the policy
        /// object, if specified.</param>
        /// <param name="policyHash">The SHA256 hash of the BASE64URL encoded
        /// policy text used for attestation</param>
        /// <param name="isDebuggable">True if the enclave is debuggable, false
        /// otherwise</param>
        /// <param name="productId">The SGX Product ID for the enclave.</param>
        /// <param name="mrEnclave">The HEX encoded SGX MRENCLAVE value for the
        /// enclave.</param>
        /// <param name="mrSigner">The HEX encoded SGX MRSIGNER value for the
        /// enclave.</param>
        /// <param name="svn">The SGX SVN value for the enclave.</param>
        /// <param name="enclaveHeldData">A copy of the RuntimeData specified
        /// as an input to the attest call.</param>
        /// <param name="sgxCollateral">The SGX SVN value for the
        /// enclave.</param>
        /// <param name="deprecatedVersion">DEPRECATED: Private Preview version
        /// of x-ms-ver claim.</param>
        /// <param name="deprecatedIsDebuggable">DEPRECATED: Private Preview
        /// version of x-ms-sgx-is-debuggable claim.</param>
        /// <param name="deprecatedSgxCollateral">DEPRECATED: Private Preview
        /// version of x-ms-sgx-collateral claim.</param>
        /// <param name="deprecatedEnclaveHeldData">DEPRECATED: Private Preview
        /// version of x-ms-sgx-ehd claim.</param>
        /// <param name="deprecatedEnclaveHeldData2">DEPRECATED: Private
        /// Preview version of x-ms-sgx-ehd claim.</param>
        /// <param name="deprecatedProductId">DEPRECATED: Private Preview
        /// version of x-ms-sgx-product-id</param>
        /// <param name="deprecatedMrEnclave">DEPRECATED: Private Preview
        /// version of x-ms-sgx-mrenclave.</param>
        /// <param name="deprecatedMrSigner">DEPRECATED: Private Preview
        /// version of x-ms-sgx-mrsigner.</param>
        /// <param name="deprecatedSvn">DEPRECATED: Private Preview version of
        /// x-ms-sgx-svn.</param>
        /// <param name="deprecatedTee">DEPRECATED: Private Preview version of
        /// x-ms-tee.</param>
        /// <param name="deprecatedPolicySigner">DEPRECATED: Private Preview
        /// version of x-ms-policy-signer</param>
        /// <param name="deprecatedPolicyHash">DEPRECATED: Private Preview
        /// version of x-ms-policy-hash</param>
        /// <param name="deprecatedRpData">DEPRECATED: Private Preview version
        /// of nonce</param>
        public AttestationResult(string jti = default(string), string iss = default(string), double? iat = default(double?), double? exp = default(double?), double? nbf = default(double?), object cnf = default(object), string nonce = default(string), string version = default(string), object runtimeClaims = default(object), object inittimeClaims = default(object), object policyClaims = default(object), string verifierType = default(string), JSONWebKey policySigner = default(JSONWebKey), byte[] policyHash = default(byte[]), bool? isDebuggable = default(bool?), double? productId = default(double?), string mrEnclave = default(string), string mrSigner = default(string), double? svn = default(double?), byte[] enclaveHeldData = default(byte[]), object sgxCollateral = default(object), string deprecatedVersion = default(string), bool? deprecatedIsDebuggable = default(bool?), object deprecatedSgxCollateral = default(object), byte[] deprecatedEnclaveHeldData = default(byte[]), byte[] deprecatedEnclaveHeldData2 = default(byte[]), double? deprecatedProductId = default(double?), string deprecatedMrEnclave = default(string), string deprecatedMrSigner = default(string), double? deprecatedSvn = default(double?), string deprecatedTee = default(string), JSONWebKey deprecatedPolicySigner = default(JSONWebKey), byte[] deprecatedPolicyHash = default(byte[]), string deprecatedRpData = default(string))
        {
            Jti = jti;
            Iss = iss;
            Iat = iat;
            Exp = exp;
            Nbf = nbf;
            Cnf = cnf;
            Nonce = nonce;
            Version = version;
            RuntimeClaims = runtimeClaims;
            InittimeClaims = inittimeClaims;
            PolicyClaims = policyClaims;
            VerifierType = verifierType;
            PolicySigner = policySigner;
            PolicyHash = policyHash;
            IsDebuggable = isDebuggable;
            ProductId = productId;
            MrEnclave = mrEnclave;
            MrSigner = mrSigner;
            Svn = svn;
            EnclaveHeldData = enclaveHeldData;
            SgxCollateral = sgxCollateral;
            DeprecatedVersion = deprecatedVersion;
            DeprecatedIsDebuggable = deprecatedIsDebuggable;
            DeprecatedSgxCollateral = deprecatedSgxCollateral;
            DeprecatedEnclaveHeldData = deprecatedEnclaveHeldData;
            DeprecatedEnclaveHeldData2 = deprecatedEnclaveHeldData2;
            DeprecatedProductId = deprecatedProductId;
            DeprecatedMrEnclave = deprecatedMrEnclave;
            DeprecatedMrSigner = deprecatedMrSigner;
            DeprecatedSvn = deprecatedSvn;
            DeprecatedTee = deprecatedTee;
            DeprecatedPolicySigner = deprecatedPolicySigner;
            DeprecatedPolicyHash = deprecatedPolicyHash;
            DeprecatedRpData = deprecatedRpData;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unique Identifier for the token
        /// </summary>
        [JsonProperty(PropertyName = "jti")]
        public string Jti { get; set; }

        /// <summary>
        /// Gets or sets the Principal who issued the token
        /// </summary>
        [JsonProperty(PropertyName = "iss")]
        public string Iss { get; set; }

        /// <summary>
        /// Gets or sets the time at which the token was issued, in the number
        /// of seconds since 1970-01-0T00:00:00Z UTC
        /// </summary>
        [JsonProperty(PropertyName = "iat")]
        public double? Iat { get; set; }

        /// <summary>
        /// Gets or sets the expiration time after which the token is no longer
        /// valid, in the number of seconds since 1970-01-0T00:00:00Z UTC
        /// </summary>
        [JsonProperty(PropertyName = "exp")]
        public double? Exp { get; set; }

        /// <summary>
        /// Gets or sets the not before time before which the token cannot be
        /// considered valid, in the number of seconds since
        /// 1970-01-0T00:00:00Z UTC
        /// </summary>
        [JsonProperty(PropertyName = "nbf")]
        public double? Nbf { get; set; }

        /// <summary>
        /// Gets or sets an RFC 7800 Proof of Possession Key
        /// </summary>
        [JsonProperty(PropertyName = "cnf")]
        public object Cnf { get; set; }

        /// <summary>
        /// Gets or sets the Nonce input to the attestation request, if
        /// provided.
        /// </summary>
        [JsonProperty(PropertyName = "nonce")]
        public string Nonce { get; set; }

        /// <summary>
        /// Gets or sets the Schema version of this structure. Current Value:
        /// 1.0
        /// </summary>
        [JsonProperty(PropertyName = "x-ms-ver")]
        public string Version { get; set; }

        /// <summary>
        /// Gets or sets runtime Claims
        /// </summary>
        [JsonProperty(PropertyName = "x-ms-runtime")]
        public object RuntimeClaims { get; set; }

        /// <summary>
        /// Gets or sets inittime Claims
        /// </summary>
        [JsonProperty(PropertyName = "x-ms-inittime")]
        public object InittimeClaims { get; set; }

        /// <summary>
        /// Gets or sets policy Generated Claims
        /// </summary>
        [JsonProperty(PropertyName = "x-ms-policy")]
        public object PolicyClaims { get; set; }

        /// <summary>
        /// Gets or sets the Attestation type being attested.
        /// </summary>
        [JsonProperty(PropertyName = "x-ms-attestation-type")]
        public string VerifierType { get; set; }

        /// <summary>
        /// Gets or sets the certificate used to sign the policy object, if
        /// specified.
        /// </summary>
        [JsonProperty(PropertyName = "x-ms-policy-signer")]
        public JSONWebKey PolicySigner { get; set; }

        /// <summary>
        /// Gets or sets the SHA256 hash of the BASE64URL encoded policy text
        /// used for attestation
        /// </summary>
        [JsonConverter(typeof(Base64UrlJsonConverter))]
        [JsonProperty(PropertyName = "x-ms-policy-hash")]
        public byte[] PolicyHash { get; set; }

        /// <summary>
        /// Gets or sets true if the enclave is debuggable, false otherwise
        /// </summary>
        [JsonProperty(PropertyName = "x-ms-sgx-is-debuggable")]
        public bool? IsDebuggable { get; set; }

        /// <summary>
        /// Gets or sets the SGX Product ID for the enclave.
        /// </summary>
        [JsonProperty(PropertyName = "x-ms-sgx-product-id")]
        public double? ProductId { get; set; }

        /// <summary>
        /// Gets or sets the HEX encoded SGX MRENCLAVE value for the enclave.
        /// </summary>
        [JsonProperty(PropertyName = "x-ms-sgx-mrenclave")]
        public string MrEnclave { get; set; }

        /// <summary>
        /// Gets or sets the HEX encoded SGX MRSIGNER value for the enclave.
        /// </summary>
        [JsonProperty(PropertyName = "x-ms-sgx-mrsigner")]
        public string MrSigner { get; set; }

        /// <summary>
        /// Gets or sets the SGX SVN value for the enclave.
        /// </summary>
        [JsonProperty(PropertyName = "x-ms-sgx-svn")]
        public double? Svn { get; set; }

        /// <summary>
        /// Gets or sets a copy of the RuntimeData specified as an input to the
        /// attest call.
        /// </summary>
        [JsonConverter(typeof(Base64UrlJsonConverter))]
        [JsonProperty(PropertyName = "x-ms-sgx-ehd")]
        public byte[] EnclaveHeldData { get; set; }

        /// <summary>
        /// Gets or sets the SGX SVN value for the enclave.
        /// </summary>
        [JsonProperty(PropertyName = "x-ms-sgx-collateral")]
        public object SgxCollateral { get; set; }

        /// <summary>
        /// Gets or sets DEPRECATED: Private Preview version of x-ms-ver claim.
        /// </summary>
        [JsonProperty(PropertyName = "ver")]
        public string DeprecatedVersion { get; set; }

        /// <summary>
        /// Gets or sets DEPRECATED: Private Preview version of
        /// x-ms-sgx-is-debuggable claim.
        /// </summary>
        [JsonProperty(PropertyName = "is-debuggable")]
        public bool? DeprecatedIsDebuggable { get; set; }

        /// <summary>
        /// Gets or sets DEPRECATED: Private Preview version of
        /// x-ms-sgx-collateral claim.
        /// </summary>
        [JsonProperty(PropertyName = "maa-attestationcollateral")]
        public object DeprecatedSgxCollateral { get; set; }

        /// <summary>
        /// Gets or sets DEPRECATED: Private Preview version of x-ms-sgx-ehd
        /// claim.
        /// </summary>
        [JsonConverter(typeof(Base64UrlJsonConverter))]
        [JsonProperty(PropertyName = "aas-ehd")]
        public byte[] DeprecatedEnclaveHeldData { get; set; }

        /// <summary>
        /// Gets or sets DEPRECATED: Private Preview version of x-ms-sgx-ehd
        /// claim.
        /// </summary>
        [JsonConverter(typeof(Base64UrlJsonConverter))]
        [JsonProperty(PropertyName = "maa-ehd")]
        public byte[] DeprecatedEnclaveHeldData2 { get; set; }

        /// <summary>
        /// Gets or sets DEPRECATED: Private Preview version of
        /// x-ms-sgx-product-id
        /// </summary>
        [JsonProperty(PropertyName = "product-id")]
        public double? DeprecatedProductId { get; set; }

        /// <summary>
        /// Gets or sets DEPRECATED: Private Preview version of
        /// x-ms-sgx-mrenclave.
        /// </summary>
        [JsonProperty(PropertyName = "sgx-mrenclave")]
        public string DeprecatedMrEnclave { get; set; }

        /// <summary>
        /// Gets or sets DEPRECATED: Private Preview version of
        /// x-ms-sgx-mrsigner.
        /// </summary>
        [JsonProperty(PropertyName = "sgx-mrsigner")]
        public string DeprecatedMrSigner { get; set; }

        /// <summary>
        /// Gets or sets DEPRECATED: Private Preview version of x-ms-sgx-svn.
        /// </summary>
        [JsonProperty(PropertyName = "svn")]
        public double? DeprecatedSvn { get; set; }

        /// <summary>
        /// Gets or sets DEPRECATED: Private Preview version of x-ms-tee.
        /// </summary>
        [JsonProperty(PropertyName = "tee")]
        public string DeprecatedTee { get; set; }

        /// <summary>
        /// Gets or sets DEPRECATED: Private Preview version of
        /// x-ms-policy-signer
        /// </summary>
        [JsonProperty(PropertyName = "policy_signer")]
        public JSONWebKey DeprecatedPolicySigner { get; set; }

        /// <summary>
        /// Gets or sets DEPRECATED: Private Preview version of
        /// x-ms-policy-hash
        /// </summary>
        [JsonConverter(typeof(Base64UrlJsonConverter))]
        [JsonProperty(PropertyName = "policy_hash")]
        public byte[] DeprecatedPolicyHash { get; set; }

        /// <summary>
        /// Gets or sets DEPRECATED: Private Preview version of nonce
        /// </summary>
        [JsonProperty(PropertyName = "rp_data")]
        public string DeprecatedRpData { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (PolicySigner != null)
            {
                PolicySigner.Validate();
            }
            if (DeprecatedPolicySigner != null)
            {
                DeprecatedPolicySigner.Validate();
            }
        }
    }
}
