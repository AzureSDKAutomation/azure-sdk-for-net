// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataShare.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// An Azure storage account data set.
    /// </summary>
    [Newtonsoft.Json.JsonObject("StorageAccount")]
    [Rest.Serialization.JsonTransformation]
    public partial class StorageAccountDataSet : DataSet
    {
        /// <summary>
        /// Initializes a new instance of the StorageAccountDataSet class.
        /// </summary>
        public StorageAccountDataSet()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StorageAccountDataSet class.
        /// </summary>
        /// <param name="paths">A list of storage account paths.</param>
        /// <param name="storageAccountResourceId">Resource id of the storage
        /// account.</param>
        /// <param name="id">The resource id of the azure resource</param>
        /// <param name="name">Name of the azure resource</param>
        /// <param name="type">Type of the azure resource</param>
        /// <param name="dataSetId">Unique id for identifying a data set
        /// resource</param>
        /// <param name="location">Location of the storage account.</param>
        public StorageAccountDataSet(IList<StorageAccountPath> paths, string storageAccountResourceId, string id = default(string), string name = default(string), string type = default(string), string dataSetId = default(string), string location = default(string))
            : base(id, name, type)
        {
            DataSetId = dataSetId;
            Location = location;
            Paths = paths;
            StorageAccountResourceId = storageAccountResourceId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets unique id for identifying a data set resource
        /// </summary>
        [JsonProperty(PropertyName = "properties.dataSetId")]
        public string DataSetId { get; private set; }

        /// <summary>
        /// Gets location of the storage account.
        /// </summary>
        [JsonProperty(PropertyName = "properties.location")]
        public string Location { get; private set; }

        /// <summary>
        /// Gets or sets a list of storage account paths.
        /// </summary>
        [JsonProperty(PropertyName = "properties.paths")]
        public IList<StorageAccountPath> Paths { get; set; }

        /// <summary>
        /// Gets or sets resource id of the storage account.
        /// </summary>
        [JsonProperty(PropertyName = "properties.storageAccountResourceId")]
        public string StorageAccountResourceId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Paths == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Paths");
            }
            if (StorageAccountResourceId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "StorageAccountResourceId");
            }
            if (Paths != null)
            {
                foreach (var element in Paths)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
